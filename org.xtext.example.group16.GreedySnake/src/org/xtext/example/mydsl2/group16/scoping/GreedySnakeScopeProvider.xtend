/*
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage
import org.eclipse.xtext.EcoreUtil2
import java.util.List
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GreedySnakeScopeProvider extends AbstractGreedySnakeScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		if (reference.EReferenceType == GreedySnakePackage.Literals.INITIAL_SNAKE_SPECIFICATIN) {
			// All references to cell specifications, no matter where, always see all the cell specifications in the model
			var EObject rootElement = EcoreUtil2.getRootContainer(context);
			var List<? extends EObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, InitialSnakeSpecificatin);
			return Scopes.scopeFor(candidates);
		} else {
			return super.getScope(context, reference);
		}
	}

//	def IScope scope_StateFilterExpression_cell_state(StateFilterExpression sfe, EReference reference) {
//		var EObject rootElement = EcoreUtil2.getRootContainer(sfe);
//		var List<? extends EObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, CellState);
//		return Scopes.scopeFor(candidates);
//	}
}
