/*
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.validation

import org.xtext.example.mydsl2.group16.typing.validation.GreedySnakeSystemValidator
import org.xtext.example.mydsl2.group16.greedySnake.GlobalFieldInitialisation
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin
import org.xtext.example.mydsl2.group16.greedySnake.InitialFoodSpecificatin
import org.xtext.example.mydsl2.group16.greedySnake.InitialObstacleSpecificatin
import org.xtext.example.mydsl2.group16.greedySnake.BackSpecification
import org.xtext.example.mydsl2.group16.greedySnake.FoodInitDisplay
import org.xtext.example.mydsl2.group16.greedySnake.ObstacleInitDisplay
import org.xtext.example.mydsl2.group16.greedySnake.SnakeInitDisplay

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GreedySnakeValidator extends GreedySnakeSystemValidator {
	
	public static val INVALID_FIELD_NAME = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_GLOBALFIELD_NAME'
	public static val INVALID_SNAKE_NAME = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_SNAKE_NAME'
	public static val INVALID_FOOD_NAME = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_FOOD_NAME'
	public static val INVALID_OBSTACLE_NAME = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_OBSTACLE_NAME'
	public static val INVALID_WIDTH = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_WIDTH'
	public static val INVALID_SNAKE_TAG = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_SNAKE_TAG'
	public static val INVALID_FOOD_TAG = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_FOOD_TAG'
	public static val INVALID_OBSTACLE_TAG = 'org.xtext.example.mydsl2.group16.greedySnake.INVALID_OBSTACLE_TAG'
	
//check variable name with lowerUpper 
//GlobalFieldName lowercase
@Check
def checkFieldStartWithLowerCase(GlobalFieldInitialisation gfi){
	if(!Character.isLowerCase(gfi.name.charAt(0))){
		warning('Name should start with a lower-case character', 
			gfi,GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__NAME,
			INVALID_FIELD_NAME
		 )
	 }
  }
  
@Check
def checkSnakeStartWithLowerCase(InitialSnakeSpecificatin iss){
	if(!Character.isLowerCase(iss.name.charAt(0))){
		warning('Name should start with a lower-case character', 
			iss,GreedySnakePackage.Literals.INITIAL_SNAKE_SPECIFICATIN__NAME,
			INVALID_SNAKE_NAME
		 )
	 }
  }
  
@Check
def checkFoodStartWithLowerCase(InitialFoodSpecificatin ifs){
	if(!Character.isLowerCase(ifs.name.charAt(0))){
		warning('Name should start with a lower-case character', 
			ifs,GreedySnakePackage.Literals.INITIAL_FOOD_SPECIFICATIN__NAME,
			INVALID_FOOD_NAME
		 )
	 }
  }
  
@Check
def checkObsatcleStartWithLowerCase(InitialObstacleSpecificatin ios){
	if(!Character.isLowerCase(ios.name.charAt(0))){
		warning('Name should start with a lower-case character', 
			ios,GreedySnakePackage.Literals.INITIAL_OBSTACLE_SPECIFICATIN__NAME,
			INVALID_OBSTACLE_NAME
		 )
	 }
  }

//check the tag
@Check
def checkSnakeTag(SnakeInitDisplay iss){
	if(iss.snakeTag !== 1){
		warning("Snake Tag must be 1",iss,
			GreedySnakePackage.Literals.SNAKE_INIT_DISPLAY__SNAKE_TAG,
			INVALID_SNAKE_TAG
		)
	 }
  }
  
@Check
def checkFoodTag(FoodInitDisplay fid){
	if(fid.foodTag !== 2){
		warning("Food Tag must be 2",fid,
			GreedySnakePackage.Literals.FOOD_INIT_DISPLAY__FOOD_TAG,
			INVALID_FOOD_TAG
		)
	 }
}

@Check
def checkObstacleTag(ObstacleInitDisplay oid){
	if(oid.obstacleTag !== 3){
			warning("Obstacle Tag must be 3",oid,
			GreedySnakePackage.Literals.OBSTACLE_INIT_DISPLAY__OBSTACLE_TAG,
			INVALID_OBSTACLE_TAG
		)
	 }
}




}
