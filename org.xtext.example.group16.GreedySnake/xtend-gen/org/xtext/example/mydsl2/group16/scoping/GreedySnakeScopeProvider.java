/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.scoping;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class GreedySnakeScopeProvider extends AbstractGreedySnakeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EClass _eReferenceType = reference.getEReferenceType();
    boolean _equals = Objects.equal(_eReferenceType, GreedySnakePackage.Literals.INITIAL_SNAKE_SPECIFICATIN);
    if (_equals) {
      EObject rootElement = EcoreUtil2.getRootContainer(context);
      List<? extends EObject> candidates = EcoreUtil2.<InitialSnakeSpecificatin>getAllContentsOfType(rootElement, InitialSnakeSpecificatin.class);
      return Scopes.scopeFor(candidates);
    } else {
      return super.getScope(context, reference);
    }
  }
}
