/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.scoping;

import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.xtext.example.mydsl2.group16.greedySnake.DirectionSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.Move;
import org.xtext.example.mydsl2.group16.greedySnake.SnakeMoveSpecification;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class GreedySnakeScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Move_dir(final Move context, final EReference ref) {
    return this.visibleVariablesScope(context);
  }
  
  protected IScope _visibleVariablesScope(final SnakeMoveSpecification sms) {
    return this.visibleVariablesScope(sms.eContainer());
  }
  
  protected IScope _visibleVariablesScope(final DirectionSpecification ds) {
    return Scopes.scopeFor(ds.getDi());
  }
  
  public IScope visibleVariablesScope(final EObject ds) {
    if (ds instanceof DirectionSpecification) {
      return _visibleVariablesScope((DirectionSpecification)ds);
    } else if (ds instanceof SnakeMoveSpecification) {
      return _visibleVariablesScope((SnakeMoveSpecification)ds);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ds).toString());
    }
  }
}
