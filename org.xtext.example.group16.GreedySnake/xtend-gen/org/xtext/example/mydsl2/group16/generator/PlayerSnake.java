package org.xtext.example.mydsl2.group16.generator;

import java.util.ArrayList;
import java.util.function.Consumer;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl2.group16.greedySnake.DirectionSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalMap;
import org.xtext.example.mydsl2.group16.greedySnake.IconTag;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFireSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFoodSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialObstacleSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.Move;
import org.xtext.example.mydsl2.group16.greedySnake.MusicPath;
import org.xtext.example.mydsl2.group16.greedySnake.MusicSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.SnakeMoveSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.dis;

@SuppressWarnings("all")
public class PlayerSnake extends GeneralGenerator {
  public PlayerSnake(final ModelPreprocessor mpp) {
    super(mpp);
  }
  
  public void generate(final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generatePlayerSnakeClassFileName = this.generatePlayerSnakeClassFileName();
    _builder.append(_generatePlayerSnakeClassFileName);
    fsa.generateFile(_builder.toString(), this.generatePlayerSnake());
  }
  
  public CharSequence generatePlayerSnake() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    CharSequence _generateSnakePackage = this.generateSnakePackage();
    _builder.append(_generateSnakePackage);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.swing.ImageIcon;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JOptionPane;");
    _builder.newLine();
    _builder.append("import java.util.LinkedList;");
    _builder.newLine();
    _builder.append("import java.awt.Image;");
    _builder.newLine();
    _builder.append("import java.util.Deque;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    CharSequence _generateGamePackage = this.generateGamePackage();
    _builder.append(_generateGamePackage);
    _builder.append(".*;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class PlayerSnake {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MainWindow GameUI;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Foodset food;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Obstacle obstacle;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Thread run;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Direction direction = Direction.RIGHT;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int speed = 300;");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function = (InitialSnakeSpecificatin fo) -> {
      return this.generatePlaySnake(fo);
    };
    String _join = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function);
    _builder.append(_join, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//snake move");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function_1 = (InitialSnakeSpecificatin o) -> {
      final Function1<SnakeMoveSpecification, CharSequence> _function_2 = (SnakeMoveSpecification dir) -> {
        return this.generateMove(o, dir);
      };
      return IterableExtensions.<SnakeMoveSpecification>join(this.gs.getSnakeMove(), "", _function_2);
    };
    String _join_1 = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_1);
    _builder.append(_join_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function_2 = (InitialSnakeSpecificatin sna) -> {
      final Function1<MusicSpecification, CharSequence> _function_3 = (MusicSpecification mus) -> {
        return this.generateOver(sna, mus);
      };
      return IterableExtensions.<MusicSpecification>join(this.gs.getMusic(), "", _function_3);
    };
    String _join_2 = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_2);
    _builder.append(_join_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//if snake died");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialObstacleSpecificatin, CharSequence> _function_3 = (InitialObstacleSpecificatin o) -> {
      return this.CheckDeath(o);
    };
    String _join_3 = IterableExtensions.<InitialObstacleSpecificatin>join(this.gs.getObstacles(), "", _function_3);
    _builder.append(_join_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialFoodSpecificatin, CharSequence> _function_4 = (InitialFoodSpecificatin fd) -> {
      final Function1<InitialSnakeSpecificatin, CharSequence> _function_5 = (InitialSnakeSpecificatin sk) -> {
        return this.CheckEat(fd, sk);
      };
      return IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_5);
    };
    String _join_4 = IterableExtensions.<InitialFoodSpecificatin>join(this.gs.getFoods(), "", _function_4);
    _builder.append(_join_4, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void quit(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("quit = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setDirection(Direction direction){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.direction = direction;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Direction getDirection(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return direction;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSpeed(int speed){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.speed = speed;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void resetSpeed(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.speed = defaultSpeed;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setDefaultSpeed(int speed){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.defaultSpeed = speed;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setHeadIcon(int tag){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("headIconTag = tag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setBodyIcon(int tag){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bodyIconTag = tag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getBulletNum(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return bulletNumber;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Coordinate getHeadCoor(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return body.getFirst().coor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void goDie(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("quit();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Iterator<Body> iter = body.iterator(); iter.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Body node = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("node.label.setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("GameUI.remove(node.label);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void fire(Coordinate snakehead,Coordinate target,Direction d){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Fire(snakehead,target,d);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bulletNumber--;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GameUI.getWeaponLabel().setText(\"\" + bulletNumber);//refresh bullets");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void show(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Iterator<Body> iter = body.iterator(); iter.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Body node = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("node.label.setBounds(IndexToPixel.getXPixel(node.coor.x), ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("IndexToPixel.getYPixel(node.coor.y), 20, 20);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("node.label.setIcon(bodyIcon[bodyIconTag]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Body node = body.getFirst();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("node.label.setIcon(headIcon[headIconTag]);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void MoveThread(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("run = new Thread() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (!quit) ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Thread.sleep(speed);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!GameUI.getPause() && GameUI.getIsrun())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("move();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Write2file.PrintMap(GameUI.getMap(),");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"");
    final Function1<GlobalMap, CharSequence> _function_5 = (GlobalMap m) -> {
      return m.getMap();
    };
    String _join_5 = IterableExtensions.<GlobalMap>join(this.gs.getMap(), "", _function_5);
    String _plus = (_builder_1.toString() + _join_5);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("\"");
    String _plus_1 = (_plus + _builder_2);
    _builder.append(_plus_1, "\t\t\t\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(quit)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("show();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Player thread exit...\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("run.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Fire extends Thread{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Coordinate fireCoor;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ImageIcon fireIcon;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private JLabel fireLabel;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Coordinate target;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private boolean quit = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Direction moveDirection;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Coordinate snakehead;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//modify---generatefire");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<InitialFireSpecification, CharSequence> _function_6 = (InitialFireSpecification o) -> {
      return this.generateFire(o);
    };
    String _join_6 = IterableExtensions.<InitialFireSpecification>join(this.gs.getFire(), "", _function_6);
    _builder.append(_join_6, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//modify");
    _builder.newLine();
    _builder.append("\t\t    ");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function_7 = (InitialSnakeSpecificatin o) -> {
      final Function1<SnakeMoveSpecification, CharSequence> _function_8 = (SnakeMoveSpecification dis) -> {
        return this.generateSnakeDirection(o, dis);
      };
      return IterableExtensions.<SnakeMoveSpecification>join(this.gs.getSnakeMove(), "", _function_8);
    };
    String _join_7 = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_7);
    _builder.append(_join_7, "\t\t    ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t   ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<MusicSpecification, CharSequence> _function_8 = (MusicSpecification o) -> {
      return this.generateshow(o);
    };
    String _join_8 = IterableExtensions.<MusicSpecification>join(this.gs.getMusic(), "", _function_8);
    _builder.append(_join_8, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<DirectionSpecification, CharSequence> _function_9 = (DirectionSpecification di) -> {
      return this.genereteFireMove(di);
    };
    String _join_9 = IterableExtensions.<DirectionSpecification>join(this.gs.getDirections(), "", _function_9);
    _builder.append(_join_9, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(!quit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Thread.sleep(50);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("move();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(quit)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("show();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateshow(final MusicSpecification ms) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> path = new ArrayList<String>();
      final Consumer<MusicPath> _function = (MusicPath o) -> {
        path.add(o.getPath());
      };
      ms.getMusicPath().forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public void show(){");
      _builder.newLine();
      _builder.append("//modify");
      _builder.newLine();
      _builder.append("if(fireCoor.x == target.x && fireCoor.y == target.y)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(target.x < 0 || target.x > GameUI.getAreaWidth() || target.y < 0 || target.y > GameUI.getAreaHeight()){}");
      _builder.newLine();
      _builder.append("else new Music(");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"");
      String _get = path.get(1);
      String _plus = (_builder_1.toString() + _get);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\"");
      String _plus_1 = (_plus + _builder_2);
      _builder.append(_plus_1);
      _builder.append(").start();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("fireLabel.setVisible(false);");
      _builder.newLine();
      _builder.append("obstacle.removeOne(target);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("GameUI.remove(fireLabel);");
      _builder.newLine();
      _builder.append("quit = true;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("fireLabel.setVisible(false);");
      _builder.newLine();
      _builder.append("fireLabel.setBounds(IndexToPixel.getXPixel(fireCoor.x), ");
      _builder.newLine();
      _builder.append("IndexToPixel.getYPixel(fireCoor.y), 20, 20);");
      _builder.newLine();
      _builder.append("fireLabel.setVisible(true);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence genereteFireMove(final DirectionSpecification ds) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> Dir = new ArrayList<String>();
      final Consumer<dis> _function = (dis o) -> {
        Dir.add(o.getDirection().getName());
      };
      ds.getDi().forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public void move(){");
      _builder.newLine();
      _builder.append("if(moveDirection == Direction.");
      String _get = Dir.get(0);
      _builder.append(_get);
      _builder.append(") //up");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fireCoor.y--;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_1 = Dir.get(1);
      _builder.append(_get_1);
      _builder.append(") //down");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fireCoor.y++;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_2 = Dir.get(2);
      _builder.append(_get_2);
      _builder.append(") //left");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fireCoor.x--;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_3 = Dir.get(3);
      _builder.append(_get_3);
      _builder.append(") //right");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fireCoor.x++;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateSnakeDirection(final InitialSnakeSpecificatin ifs, final SnakeMoveSpecification ds) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> Dir = new ArrayList<String>();
      final Consumer<Move> _function = (Move o) -> {
        Dir.add(o.getDir().getDirection().getName());
      };
      ds.getIF().forEach(_function);
      final ArrayList<String> moveName = new ArrayList<String>();
      final Consumer<Move> _function_1 = (Move o) -> {
        moveName.add(o.getName());
      };
      ds.getIF().forEach(_function_1);
      final ArrayList<Integer> moveCount = new ArrayList<Integer>();
      final Consumer<Move> _function_2 = (Move o) -> {
        moveCount.add(Integer.valueOf(o.getMoveVal()));
      };
      ds.getIF().forEach(_function_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("if(moveDirection == Direction.");
      String _get = Dir.get(0);
      _builder.append(_get);
      _builder.append(") //up");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("fireCoor = new Coordinate(");
      String _get_1 = moveName.get(0);
      _builder.append(_get_1);
      _builder.append(".x,");
      String _get_2 = moveName.get(0);
      _builder.append(_get_2);
      _builder.append(".y-");
      Integer _get_3 = moveCount.get(0);
      _builder.append(_get_3);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_4 = Dir.get(1);
      _builder.append(_get_4);
      _builder.append(") //down");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("fireCoor = new Coordinate(");
      String _get_5 = moveName.get(0);
      _builder.append(_get_5);
      _builder.append(".x,");
      String _get_6 = moveName.get(0);
      _builder.append(_get_6);
      _builder.append(".y+");
      Integer _get_7 = moveCount.get(1);
      _builder.append(_get_7);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_8 = Dir.get(2);
      _builder.append(_get_8);
      _builder.append(") //left");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("fireCoor = new Coordinate(");
      String _get_9 = moveName.get(0);
      _builder.append(_get_9);
      _builder.append(".x-");
      Integer _get_10 = moveCount.get(2);
      _builder.append(_get_10);
      _builder.append(",");
      String _get_11 = moveName.get(0);
      _builder.append(_get_11);
      _builder.append(".y);");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(moveDirection == Direction.");
      String _get_12 = Dir.get(3);
      _builder.append(_get_12);
      _builder.append(") //right");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("fireCoor = new Coordinate(");
      String _get_13 = moveName.get(0);
      _builder.append(_get_13);
      _builder.append(".x+");
      Integer _get_14 = moveCount.get(3);
      _builder.append(_get_14);
      _builder.append(",");
      String _get_15 = moveName.get(0);
      _builder.append(_get_15);
      _builder.append(".y);");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("GameUI.add(fireLabel);");
      _builder.newLine();
      _builder.append("show();");
      _builder.newLine();
      _builder.append("this.start();");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateOver(final InitialSnakeSpecificatin sna, final MusicSpecification mus) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> path = new ArrayList<String>();
      final Consumer<MusicPath> _function = (MusicPath o) -> {
        path.add(o.getPath());
      };
      mus.getMusicPath().forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("if(checkDeath(next_coor))");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("new Music(");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"");
      String _get = path.get(0);
      String _plus = (_builder_1.toString() + _get);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\"");
      String _plus_1 = (_plus + _builder_2);
      _builder.append(_plus_1, "\t");
      _builder.append(").start(); //over");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("GameUI.setIsrun(false);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("quit();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("JOptionPane.showMessageDialog(null, \"Game over!\", ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"Information\", JOptionPane.CANCEL_OPTION);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("GameUI.setPause(true);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Body next_node = new Body(next_coor,headIcon[headIconTag]);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("body.addFirst(next_node);//add head");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//modify");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GameUI.setMap(next_node.coor.y, next_node.coor.x, ");
      int _snakeTag = sna.getMembers().getSna().getSnakeTag();
      _builder.append(_snakeTag, "\t\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("next_node.label.setVisible(true);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GameUI.add(next_node.label);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(!checkEat(next_coor))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Body tail = body.pollLast();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GameUI.setMap(tail.coor.y, tail.coor.x, 0);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tail.label.setVisible(false);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GameUI.remove(tail.label);");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence CheckEat(final InitialFoodSpecificatin ifs, final InitialSnakeSpecificatin iss) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<MusicSpecification, CharSequence> _function = (MusicSpecification o) -> {
      return this.generateMusic(o);
    };
    String _join = IterableExtensions.<MusicSpecification>join(this.gs.getMusic(), "", _function);
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("point += _point;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(_point == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bulletNumber ++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("GameUI.getWeaponLabel().setText(\"\" + bulletNumber);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GameUI.getScoreLabel().setText(\"\" + point);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GameUI.getLengthLabel().setText(\"\" + body.size());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//GameUI.map[coor.y][coor.x] = ");
    int _snakeTag = iss.getMembers().getSna().getSnakeTag();
    _builder.append(_snakeTag, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("GameUI.setMap(coor.y, coor.x,");
    int _snakeTag_1 = iss.getMembers().getSna().getSnakeTag();
    _builder.append(_snakeTag_1, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMusic(final MusicSpecification music) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> musicName = new ArrayList<String>();
      final Consumer<MusicPath> _function = (MusicPath o) -> {
        musicName.add(o.getName());
      };
      music.getMusicPath().forEach(_function);
      final ArrayList<String> musicPath = new ArrayList<String>();
      final Consumer<MusicPath> _function_1 = (MusicPath o) -> {
        musicPath.add(o.getPath());
      };
      music.getMusicPath().forEach(_function_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public boolean checkEat(Coordinate coor){");
      _builder.newLine();
      _builder.append("double _point = food.getFoodPoint(coor);");
      _builder.newLine();
      _builder.append("if(_point == -1)//not eat food");
      _builder.newLine();
      _builder.append("return false;");
      _builder.newLine();
      _builder.append("else//eat food");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("new Music(\"");
      String _get = musicPath.get(2);
      _builder.append(_get);
      _builder.append("\").start();");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence CheckDeath(final InitialObstacleSpecificatin ios) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public boolean checkDeath(Coordinate coor){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("if( coor.x < 0 || coor.x >= GameUI.getAreaWidth()||");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("coor.y < 0 || coor.y >= GameUI.getAreaHeight()||");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("GameUI.getMap()[coor.y][coor.x] == ");
    int _obstacleTag = ios.getMembers().getObstacle().getObstacleTag();
    _builder.append(_obstacleTag, "       ");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFire(final InitialFireSpecification ifs) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> IconLocate = new ArrayList<String>();
      final Consumer<IconTag> _function = (IconTag fi) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = fi.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        IconLocate.add(_plus_1);
      };
      ifs.getMembers().getFire().getFireIcon().forEach(_function);
      final String size = ifs.getMembers().getFire().getIconsize();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public Fire(Coordinate snakehead,Coordinate target,Direction d){");
      _builder.newLine();
      _builder.append("fireIcon = new ImageIcon(");
      String _join = IterableExtensions.join(IconLocate, "");
      _builder.append(_join);
      _builder.append(");//firePath remember join");
      _builder.newLineIfNotEmpty();
      _builder.append("fireIcon.setImage(fireIcon.getImage().getScaledInstance(");
      _builder.append(size);
      _builder.append(",");
      _builder.append(size);
      _builder.append(",Image.SCALE_SMOOTH));");
      _builder.newLineIfNotEmpty();
      _builder.append("fireLabel = new JLabel(fireIcon);\t\t\t\t\t    ");
      _builder.newLine();
      _builder.append("this.target = target;");
      _builder.newLine();
      _builder.append("this.moveDirection = d;");
      _builder.newLine();
      _builder.append("this.snakehead = snakehead;");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateMove(final InitialSnakeSpecificatin iss, final SnakeMoveSpecification sms) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> Dir = new ArrayList<String>();
      final Consumer<Move> _function = (Move o) -> {
        Dir.add(o.getDir().getDirection().getName());
      };
      sms.getIF().forEach(_function);
      final ArrayList<String> moveName = new ArrayList<String>();
      final Consumer<Move> _function_1 = (Move o) -> {
        moveName.add(o.getName());
      };
      sms.getIF().forEach(_function_1);
      final ArrayList<Integer> moveCount = new ArrayList<Integer>();
      final Consumer<Move> _function_2 = (Move o) -> {
        moveCount.add(Integer.valueOf(o.getMoveVal()));
      };
      sms.getIF().forEach(_function_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public void move(){");
      _builder.newLine();
      _builder.append("Coordinate head,next_coor = new Coordinate(");
      int _initial_x = iss.getMembers().getSna().getInitial_x();
      _builder.append(_initial_x);
      _builder.append(",");
      int _initial_y = iss.getMembers().getSna().getInitial_y();
      _builder.append(_initial_y);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("if(direction == Direction.");
      String _get = Dir.get(0);
      _builder.append(_get);
      _builder.append("){ // up");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("head = body.getFirst().coor;//get head");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("next_coor = new Coordinate(head.x,head.y - ");
      Integer _get_1 = moveCount.get(0);
      _builder.append(_get_1, "\t");
      _builder.append(");//head up 1");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(direction == Direction.");
      String _get_2 = Dir.get(1);
      _builder.append(_get_2);
      _builder.append("){ //down");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("head = body.getFirst().coor;//get head");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("next_coor = new Coordinate(head.x,head.y + ");
      Integer _get_3 = moveCount.get(1);
      _builder.append(_get_3, "\t");
      _builder.append(");//head down 1");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(direction == Direction.");
      String _get_4 = Dir.get(2);
      _builder.append(_get_4);
      _builder.append("){ //left");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("head = body.getFirst().coor;//get head");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("next_coor = new Coordinate(head.x - ");
      Integer _get_5 = moveCount.get(2);
      _builder.append(_get_5, "\t");
      _builder.append(",head.y);//head left 1");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(direction == Direction.");
      String _get_6 = Dir.get(3);
      _builder.append(_get_6);
      _builder.append("){ //right");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("head = body.getFirst().coor;//get head");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("next_coor = new Coordinate(head.x + ");
      Integer _get_7 = moveCount.get(3);
      _builder.append(_get_7, "\t");
      _builder.append(",head.y);//head right 1");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generatePlaySnake(final InitialSnakeSpecificatin iss) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<IconTag> HIcon = new ArrayList<IconTag>();
      final String Headsize = iss.getMembers().getSna().getIconsize();
      final Consumer<IconTag> _function = (IconTag bi) -> {
        HIcon.add(bi);
      };
      iss.getMembers().getSna().getHeadIcon().forEach(_function);
      final ArrayList<String> headIcon = new ArrayList<String>();
      final ArrayList<Integer> headIconTag = new ArrayList<Integer>();
      final ArrayList<String> locateHead = new ArrayList<String>();
      final Consumer<IconTag> _function_1 = (IconTag i) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = i.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        headIcon.add(_plus_1);
      };
      HIcon.forEach(_function_1);
      final Consumer<IconTag> _function_2 = (IconTag i) -> {
        headIconTag.add(Integer.valueOf(i.getTag()));
      };
      HIcon.forEach(_function_2);
      final Consumer<IconTag> _function_3 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        locateHead.add(_plus_1);
      };
      HIcon.forEach(_function_3);
      final ArrayList<IconTag> BIcon = new ArrayList<IconTag>();
      final String Bodysize = iss.getMembers().getSna().getIconsize();
      final Consumer<IconTag> _function_4 = (IconTag bi) -> {
        BIcon.add(bi);
      };
      iss.getMembers().getSna().getBodyIcon().forEach(_function_4);
      final ArrayList<String> bodyIcon = new ArrayList<String>();
      final Consumer<IconTag> _function_5 = (IconTag i) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = i.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        bodyIcon.add(_plus_1);
      };
      BIcon.forEach(_function_5);
      final ArrayList<String> locateBody = new ArrayList<String>();
      final ArrayList<Integer> bodyIconTag = new ArrayList<Integer>();
      final Consumer<IconTag> _function_6 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        locateBody.add(_plus_1);
      };
      BIcon.forEach(_function_6);
      final Consumer<IconTag> _function_7 = (IconTag i) -> {
        bodyIconTag.add(Integer.valueOf(i.getTag()));
      };
      BIcon.forEach(_function_7);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private int defaultSpeed = ");
      int _defaultSpeed = iss.getMembers().getSna().getDefaultSpeed();
      _builder.append(_defaultSpeed);
      _builder.append(";//depfult speed");
      _builder.newLineIfNotEmpty();
      _builder.append("private Deque<Body> body = new LinkedList<Body>();");
      _builder.newLine();
      _builder.append("private double point = 0;//the point");
      _builder.newLine();
      _builder.append("private int bulletNumber = 20;//the bullet");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("private ImageIcon[] headIcon = new ImageIcon[");
      int _length = ((Object[])Conversions.unwrapArray(headIcon, Object.class)).length;
      _builder.append(_length);
      _builder.append("];//snake headIcon");
      _builder.newLineIfNotEmpty();
      _builder.append("private int headIconTag = ");
      Integer _get = headIconTag.get(0);
      _builder.append(_get);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("private ImageIcon[] bodyIcon = new ImageIcon[");
      int _length_1 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length_1);
      _builder.append("];//snake bodyIcon");
      _builder.newLineIfNotEmpty();
      _builder.append("private int bodyIconTag = ");
      Integer _get_1 = bodyIconTag.get(0);
      _builder.append(_get_1);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("private boolean quit = false;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("public PlayerSnake(MainWindow GameUI,Foodset food,Obstacle obstacle){");
      _builder.newLine();
      _builder.append("this.GameUI = GameUI;");
      _builder.newLine();
      _builder.append("this.food = food;");
      _builder.newLine();
      _builder.append("this.obstacle = obstacle;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_2 = ((Object[])Conversions.unwrapArray(headIcon, Object.class)).length;
      _builder.append(_length_2);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      {
        int _length_3 = ((Object[])Conversions.unwrapArray(headIcon, Object.class)).length;
        int _minus = (_length_3 - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("headIcon[");
          _builder.append(idx, "\t");
          _builder.append("] = new ImageIcon(");
          String _get_2 = locateHead.get((idx).intValue());
          _builder.append(_get_2, "\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("headIcon[");
          _builder.append(idx, "\t");
          _builder.append("].setImage(headIcon[");
          _builder.append(idx, "\t");
          _builder.append("].getImage().getScaledInstance(");
          _builder.append(Headsize, "\t");
          _builder.append(",");
          _builder.append(Headsize, "\t");
          _builder.append(",Image.SCALE_SMOOTH));");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append(" ");
          _builder.newLine();
        }
      }
      _builder.append("}");
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_4 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length_4);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      {
        int _length_5 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
        int _minus_1 = (_length_5 - 1);
        IntegerRange _upTo_1 = new IntegerRange(0, _minus_1);
        for(final Integer idx_1 : _upTo_1) {
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("bodyIcon[");
          _builder.append(idx_1, "\t");
          _builder.append("] = new ImageIcon(");
          String _get_3 = locateBody.get((idx_1).intValue());
          _builder.append(_get_3, "\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("bodyIcon[");
          _builder.append(idx_1, "\t");
          _builder.append("].setImage(bodyIcon[");
          _builder.append(idx_1, "\t");
          _builder.append("].getImage().getScaledInstance(");
          _builder.append(Bodysize, "\t");
          _builder.append(",");
          _builder.append(Bodysize, "\t");
          _builder.append(",Image.SCALE_SMOOTH));");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.newLine();
        }
      }
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("Body head = new Body(");
      int _initial_x = iss.getMembers().getSna().getInitial_x();
      _builder.append(_initial_x);
      _builder.append(",");
      int _initial_y = iss.getMembers().getSna().getInitial_y();
      _builder.append(_initial_y);
      _builder.append(",headIcon[headIconTag]);//inital location");
      _builder.newLineIfNotEmpty();
      _builder.append("body.addFirst(head);");
      _builder.newLine();
      _builder.append("GameUI.add(head.label);");
      _builder.newLine();
      _builder.append("head.label.setBounds(IndexToPixel.getXPixel(head.coor.x), IndexToPixel.getYPixel(head.coor.y), 20, 20);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("GameUI.setMap(0, 0, ");
      int _snakeTag = iss.getMembers().getSna().getSnakeTag();
      _builder.append(_snakeTag);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("MoveThread();");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
