package org.xtext.example.mydsl2.group16.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl2.group16.greedySnake.AboutSpecification;

@SuppressWarnings("all")
public class About extends GeneralGenerator {
  public About(final ModelPreprocessor mpp) {
    super(mpp);
  }
  
  public void generate(final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateAboutClassFileName = this.generateAboutClassFileName();
    _builder.append(_generateAboutClassFileName);
    fsa.generateFile(_builder.toString(), this.generateAbout());
  }
  
  public CharSequence generateAbout() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    CharSequence _generateGamePackage = this.generateGamePackage();
    _builder.append(_generateGamePackage);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.awt.BorderLayout;");
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.Desktop;");
    _builder.newLine();
    _builder.append("import java.awt.Font;");
    _builder.newLine();
    _builder.append("import java.awt.GradientPaint;");
    _builder.newLine();
    _builder.append("import java.awt.Graphics;");
    _builder.newLine();
    _builder.append("import java.awt.Graphics2D;");
    _builder.newLine();
    _builder.append("import java.awt.Image;");
    _builder.newLine();
    _builder.append("import java.awt.Toolkit;");
    _builder.newLine();
    _builder.append("import java.awt.event.MouseAdapter;");
    _builder.newLine();
    _builder.append("import java.awt.event.MouseEvent;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.net.URI;");
    _builder.newLine();
    _builder.append("import java.net.URISyntaxException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.BorderFactory;");
    _builder.newLine();
    _builder.append("import javax.swing.ImageIcon;");
    _builder.newLine();
    _builder.append("import javax.swing.JDialog;");
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JTextArea;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ShadePanel extends JPanel {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long serialVersionUID = -2644424271663261406L;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ShadePanel() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setLayout(null);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void paintComponent(Graphics g1) {// 重写绘制组件外观");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Graphics2D g = (Graphics2D) g1;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.paintComponent(g);// 执行超类方法");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int width = getWidth();// 获取组件大小");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int height = getHeight();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// 创建填充模式对象");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GradientPaint paint = new GradientPaint(0, 0, Color.CYAN, 0, height,Color.MAGENTA);//实现颜色渐变");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//GradientPaint paint = new GradientPaint(0, 0, Color.red, 0, height,Color.blue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("g.setPaint(paint);// 设置绘图对象的填充模式");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("g.fillRect(0, 0, width, height);// 绘制矩形填充控件界面");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("public class About extends JDialog {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long serialVersionUID = 4693799019369193520L;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JPanel contentPane;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Font f1 = new Font(\"微软雅黑\",Font.PLAIN,15);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Font f2 = new Font(\"微软雅黑\",Font.PLAIN,20);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ImageIcon icon;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JLabel label;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public About() {");
    _builder.newLine();
    _builder.append("        ");
    final Function1<AboutSpecification, CharSequence> _function = (AboutSpecification o) -> {
      return this.generateAboutContext(o);
    };
    String _join = IterableExtensions.<AboutSpecification>join(this.gs.getAbout(), "", _function);
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("shadePanel.add(MyGithub_Label);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("MyGithub_Label.setBounds(10, 180, 400, 20);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("shadePanel.add(MyGithub);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("MyGithub.setBounds(10, 200, 400, 30);");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("setVisible(true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new About();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class InternetMonitor extends MouseAdapter{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void mouseClicked(MouseEvent e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel JLabel_temp = (JLabel)e.getSource();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String J_temp = JLabel_temp.getText();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(J_temp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("URI uri ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("uri = new URI(J_temp);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Desktop desk=Desktop.getDesktop();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(Desktop.isDesktopSupported() && desk.isSupported(Desktop.Action.BROWSE)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("desk.browse(uri);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IOException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (URISyntaxException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void mouseEntered(MouseEvent e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel JLabel_temp = (JLabel)e.getSource();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel_temp.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void mouseExited(MouseEvent e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel JLabel_temp = (JLabel)e.getSource();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel_temp.setForeground(Color.blue);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAboutContext(final AboutSpecification asf) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("setTitle(\"");
    String _aboutTitle = asf.getAboutTitle();
    _builder.append(_aboutTitle);
    _builder.append("\");//设置窗体标题");
    _builder.newLineIfNotEmpty();
    _builder.append("Image img=Toolkit.getDefaultToolkit().getImage(\"title.png\");//窗口图标");
    _builder.newLine();
    _builder.append("setIconImage(img);");
    _builder.newLine();
    _builder.append("setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);");
    _builder.newLine();
    _builder.append("setModal(true);//设置为模态窗口");
    _builder.newLine();
    _builder.append("setSize(");
    int _x = asf.getX();
    _builder.append(_x);
    _builder.append(",");
    int _y = asf.getY();
    _builder.append(_y);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("setResizable(false);");
    _builder.newLine();
    _builder.append("setLocationRelativeTo(null);");
    _builder.newLine();
    _builder.append("contentPane = new JPanel();// 创建内容面板");
    _builder.newLine();
    _builder.append("contentPane.setLayout(new BorderLayout(0, 0));");
    _builder.newLine();
    _builder.append("setContentPane(contentPane);");
    _builder.newLine();
    _builder.append("ShadePanel shadePanel = new ShadePanel();// 创建渐变背景面板");
    _builder.newLine();
    _builder.append("contentPane.add(shadePanel, BorderLayout.CENTER);// 添加面板到窗体内容面板");
    _builder.newLine();
    _builder.append("shadePanel.setLayout(null);");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.newLine();
    _builder.append("JTextArea J1 = new JTextArea(\"developer ：randy \\nlanguage：Java & xtend \\n\"");
    _builder.newLine();
    _builder.append("\t\t\t    \t\t\t");
    _builder.append("+ \"Email: di.lan@kcl.ac.uk\");");
    _builder.newLine();
    _builder.append("J1.setFocusable(false);");
    _builder.newLine();
    _builder.append("J1.setFont(f2);");
    _builder.newLine();
    _builder.append("J1.setEditable(false);");
    _builder.newLine();
    _builder.append("J1.setOpaque(false);//背景透明");
    _builder.newLine();
    _builder.append("shadePanel.add(J1);");
    _builder.newLine();
    _builder.append("J1.setBounds(10, 10, 400, 180);");
    _builder.newLine();
    _builder.append("icon = new ImageIcon(\"title.png\");");
    _builder.newLine();
    _builder.append("icon.setImage(icon.getImage().getScaledInstance(120,120,Image.SCALE_SMOOTH));//保持图片的清晰");
    _builder.newLine();
    _builder.append("label = new JLabel(icon);");
    _builder.newLine();
    _builder.append("shadePanel.add(label);");
    _builder.newLine();
    _builder.append("label.setBounds(270, 0, 130, 130);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.newLine();
    _builder.append("JPanel p = new JPanel();");
    _builder.newLine();
    _builder.append("p.setBounds(5, 130, 395, 1);");
    _builder.newLine();
    _builder.append("p.setBorder(BorderFactory.createLineBorder(Color.black));");
    _builder.newLine();
    _builder.append("shadePanel.add(p);");
    _builder.newLine();
    _builder.append("\t\t\t\t    ");
    _builder.newLine();
    _builder.append("JLabel J2 = new JLabel(\"welcome to my page:\");");
    _builder.newLine();
    _builder.append("J2.setBounds(10, 145, 200, 30);");
    _builder.newLine();
    _builder.append("J2.setFont(f2);");
    _builder.newLine();
    _builder.append("shadePanel.add(J2);");
    _builder.newLine();
    _builder.append("\t\t\t\t    ");
    _builder.newLine();
    _builder.append("JLabel MyGithub_Label = new JLabel(\"Github:\");");
    _builder.newLine();
    _builder.append("MyGithub_Label.setFont(f2);");
    _builder.newLine();
    _builder.append("final JLabel MyGithub = new JLabel(\"https://github.com/randy\");");
    _builder.newLine();
    _builder.append("MyGithub.setFont(f2);");
    _builder.newLine();
    _builder.append("MyGithub.setBackground(Color.white);");
    _builder.newLine();
    _builder.append("MyGithub.addMouseListener(new InternetMonitor());");
    _builder.newLine();
    return _builder;
  }
}
