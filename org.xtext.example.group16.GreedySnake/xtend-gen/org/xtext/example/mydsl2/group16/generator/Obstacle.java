package org.xtext.example.mydsl2.group16.generator;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl2.group16.greedySnake.IconTag;
import org.xtext.example.mydsl2.group16.greedySnake.InitialObstacleSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.ObstacleTime;

@SuppressWarnings("all")
public class Obstacle extends GeneralGenerator {
  public Obstacle(final ModelPreprocessor mpp) {
    super(mpp);
  }
  
  public void generate(final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateObstacleClassFileName = this.generateObstacleClassFileName();
    _builder.append(_generateObstacleClassFileName);
    fsa.generateFile(_builder.toString(), this.generateObstacle());
  }
  
  public CharSequence generateObstacle() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    CharSequence _generateGamePackage = this.generateGamePackage();
    _builder.append(_generateGamePackage);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.awt.Image;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.LinkedList;");
    _builder.newLine();
    _builder.append("import javax.swing.ImageIcon;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Obstacle {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MainWindow GameUI;//母窗体,即游戏主界面");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<Wall> obstacle = new LinkedList<Wall>();//整个界面上的障碍物，很多堵墙");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int wallAmount;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ImageIcon brickIcon;");
    _builder.newLine();
    _builder.append("\t");
    final Function1<InitialObstacleSpecificatin, CharSequence> _function = (InitialObstacleSpecificatin o) -> {
      return this.generateObstacleContext(o);
    };
    String _join = IterableExtensions.<InitialObstacleSpecificatin>join(this.gs.getObstacles(), "", _function);
    _builder.append(_join, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void show(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Iterator<Wall> iter = obstacle.iterator(); iter.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Wall _wall = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Iterator<Brick> iter2 = _wall.wall.iterator(); iter2.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Brick _brick = iter2.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("GameUI.add(_brick.label);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("_brick.label.setBounds(IndexToPixel.getXPixel(_brick.coor.x), ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("IndexToPixel.getYPixel(_brick.coor.y), 20, 20);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("_brick.label.setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void removeAll(){//移除界面上的所有砖块图片");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Iterator<Wall> iter = obstacle.iterator(); iter.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Wall _wall = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Iterator<Brick> iter2 = _wall.wall.iterator(); iter2.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Brick _brick = iter2.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("GameUI.setMap(_brick.coor.y, _brick.coor.x, 0);//地图上的该点重新标记为0");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("_brick.label.setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("GameUI.remove(_brick.label);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//modify");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("_brick.label = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void removeOne(Coordinate coor){//移除界面上的一张砖块图片");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Iterator<Wall> iter = obstacle.iterator(); iter.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Wall _wall = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Iterator<Brick> iter2 = _wall.wall.iterator(); iter2.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Brick _brick = iter2.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(_brick.coor.x == coor.x && _brick.coor.y == coor.y)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("_brick.label.setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("GameUI.remove(_brick.label);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void AutoMoveThread(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("run = new Thread() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (!quit) ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Thread.sleep(time);//15秒移动一次");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!GameUI.getPause() && GameUI.getIsrun())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("removeAll();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("produceBarrier();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Write2file.PrintMap(GameUI.getMap(),\"map.txt\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(quit)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("show();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Obstacle thread exit...\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("run.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Coordinate searchTarget(Coordinate here,Direction d){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Coordinate target = new Coordinate(0,0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(d == Direction.UP)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = here.y - 1;i >= 0;i--)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(GameUI.getMap()[i][here.x] == 3)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("target = new Coordinate(here.x,i);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("GameUI.setMap(i, here.x, 0);//重新标记为0");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return target;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("target = new Coordinate(here.x,-2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(d == Direction.DOWN)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = here.y + 1;i < GameUI.getAreaHeight();i++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(GameUI.getMap()[i][here.x] == 3)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("target = new Coordinate(here.x,i);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("GameUI.setMap(i, here.x, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return target;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("target = new Coordinate(here.x,GameUI.getAreaHeight() + 2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(d == Direction.LEFT)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = here.x - 1;i >= 0;i--)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(GameUI.getMap()[here.y][i] == 3)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("target = new Coordinate(i,here.y);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("GameUI.setMap(here.y, i, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return target;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("target = new Coordinate(-2,here.y);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(d == Direction.RIGHT)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = here.x + 1;i < GameUI.getAreaWidth();i++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(GameUI.getMap()[here.y][i] == 3)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("target = new Coordinate(i,here.y);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("GameUI.setMap(here.y, i, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return target;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("target = new Coordinate(GameUI.getAreaWidth() + 2,here.y);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return target;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//墙的数据结构，一堵墙有多块砖");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Wall {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Brick> wall;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Wall(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("wall = new LinkedList<Brick>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//砖块的数据结构");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Brick {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel label; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Coordinate coor;//坐标");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Brick(int x,int y,ImageIcon icon){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("coor = new Coordinate(x,y);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("label = new JLabel(icon);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Brick(Coordinate coor,ImageIcon icon){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.coor = coor;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("label = new JLabel(icon);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateObstacleContext(final InitialObstacleSpecificatin ios) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<IconTag> OIcon = new ArrayList<IconTag>();
      final String obstacleSize = ios.getMembers().getObstacle().getIconsize();
      int tag = 0;
      tag = ios.getMembers().getObstacle().getObstacleTag();
      final Consumer<IconTag> _function = (IconTag bi) -> {
        OIcon.add(bi);
      };
      ios.getMembers().getObstacle().getObstacleIcon().forEach(_function);
      final ArrayList<String> ObstacleIcon = new ArrayList<String>();
      final ArrayList<String> ObstacleLocate = new ArrayList<String>();
      final Consumer<IconTag> _function_1 = (IconTag i) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = i.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        ObstacleIcon.add(_plus_1);
      };
      OIcon.forEach(_function_1);
      final Consumer<IconTag> _function_2 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        ObstacleLocate.add(_plus_1);
      };
      OIcon.forEach(_function_2);
      final ArrayList<Integer> time = new ArrayList<Integer>();
      final Consumer<ObstacleTime> _function_3 = (ObstacleTime o) -> {
        time.add(Integer.valueOf(o.getObstacleTime()));
      };
      Iterables.<ObstacleTime>filter(this.gs.getTime(), ObstacleTime.class).forEach(_function_3);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private Thread run;");
      _builder.newLine();
      _builder.append("private int time = ");
      Integer _get = time.get(0);
      _builder.append(_get);
      _builder.append(";//20秒刷新一次");
      _builder.newLineIfNotEmpty();
      _builder.append("private boolean quit = false;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("public Obstacle(MainWindow GameUI){");
      _builder.newLine();
      _builder.append("this.GameUI = GameUI;");
      _builder.newLine();
      _builder.append("//加载砖块图片");
      _builder.newLine();
      _builder.append("brickIcon = new ImageIcon(");
      String _get_1 = ObstacleLocate.get(0);
      _builder.append(_get_1);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("brickIcon.setImage(brickIcon.getImage().getScaledInstance(");
      _builder.append(obstacleSize);
      _builder.append(",");
      _builder.append(obstacleSize);
      _builder.append(",Image.SCALE_SMOOTH));//保持图片的清晰");
      _builder.newLineIfNotEmpty();
      _builder.append("produceBarrier();");
      _builder.newLine();
      _builder.append("show();");
      _builder.newLine();
      _builder.append("AutoMoveThread();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("public void quit(){");
      _builder.newLine();
      _builder.append("quit = true;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("public boolean checkSafe(Coordinate coor,int tag,int length)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(tag == 0)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(int i = 0;i < length;i++)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(GameUI.getMap()[coor.x][coor.y + i] != 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else if(tag == 1)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(int i = 0;i < length;i++)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(GameUI.getMap()[coor.x + i][coor.y] != 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("public synchronized void produceBarrier(){");
      _builder.newLine();
      _builder.append("Random rand = new Random();");
      _builder.newLine();
      _builder.append("wallAmount = rand.nextInt(6) + 5;//随机产生[5,10]赌墙");
      _builder.newLine();
      _builder.append("int tag;\t//tag = 0表示墙的方向为横向，1表示墙的方向为纵向");
      _builder.newLine();
      _builder.append("int length; //每堵墙所包含的砖块数目，即每堵墙的长度");
      _builder.newLine();
      _builder.append("Coordinate coor,_coor;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("obstacle.clear();");
      _builder.newLine();
      _builder.append("for(int i = 0;i < wallAmount;i++)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Wall wall;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Brick brick;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("tag = rand.nextInt(2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("length = rand.nextInt(4) + 5;//墙的长度从5到8随机");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("coor = GameUI.produceRandomCoordinate();//注意coor.x是数组的行号，对应界面上的列方向的坐标序号");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(tag == 0)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("while(coor.y + length >= GameUI.getAreaWidth() || !checkSafe(coor,tag,length))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("/*横向排列时得保证最右边的那块砖不能跑到界面外边去");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("* 而且该堵墙的每块砖都是处于空闲位置");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("coor = GameUI.produceRandomCoordinate();//注意coor.x是数组的行号，对应界面上的列方向的坐标序号");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("wall = new Wall();");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("for(int j = 0;j < length;j++)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("_coor = new Coordinate(coor.y + j,coor.x);//注意要交换x和y中的次序");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//GameUI.P();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//GameUI.map[coor.x][coor.y + j] = ");
      _builder.append(tag, "\t\t");
      _builder.append(";//标记地图上的该点为障碍物");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("GameUI.setMap(coor.x, coor.y + j, ");
      _builder.append(tag, "\t\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("//GameUI.V();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("brick = new Brick(_coor,brickIcon);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("wall.wall.add(brick);//把该块砖添加到该堵墙中去");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("obstacle.add(wall);//把该堵墙添加到整个障碍物数组中去");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else if(tag == 1)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t     ");
      _builder.append("while(coor.x + length >= GameUI.getAreaHeight() || !checkSafe(coor,tag,length))");
      _builder.newLine();
      _builder.append("\t     ");
      _builder.append("/*纵向排列时得保证最下边的那块砖不能跑到界面外边去");
      _builder.newLine();
      _builder.append("\t     ");
      _builder.append("* 而且该堵墙的每块砖都是处于空闲位置");
      _builder.newLine();
      _builder.append("\t     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t      ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t       ");
      _builder.append("coor = GameUI.produceRandomCoordinate();//注意coor.x是数组的行号，对应界面上的列方向的坐标序号");
      _builder.newLine();
      _builder.append("\t      ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("wall = new Wall();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for(int j = 0;j < length;j++)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("_coor = new Coordinate(coor.y,coor.x + j);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//GameUI.P();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//GameUI.map[coor.x + j][coor.y] = 3;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GameUI.setMap(coor.x + j, coor.y, ");
      _builder.append(tag, "\t\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("//GameUI.V();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("brick = new Brick(_coor,brickIcon);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("wall.wall.add(brick);//add brick");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("obstacle.add(wall);//add whole wall");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("System.out.print(\"produce\" + wallAmount +\"brick\\t\\t\");");
      _builder.newLine();
      _builder.append("String Time = SysTime.getSysTime();");
      _builder.newLine();
      _builder.append("System.out.println(Time);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
