package org.xtext.example.mydsl2.group16.generator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.function.Consumer;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl2.group16.greedySnake.BackSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.BackgroundTag;
import org.xtext.example.mydsl2.group16.greedySnake.Default;
import org.xtext.example.mydsl2.group16.greedySnake.DirectionSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalFieldInitialisation;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalMap;
import org.xtext.example.mydsl2.group16.greedySnake.IconTag;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSpeedSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.SpeedGroup;
import org.xtext.example.mydsl2.group16.greedySnake.dis;

@SuppressWarnings("all")
public class MainWindowGenerator extends GeneralGenerator {
  public MainWindowGenerator(final ModelPreprocessor mpp) {
    super(mpp);
  }
  
  public void generate(final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateMainWindowClassFileName = this.generateMainWindowClassFileName();
    _builder.append(_generateMainWindowClassFileName);
    fsa.generateFile(_builder.toString(), this.generateMainWindow());
  }
  
  public CharSequence generateMainWindow() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    CharSequence _generateGamePackage = this.generateGamePackage();
    _builder.append(_generateGamePackage);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.awt.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.append("import java.util.Calendar;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("import ");
    CharSequence _generateSnakePackage = this.generateSnakePackage();
    _builder.append(_generateSnakePackage);
    _builder.append(".*;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    CharSequence _generateMainWindowClassName = this.generateMainWindowClassName();
    _builder.append(_generateMainWindowClassName);
    _builder.append(" extends JFrame{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = -1877974685325498861L;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Font f = new Font(\"Calibri\",Font.PLAIN,15);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Font f2 = new Font(\"Calibri\",Font.PLAIN,12);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JRadioButtonMenuItem speedItems[];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JRadioButtonMenuItem headItems[]; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JRadioButtonMenuItem bodyItems[];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ButtonGroup speedGroup;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ButtonGroup headGroup;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ButtonGroup bodyGroup;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ImageIcon backgroundImage;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JLabel background_label;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JPanel imagePanel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JPanel paintPanel;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JLabel label  = new JLabel(\"Length：\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JLabel label2 = new JLabel(\"Cost Time：\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JLabel label3 = new JLabel(\"Point：\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JLabel label4 = new JLabel(\"FoodNumber：\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JLabel label5 = new JLabel(\"RestBullet：\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JLabel FoodCoor = new JLabel(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JLabel NextStepCoor = new JLabel(\"\");");
    _builder.newLine();
    _builder.append("\t");
    final Function1<GlobalFieldInitialisation, CharSequence> _function = (GlobalFieldInitialisation fi) -> {
      return this.generateInitalJPanel(fi);
    };
    String _join = IterableExtensions.<GlobalFieldInitialisation>join(this.gs.getFields(), "", _function);
    _builder.append(_join, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Timer timer;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean pause = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isrun = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean IfSpeedUp = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean IfRemove = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PlayerSnake snake;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Foodset food;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Obstacle obstacle;");
    _builder.newLine();
    _builder.append("    ");
    final Function1<GlobalFieldInitialisation, CharSequence> _function_1 = (GlobalFieldInitialisation f) -> {
      return this.generateFieldInitialiseFor(f);
    };
    String _join_1 = IterableExtensions.<GlobalFieldInitialisation>join(this.gs.getFields(), "", _function_1);
    _builder.append(_join_1, "    ");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized int[][] getMap(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return map;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public synchronized void setMap(int i,int j,int e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("map[i][j] = e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getFoodCoorLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return FoodCoor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getNextStepCoorLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return NextStepCoor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getAILengthLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return AILength;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getLengthLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Length;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getScoreLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Score;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getTimeLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Time;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getAmountLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Amount;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JLabel getWeaponLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Weapon;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean getIsrun(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return isrun;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setIsrun(boolean tag){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("isrun = tag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean getPause(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pause;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setPause(boolean tag){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pause = tag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getAreaHeight(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return HEIGHT;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getAreaWidth(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return WIDTH;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void resetTimer(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("timer.reset();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void resetLabel(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FoodCoor.setText(\"\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NextStepCoor.setText(\"\");");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<GlobalFieldInitialisation, CharSequence> _function_2 = (GlobalFieldInitialisation o) -> {
      return this.resetDefault(o);
    };
    String _join_2 = IterableExtensions.<GlobalFieldInitialisation>join(this.gs.getFields(), "", _function_2);
    _builder.append(_join_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void restart(){//GameRestart");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("isrun = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("snake.quit();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("food.quit();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obstacle.quit();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Game Restarting......\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resetLabel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//initial map");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0;i < HEIGHT;i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int j = 0;j < WIDTH;j++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("setMap(i,j,0);\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("speedItems[2].setSelected(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("headItems[0].setSelected(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bodyItems[0].setSelected(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("food.removeAll();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("food = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("food = new Foodset(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obstacle.removeAll();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(obstacle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obstacle = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obstacle = new Obstacle(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("snake.goDie();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("snake = new PlayerSnake(this,food,obstacle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resetTimer();//reset time");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("isrun = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pause = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IfSpeedUp = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Coordinate produceRandomCoordinate(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Random rand = new Random();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Coordinate res;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int x = rand.nextInt(HEIGHT);//[0,20],row 21");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int y = rand.nextInt(WIDTH); //[0,39],column 40");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//P();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(getMap()[x][y] != 0 || x <= 5 || y <= 10)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("x = rand.nextInt(HEIGHT);//[0,20], row 21");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("y = rand.nextInt(WIDTH);//[0,39],column 40");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//V();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("res = new Coordinate(x,y);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return res;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0;i < HEIGHT;i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int j = 0;j < WIDTH;j++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("map[i][j] = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Game starting......\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("food = new Foodset(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obstacle = new Obstacle(this);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("snake = new PlayerSnake(this,food,obstacle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Write2file.PrintMap(getMap(),");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"");
    final Function1<GlobalMap, CharSequence> _function_3 = (GlobalMap m) -> {
      return m.getMap();
    };
    String _join_3 = IterableExtensions.<GlobalMap>join(this.gs.getMap(), "", _function_3);
    String _plus = (_builder_1.toString() + _join_3);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("\"");
    String _plus_1 = (_plus + _builder_2);
    _builder.append(_plus_1, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("timer = new Timer();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void InitialUI(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//--------------------------------UI-----------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String lookAndFeel = UIManager.getSystemLookAndFeelClassName();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UIManager.setLookAndFeel(lookAndFeel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ClassNotFoundException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InstantiationException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalAccessException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (UnsupportedLookAndFeelException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<BackSpecification, CharSequence> _function_4 = (BackSpecification bk) -> {
      return this.generateInitialBack(bk);
    };
    String _join_4 = IterableExtensions.<BackSpecification>join(this.gs.getBackgrounds(), "", _function_4);
    _builder.append(_join_4, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("paintPanel = new JPanel(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("//graph UI");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("public void paint(Graphics g1){");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("super.paint(g1);");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("Graphics2D g = (Graphics2D) g1;");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("g.setPaint(new GradientPaint(115,135,Color.CYAN,230,135,Color.MAGENTA,true));");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("g.setStroke( new BasicStroke(4,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("g.drawRect(3, 6, 887, 468);//+400");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("if(!IfRemove)");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("for(int i = 1;i < 40;i++)");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("g.setStroke( new BasicStroke(1f, BasicStroke.CAP_BUTT,");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("BasicStroke.JOIN_ROUND, 3.5f, new float[] { 15, 10, },");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("0f));");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("g.setColor(Color.black);");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("g.drawLine(5+i*22,9,5+i*22,472);");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("if(i <= 20)");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t\t\t\t\t");
    _builder.append("g.drawLine(4,10+i*22,887,10+i*22);");
    _builder.newLine();
    _builder.append("        \t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("paintPanel.setOpaque(false);");
    _builder.newLine();
    _builder.append("        ");
    final Function1<GlobalFieldInitialisation, CharSequence> _function_5 = (GlobalFieldInitialisation o) -> {
      return this.generateHeight_Width(o);
    };
    String _join_5 = IterableExtensions.<GlobalFieldInitialisation>join(this.gs.getFields(), "", _function_5);
    _builder.append(_join_5, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("add(paintPanel);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//layout");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(label);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label.setBounds(900, 10, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label.setFont(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(Length);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Length.setBounds(900, 35, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Length.setFont(f);");
    _builder.newLine();
    _builder.append("        \t    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(label2);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label2.setBounds(900, 90, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label2.setFont(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(Time);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Time.setBounds(900, 115, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Time.setFont(f);");
    _builder.newLine();
    _builder.append("        \t    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(label3);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label3.setBounds(900, 170, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label3.setFont(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(Score);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Score.setBounds(900, 195, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Score.setFont(f);");
    _builder.newLine();
    _builder.append("        \t    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(label4);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label4.setBounds(900, 250, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label4.setFont(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(Amount);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Amount.setBounds(900, 275, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Amount.setFont(f);");
    _builder.newLine();
    _builder.append("        \t    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(label5);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label5.setBounds(900, 330, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("label5.setFont(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("add(Weapon);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Weapon.setBounds(900, 355, 250, 30);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Weapon.setFont(f);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("label.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("label2.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("label3.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("label4.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("label5.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("FoodCoor.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("NextStepCoor.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("AILength.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Length.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Score.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Time.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Amount.setForeground(Color.white);    ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Weapon.setForeground(Color.white);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JMenuBar bar = new JMenuBar();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bar.setBackground(Color.white);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("setJMenuBar(bar);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("JMenu Settings = new JMenu(\"set\");");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("Settings.setFont(f);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("JMenu Help = new JMenu(\"help\");");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("Help.setFont(f);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("JMenu About = new JMenu(\"about\");");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("About.setFont(f);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("bar.add(Settings);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("bar.add(Help);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("bar.add(About);\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("JMenuItem set_background = new JMenuItem(\"setting background\");");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("set_background.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenu set_head = new JMenu(\"change snakeHead\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set_head.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenu set_body = new JMenu(\"change snakeBody\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set_body.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenu set_speed= new JMenu(\"change speed\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set_speed.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenuItem remove_net= new JMenuItem(\"remove gridding \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("remove_net.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Settings.add(set_background);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Settings.add(set_head);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Settings.add(set_body);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Settings.add(set_speed);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Settings.add(remove_net);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenuItem help = new JMenuItem(\"Guide...\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("help.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Help.add(help);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JMenuItem about = new JMenuItem(\"About...\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("about.setFont(f2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("About.add(about);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setFocusable(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setVisible(true);");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//---------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.addKeyListener(new MyKeyListener());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("remove_net.addActionListener(new ActionListener(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("public void actionPerformed(ActionEvent e){");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("if(!IfRemove)");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("IfRemove = true;");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("remove_net.setText(\"show Gridding\");");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("paintPanel.repaint();");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("IfRemove = false;");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("remove_net.setText(\"remove Gridding\");");
    _builder.newLine();
    _builder.append("        \t\t\t");
    _builder.append("paintPanel.repaint();");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//modify");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<InitialSpeedSpecification, CharSequence> _function_6 = (InitialSpeedSpecification o) -> {
      return this.generateSpeed(o);
    };
    String _join_6 = IterableExtensions.<InitialSpeedSpecification>join(this.gs.getSpeed(), "", _function_6);
    _builder.append(_join_6, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function_7 = (InitialSnakeSpecificatin o) -> {
      return this.generateHeadIcon(o);
    };
    String _join_7 = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_7);
    _builder.append(_join_7, "\t\t");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<InitialSnakeSpecificatin, CharSequence> _function_8 = (InitialSnakeSpecificatin sn) -> {
      return this.generateBodyIcon(sn);
    };
    String _join_8 = IterableExtensions.<InitialSnakeSpecificatin>join(this.gs.getSnakes(), "", _function_8);
    _builder.append(_join_8, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set_background.addActionListener(new ActionListener(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("public void actionPerformed(ActionEvent e){");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("new AlterBacground();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("about.addActionListener(new ActionListener(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("public void actionPerformed(ActionEvent e){");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("new About();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("help.addActionListener(new ActionListener(){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("public void actionPerformed(ActionEvent e){");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("new Help();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//main function");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MainWindow game = new MainWindow();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("game.InitialUI();//initial field");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("game.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private class Timer extends Thread{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private int hour = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private int min = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private int sec = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Timer(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.start();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void reset()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("hour = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("min = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sec = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(isrun){");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("sec +=1 ;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if(sec >= 60){");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("sec = 0;");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("min +=1 ;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if(min>=60){");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("min=0;");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("hour+=1;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("showTime();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("Thread.sleep(1000);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t             ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private void showTime(){");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("String strTime =\"\" ;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(hour < 10)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime = \"0\"+hour+\":\";");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime = \"\"+hour+\":\";");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(min < 10)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime = strTime+\"0\"+min+\":\";");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime =strTime+ \"\"+min+\":\";");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(sec < 10)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime = strTime+\"0\"+sec;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("strTime = strTime+\"\"+sec;");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Time.setText(strTime);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private class MyKeyListener implements KeyListener{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Calendar Cld;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private int MI,MI3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private int SS,SS3;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    final Function1<DirectionSpecification, CharSequence> _function_9 = (DirectionSpecification di) -> {
      return this.generateKeyPress(di);
    };
    String _join_9 = IterableExtensions.<DirectionSpecification>join(this.gs.getDirections(), "", _function_9);
    _builder.append(_join_9, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if(e.isShiftDown())");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("if(snake.getBulletNum() > 0)");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("System.out.println(\"Fire a bullet\");");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("Direction d = snake.getDirection();");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("Coordinate coor = snake.getHeadCoor();");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("Coordinate target = obstacle.searchTarget(coor, d);");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("System.out.println(\"Target is:\" + target.x + \",\" +target.y);");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("snake.fire(coor,target,d);");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if(key == KeyEvent.VK_LEFT || key == KeyEvent.VK_RIGHT || key == KeyEvent.VK_UP || key == KeyEvent.VK_DOWN ||");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("key == KeyEvent.VK_A || key == KeyEvent.VK_D || key == KeyEvent.VK_W || key == KeyEvent.VK_S)");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("if(!IfSpeedUp)    \t        ");
    _builder.newLine();
    _builder.append("\t    \t        ");
    _builder.append("IfSpeedUp = true;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("Cld = Calendar.getInstance();");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("SS3 = Cld.get(Calendar.SECOND);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("MI3 = Cld.get(Calendar.MILLISECOND); ");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("int x = SS3 * 1000 + MI3 - ( SS * 1000 + MI);");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("if(x > 500)");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t        \t");
    _builder.append("snake.setSpeed(100);");
    _builder.newLine();
    _builder.append("    \t        \t");
    _builder.append("//System.out.println(\"Long Pressed\");");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void keyReleased(KeyEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int key = e.getKeyCode();");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if( key == KeyEvent.VK_LEFT || key == KeyEvent.VK_RIGHT || key == KeyEvent.VK_UP || key == KeyEvent.VK_DOWN ||");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("key == KeyEvent.VK_A || key == KeyEvent.VK_D || key == KeyEvent.VK_W || key == KeyEvent.VK_S)");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("IfSpeedUp = false;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("snake.resetSpeed();");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void keyTyped(KeyEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private class AlterBacground extends JDialog{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t     ");
    final Function1<BackSpecification, CharSequence> _function_10 = (BackSpecification back) -> {
      return this.generateBackground(back);
    };
    String _join_10 = IterableExtensions.<BackSpecification>join(this.gs.getBackgrounds(), "", _function_10);
    _builder.append(_join_10, "\t\t     ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialBack(final BackSpecification bks) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> backIconLocate = new ArrayList<String>();
      final Consumer<BackgroundTag> _function = (BackgroundTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        backIconLocate.add(_plus_1);
      };
      bks.getBackgroundIcon().getBackgroundTag().forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Image img = Toolkit.getDefaultToolkit().getImage(\"image//title.png\");");
      _builder.newLine();
      _builder.append("setIconImage(img);");
      _builder.newLine();
      _builder.append("setTitle(\"");
      String _name = this.gs.getName();
      _builder.append(_name);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
      _builder.newLine();
      _builder.append("setSize(");
      int _backGroundWidth = bks.getBackGroundWidth();
      _builder.append(_backGroundWidth);
      _builder.append(",");
      int _backGroundHeight = bks.getBackGroundHeight();
      _builder.append(_backGroundHeight);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("setResizable(false);");
      _builder.newLine();
      _builder.append("setLayout(null);");
      _builder.newLine();
      _builder.append("setLocationRelativeTo(null);");
      _builder.newLine();
      _builder.append("\t\t\t\t    ");
      _builder.newLine();
      _builder.append("backgroundImage = new ImageIcon(");
      String _get = backIconLocate.get(5);
      _builder.append(_get);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("backgroundImage.setImage(backgroundImage.getImage().getScaledInstance(");
      int _backGroundWidth_1 = bks.getBackGroundWidth();
      _builder.append(_backGroundWidth_1);
      _builder.append(",");
      int _backGroundHeight_1 = bks.getBackGroundHeight();
      _builder.append(_backGroundHeight_1);
      _builder.append(",Image.SCALE_SMOOTH));");
      _builder.newLineIfNotEmpty();
      _builder.append("background_label = new JLabel(backgroundImage);  ");
      _builder.newLine();
      _builder.append("background_label.setBounds(0,0, this.getWidth(), this.getHeight());   ");
      _builder.newLine();
      _builder.append("this.getLayeredPane().add(background_label, new Integer(Integer.MIN_VALUE));");
      _builder.newLine();
      _builder.append("\t\t\t        ");
      _builder.newLine();
      _builder.append("imagePanel = (JPanel) this.getContentPane();  ");
      _builder.newLine();
      _builder.append("imagePanel.setOpaque(false);");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateKeyPress(final DirectionSpecification ds) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> Dire = new ArrayList<String>();
      final Consumer<dis> _function = (dis o) -> {
        Dire.add(o.getDirection().getName());
      };
      ds.getDi().forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("public void keyPressed(KeyEvent e) {");
      _builder.newLine();
      _builder.append("int key = e.getKeyCode();");
      _builder.newLine();
      _builder.append("Direction direction = snake.getDirection();");
      _builder.newLine();
      _builder.append("if(key == KeyEvent.VK_RIGHT || key == KeyEvent.VK_D)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(isrun && direction != Direction.");
      String _get = Dire.get(2);
      _builder.append(_get, "\t");
      _builder.append(") //left");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("snake.setDirection(Direction.");
      String _get_1 = Dire.get(3);
      _builder.append(_get_1, "\t\t");
      _builder.append("); //right");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(key == KeyEvent.VK_LEFT || key == KeyEvent.VK_A)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(isrun && direction != Direction.");
      String _get_2 = Dire.get(3);
      _builder.append(_get_2, "\t");
      _builder.append(")//right");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("snake.setDirection(Direction.");
      String _get_3 = Dire.get(2);
      _builder.append(_get_3, "\t\t");
      _builder.append(");//left");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(key == KeyEvent.VK_UP || key == KeyEvent.VK_W)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(isrun && direction != Direction.");
      String _get_4 = Dire.get(1);
      _builder.append(_get_4, "\t");
      _builder.append(") //down");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("snake.setDirection(Direction.");
      String _get_5 = Dire.get(0);
      _builder.append(_get_5, "\t\t");
      _builder.append("); //up ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(key == KeyEvent.VK_DOWN || key == KeyEvent.VK_S)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(isrun && direction != Direction.");
      String _get_6 = Dire.get(0);
      _builder.append(_get_6, "\t");
      _builder.append(") //up");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("snake.setDirection(Direction.");
      String _get_7 = Dire.get(1);
      _builder.append(_get_7, "\t\t");
      _builder.append("); //down");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(key == KeyEvent.VK_ESCAPE)//restart");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("restart();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("else if(key == KeyEvent.VK_SPACE)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(!pause)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pause = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("isrun = false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"pause...\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pause = false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("isrun = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"start...\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateSpeed(final InitialSpeedSpecification iss) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<Integer> speed = new ArrayList<Integer>();
      final Consumer<SpeedGroup> _function = (SpeedGroup o) -> {
        speed.add(Integer.valueOf(o.getValue()));
      };
      iss.getSpeedGroup().forEach(_function);
      final ArrayList<String> speedName = new ArrayList<String>();
      final Consumer<SpeedGroup> _function_1 = (SpeedGroup o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _name = o.getName();
        String _plus = (_builder.toString() + _name);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        speedName.add(_plus_1);
      };
      iss.getSpeedGroup().forEach(_function_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("String speed[] = {");
      String _join = IterableExtensions.join(speedName, ",");
      _builder.append(_join);
      _builder.append("};");
      _builder.newLineIfNotEmpty();
      _builder.append("speedItems = new JRadioButtonMenuItem[");
      int _length = ((Object[])Conversions.unwrapArray(speedName, Object.class)).length;
      _builder.append(_length);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("speedGroup = new ButtonGroup();");
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_1 = ((Object[])Conversions.unwrapArray(speedName, Object.class)).length;
      _builder.append(_length_1);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("speedItems[i] = new JRadioButtonMenuItem(speed[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("speedItems[i].setFont(f2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("set_speed.add(speedItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("speedGroup.add(speedItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("speedItems[i].addActionListener(");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("new ActionListener(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public void actionPerformed(ActionEvent e){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for(int i = 0;i < ");
      int _length_2 = ((Object[])Conversions.unwrapArray(speedName, Object.class)).length;
      _builder.append(_length_2, "\t\t\t");
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(speedItems[i].isSelected())");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(i == 0)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("snake.setDefaultSpeed(600);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("snake.resetSpeed();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      {
        int _length_3 = ((Object[])Conversions.unwrapArray(speedName, Object.class)).length;
        int _minus = (_length_3 - 1);
        IntegerRange _upTo = new IntegerRange(1, _minus);
        for(final Integer idx : _upTo) {
          _builder.append("\t\t\t\t     ");
          _builder.append("else if(i == ");
          _builder.append(idx, "\t\t\t\t     ");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t\t     ");
          _builder.append("{");
          _builder.newLine();
          _builder.append("\t\t\t\t     ");
          _builder.append("snake.setDefaultSpeed(");
          Integer _get = speed.get((idx).intValue());
          _builder.append(_get, "\t\t\t\t     ");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t\t     ");
          _builder.append("snake.resetSpeed();");
          _builder.newLine();
          _builder.append("\t\t\t\t     ");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t   ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("speedItems[2].setSelected(true);");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateHeight_Width(final GlobalFieldInitialisation gfi) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("paintPanel.setBounds(0, 0, ");
    int _panelWidth = gfi.getPanelWidth();
    _builder.append(_panelWidth);
    _builder.append(", ");
    int _panelHeight = gfi.getPanelHeight();
    _builder.append(_panelHeight);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateBodyIcon(final InitialSnakeSpecificatin f) {
    CharSequence _xblockexpression = null;
    {
      final Iterator<IconTag> hellp_body = f.getMembers().getSna().getHeadIcon().iterator();
      final ArrayList<IconTag> hello_body = new ArrayList<IconTag>();
      final ArrayList<String> bodyIcon = new ArrayList<String>();
      final ArrayList<Integer> bodyTag = new ArrayList<Integer>();
      final Consumer<IconTag> _function = (IconTag bi) -> {
        hello_body.add(bi);
      };
      f.getMembers().getSna().getBodyIcon().forEach(_function);
      final Consumer<IconTag> _function_1 = (IconTag hb) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = hb.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        bodyIcon.add(_plus_1);
      };
      hello_body.forEach(_function_1);
      final ArrayList<String> locateBody = new ArrayList<String>();
      final Consumer<IconTag> _function_2 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        locateBody.add(_plus_1);
      };
      hello_body.forEach(_function_2);
      final Consumer<IconTag> _function_3 = (IconTag o) -> {
        bodyTag.add(Integer.valueOf(o.getTag()));
      };
      hello_body.forEach(_function_3);
      final String Bodysize = f.getMembers().getSna().getIconsize();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("String body[] = {");
      String _join = IterableExtensions.join(bodyIcon, ",");
      _builder.append(_join);
      _builder.append("};");
      _builder.newLineIfNotEmpty();
      _builder.append("bodyItems = new JRadioButtonMenuItem[");
      int _length = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("bodyGroup = new ButtonGroup();");
      _builder.newLine();
      _builder.append("ImageIcon bodyIcon[] = new ImageIcon[");
      int _length_1 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length_1);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      {
        int _length_2 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
        int _minus = (_length_2 - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          _builder.append("bodyIcon[");
          _builder.append(idx);
          _builder.append("] = new ImageIcon(");
          String _get = locateBody.get((idx).intValue());
          _builder.append(_get);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _length_3 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
        int _minus_1 = (_length_3 - 1);
        IntegerRange _upTo_1 = new IntegerRange(0, _minus_1);
        for(final Integer idx_1 : _upTo_1) {
          _builder.append("//size");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("bodyIcon[");
          _builder.append(idx_1, "\t\t");
          _builder.append("].setImage(bodyIcon[");
          _builder.append(idx_1, "\t\t");
          _builder.append("].getImage().getScaledInstance(16,16,Image.SCALE_SMOOTH));");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("//modify");
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_4 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length_4);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bodyItems[i] = new JRadioButtonMenuItem(body[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bodyItems[i].setFont(f2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bodyItems[i].setIcon(bodyIcon[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("set_body.add(bodyItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bodyGroup.add(bodyItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bodyItems[i].addActionListener(");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("new ActionListener(){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public void actionPerformed(ActionEvent e){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for(int i = 0;i < ");
      int _length_5 = ((Object[])Conversions.unwrapArray(bodyIcon, Object.class)).length;
      _builder.append(_length_5, "\t\t\t\t");
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(bodyItems[i].isSelected())");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("snake.setBodyIcon(i);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("bodyItems[");
      Integer _get_1 = bodyTag.get(0);
      _builder.append(_get_1);
      _builder.append("].setSelected(true);");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence resetDefault(final GlobalFieldInitialisation o) {
    CharSequence _xblockexpression = null;
    {
      final Default defa = o.getField_initialisation().getDefault();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Length.setText(\"");
      String _length = defa.getLength();
      _builder.append(_length);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("Score.setText(\"");
      String _score = defa.getScore();
      _builder.append(_score);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("Time.setText(\"");
      String _time = defa.getTime();
      _builder.append(_time);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("Amount.setText(\"");
      String _amount = defa.getAmount();
      _builder.append(_amount);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("Weapon.setText(\"");
      String _weapon = defa.getWeapon();
      _builder.append(_weapon);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateInitalJPanel(final GlobalFieldInitialisation fi) {
    CharSequence _xblockexpression = null;
    {
      final Default label = fi.getField_initialisation().getDefault();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private JLabel AILength = new JLabel(\"1\");");
      _builder.newLine();
      _builder.append("private JLabel Length = new JLabel(\"");
      String _length = label.getLength();
      _builder.append(_length);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("private JLabel Score = new JLabel(\"");
      String _score = label.getScore();
      _builder.append(_score);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("private JLabel Time = new JLabel(\"");
      String _time = label.getTime();
      _builder.append(_time);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("private JLabel Amount = new JLabel(\"");
      String _amount = label.getAmount();
      _builder.append(_amount);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("private JLabel Weapon = new JLabel(\"");
      String _weapon = label.getWeapon();
      _builder.append(_weapon);
      _builder.append("\");\t\t\t\t\t\t\t\t\t\t\t ");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateHeadIcon(final InitialSnakeSpecificatin f) {
    CharSequence _xblockexpression = null;
    {
      final Iterator<IconTag> hellp = f.getMembers().getSna().getHeadIcon().iterator();
      final ArrayList<IconTag> hello = new ArrayList<IconTag>();
      final Consumer<IconTag> _function = (IconTag p) -> {
        hello.add(hellp.next());
      };
      f.getMembers().getSna().getHeadIcon().forEach(_function);
      final ArrayList<String> HeadIcon = new ArrayList<String>();
      final ArrayList<Integer> HeadTag = new ArrayList<Integer>();
      final Consumer<IconTag> _function_1 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = o.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        HeadIcon.add(_plus_1);
      };
      hello.forEach(_function_1);
      final int len = ((Object[])Conversions.unwrapArray(HeadIcon, Object.class)).length;
      final ArrayList<String> locate = new ArrayList<String>();
      final Consumer<IconTag> _function_2 = (IconTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        locate.add(_plus_1);
      };
      hello.forEach(_function_2);
      final Consumer<IconTag> _function_3 = (IconTag o) -> {
        HeadTag.add(Integer.valueOf(o.getTag()));
      };
      hello.forEach(_function_3);
      final String size = f.getMembers().getSna().getIconsize();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("String head[] = {");
      String _join = IterableExtensions.join(HeadIcon, ",");
      _builder.append(_join);
      _builder.append("};");
      _builder.newLineIfNotEmpty();
      _builder.append("headItems = new JRadioButtonMenuItem[");
      _builder.append(len);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("headGroup = new ButtonGroup();");
      _builder.newLine();
      _builder.append("ImageIcon headIcon[] = new ImageIcon[");
      _builder.append(len);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      {
        int _length = ((Object[])Conversions.unwrapArray(HeadIcon, Object.class)).length;
        int _minus = (_length - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          _builder.append("headIcon[");
          _builder.append(idx);
          _builder.append("] = new ImageIcon(");
          String _get = locate.get((idx).intValue());
          _builder.append(_get);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _length_1 = ((Object[])Conversions.unwrapArray(HeadIcon, Object.class)).length;
        int _minus_1 = (_length_1 - 1);
        IntegerRange _upTo_1 = new IntegerRange(0, _minus_1);
        for(final Integer idx_1 : _upTo_1) {
          _builder.append("headIcon[");
          _builder.append(idx_1);
          _builder.append("].setImage(headIcon[");
          _builder.append(idx_1);
          _builder.append("].getImage().getScaledInstance(16,16,Image.SCALE_SMOOTH));");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("//modify");
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_2 = ((Object[])Conversions.unwrapArray(HeadIcon, Object.class)).length;
      _builder.append(_length_2);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("headItems[i] = new JRadioButtonMenuItem(head[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("headItems[i].setFont(f2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("headItems[i].setIcon(headIcon[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("set_head.add(headItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("headGroup.add(headItems[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("headItems[i].addActionListener(");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("new ActionListener(){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public void actionPerformed(ActionEvent e){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for(int i = 0;i < ");
      int _length_3 = ((Object[])Conversions.unwrapArray(HeadIcon, Object.class)).length;
      _builder.append(_length_3, "\t\t\t\t");
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t   ");
      _builder.append("if(headItems[i].isSelected())");
      _builder.newLine();
      _builder.append("\t\t\t\t   ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("snake.setHeadIcon(i);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t     ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t     ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("headItems[");
      Integer _get_1 = HeadTag.get(0);
      _builder.append(_get_1);
      _builder.append("].setSelected(true);");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateFieldInitialiseFor(final GlobalFieldInitialisation f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private static final int HEIGHT = ");
    int _height = f.getHeight();
    _builder.append(_height);
    _builder.append(";\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("private static final int WIDTH = ");
    int _width = f.getWidth();
    _builder.append(_width);
    _builder.append(";\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("private int[][] map = new int[HEIGHT][WIDTH];\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//0 presents empty,1 present snake ,2 present the food ,3 present the obstacle");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBackground(final BackSpecification bsf) {
    CharSequence _xblockexpression = null;
    {
      final ArrayList<String> backIcon = new ArrayList<String>();
      final Consumer<BackgroundTag> _function = (BackgroundTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = o.getValue();
        String _plus = (_builder.toString() + _value);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        backIcon.add(_plus_1);
      };
      bsf.getBackgroundIcon().getBackgroundTag().forEach(_function);
      final ArrayList<String> backIconLocate = new ArrayList<String>();
      final Consumer<BackgroundTag> _function_1 = (BackgroundTag o) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _locate = o.getLocate();
        String _plus = (_builder.toString() + _locate);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        String _plus_1 = (_plus + _builder_1);
        backIconLocate.add(_plus_1);
      };
      bsf.getBackgroundIcon().getBackgroundTag().forEach(_function_1);
      final ArrayList<Integer> backGoundTag = new ArrayList<Integer>();
      final Consumer<BackgroundTag> _function_2 = (BackgroundTag o) -> {
        backGoundTag.add(Integer.valueOf(o.getBKtag()));
      };
      bsf.getBackgroundIcon().getBackgroundTag().forEach(_function_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private static final long serialVersionUID = -990903376750998765L;");
      _builder.newLine();
      _builder.append("private final int back_kind = ");
      int _length = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("private Font f = new Font(\"微软雅黑\",Font.PLAIN,15);");
      _builder.newLine();
      _builder.append("private JPanel p = new JPanel();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public AlterBacground(){");
      _builder.newLine();
      _builder.append("setTitle(\"Changing background\");");
      _builder.newLine();
      _builder.append("Image img=Toolkit.getDefaultToolkit().getImage(\"title.png\");");
      _builder.newLine();
      _builder.append("setIconImage(img);");
      _builder.newLine();
      _builder.append("setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);");
      _builder.newLine();
      _builder.append("setModal(true);");
      _builder.newLine();
      _builder.append("setSize(650,390);");
      _builder.newLine();
      _builder.append("setResizable(false);");
      _builder.newLine();
      _builder.append("setLocationRelativeTo(null);");
      _builder.newLine();
      _builder.append("//backGround");
      _builder.newLine();
      _builder.append("ImageIcon background[] = new ImageIcon[");
      int _length_1 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length_1);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      {
        int _length_2 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
        int _minus = (_length_2 - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          _builder.append("background[");
          _builder.append(idx);
          _builder.append("] = new ImageIcon(");
          String _get = backIconLocate.get((idx).intValue());
          _builder.append(_get);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("//background set");
      _builder.newLine();
      {
        int _length_3 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
        int _minus_1 = (_length_3 - 1);
        IntegerRange _upTo_1 = new IntegerRange(0, _minus_1);
        for(final Integer idx_1 : _upTo_1) {
          _builder.append("background[");
          _builder.append(idx_1);
          _builder.append("].setImage(background[");
          _builder.append(idx_1);
          _builder.append("].getImage().getScaledInstance(200,110,Image.SCALE_FAST));");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("JLabel Back_label[] = new JLabel[");
      int _length_4 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length_4);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("JButton choose[] = new JButton[");
      int _length_5 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length_5);
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("for(int i = 0;i < ");
      int _length_6 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length_6);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[i] = new JLabel(background[i],SwingConstants.LEFT);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[i].setFont(f);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[i].setHorizontalTextPosition(SwingConstants.CENTER);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[i].setVerticalTextPosition(SwingConstants.BOTTOM);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[i] = new JButton(\"choose\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[i].setFont(f);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p.add(choose[i]);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p.add(Back_label[i]);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("add(p,BorderLayout.CENTER);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p.setBackground(Color.white);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p.setLayout(null);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[0].setBounds(10, 0, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[0].setBounds(70, 140, 80, 25);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[1].setBounds(220, 0, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[1].setBounds(280, 140, 80, 25);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[2].setBounds(430, 0, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[2].setBounds(490, 140, 80, 25);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[3].setBounds(10, 180, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[3].setBounds(70, 320, 80, 25);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[4].setBounds(220, 180, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[4].setBounds(280, 320, 80, 25);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Back_label[5].setBounds(430, 180, 200, 120);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("choose[5].setBounds(490, 320, 80, 25);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//AlterBackground");
      _builder.newLine();
      _builder.append("for(int i = 0;i < ");
      int _length_7 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
      _builder.append(_length_7);
      _builder.append(";i++)");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choose[i].addActionListener(new ActionListener(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public void actionPerformed(ActionEvent e){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(e.getSource() == choose[");
      Integer _get_1 = backGoundTag.get(0);
      _builder.append(_get_1, "\t\t");
      _builder.append("])");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("background[0] = new ImageIcon(");
      String _get_2 = backIconLocate.get(0);
      _builder.append(_get_2, "\t\t\t\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("background[0].setImage(background[0].getImage().getScaledInstance(");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      int _backGroundWidth = bsf.getBackGroundWidth();
      _builder.append(_backGroundWidth, "\t\t\t\t");
      _builder.append(",");
      int _backGroundHeight = bsf.getBackGroundHeight();
      _builder.append(_backGroundHeight, "\t\t\t\t");
      _builder.append(",Image.SCALE_SMOOTH));");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("background_label.setIcon(background[0]);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      {
        int _length_8 = ((Object[])Conversions.unwrapArray(backIcon, Object.class)).length;
        int _minus_2 = (_length_8 - 1);
        IntegerRange _upTo_2 = new IntegerRange(1, _minus_2);
        for(final Integer idx_2 : _upTo_2) {
          _builder.append("\t\t\t");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("\t");
          _builder.append("else if(e.getSource() == choose[");
          Integer _get_3 = backGoundTag.get((idx_2).intValue());
          _builder.append(_get_3, "\t\t\t\t");
          _builder.append("])");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("\t");
          _builder.append("{");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("\t  ");
          _builder.append("background[1] = new ImageIcon(");
          String _get_4 = backIconLocate.get((idx_2).intValue());
          _builder.append(_get_4, "\t\t\t\t  ");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("\t  ");
          _builder.append("background[1].setImage(background[1].getImage().getScaledInstance(");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("\t  ");
          int _backGroundWidth_1 = bsf.getBackGroundWidth();
          _builder.append(_backGroundWidth_1, "\t\t\t\t  ");
          _builder.append(",");
          int _backGroundHeight_1 = bsf.getBackGroundHeight();
          _builder.append(_backGroundHeight_1, "\t\t\t\t  ");
          _builder.append(",Image.SCALE_SMOOTH));");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          _builder.append("\t  ");
          _builder.append("background_label.setIcon(background[1]);");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.newLine();
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
