/*
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GreedySnakeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GreedySnakeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.GreedySnake");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSnakesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSnakesInitialSnakeSpecificatinParserRuleCall_3_0_0 = (RuleCall)cSnakesAssignment_3_0.eContents().get(0);
		private final Assignment cFoodsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFoodsInitialFoodSpecificatinParserRuleCall_3_1_0 = (RuleCall)cFoodsAssignment_3_1.eContents().get(0);
		private final Assignment cObstaclesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cObstaclesInitialObstacleSpecificatinParserRuleCall_3_2_0 = (RuleCall)cObstaclesAssignment_3_2.eContents().get(0);
		private final Assignment cSpeedAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cSpeedInitialSpeedSpecificationParserRuleCall_3_3_0 = (RuleCall)cSpeedAssignment_3_3.eContents().get(0);
		private final Assignment cFireAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cFireInitialFireSpecificationParserRuleCall_3_4_0 = (RuleCall)cFireAssignment_3_4.eContents().get(0);
		private final Assignment cTimeAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cTimeTimeLimitedParserRuleCall_3_5_0 = (RuleCall)cTimeAssignment_3_5.eContents().get(0);
		private final Assignment cMapAssignment_3_6 = (Assignment)cAlternatives_3.eContents().get(6);
		private final RuleCall cMapGlobalMapParserRuleCall_3_6_0 = (RuleCall)cMapAssignment_3_6.eContents().get(0);
		private final Assignment cAboutAssignment_3_7 = (Assignment)cAlternatives_3.eContents().get(7);
		private final RuleCall cAboutAboutSpecificationParserRuleCall_3_7_0 = (RuleCall)cAboutAssignment_3_7.eContents().get(0);
		private final Assignment cHelpAssignment_3_8 = (Assignment)cAlternatives_3.eContents().get(8);
		private final RuleCall cHelpHelpSpecificationParserRuleCall_3_8_0 = (RuleCall)cHelpAssignment_3_8.eContents().get(0);
		private final Assignment cMusicAssignment_3_9 = (Assignment)cAlternatives_3.eContents().get(9);
		private final RuleCall cMusicMusicSpecificationParserRuleCall_3_9_0 = (RuleCall)cMusicAssignment_3_9.eContents().get(0);
		private final Assignment cBackgroundsAssignment_3_10 = (Assignment)cAlternatives_3.eContents().get(10);
		private final RuleCall cBackgroundsBackSpecificationParserRuleCall_3_10_0 = (RuleCall)cBackgroundsAssignment_3_10.eContents().get(0);
		private final Assignment cFieldsAssignment_3_11 = (Assignment)cAlternatives_3.eContents().get(11);
		private final RuleCall cFieldsGlobalFieldInitialisationParserRuleCall_3_11_0 = (RuleCall)cFieldsAssignment_3_11.eContents().get(0);
		private final Assignment cOptionsAssignment_3_12 = (Assignment)cAlternatives_3.eContents().get(12);
		private final RuleCall cOptionsOptionSpecificationParserRuleCall_3_12_0 = (RuleCall)cOptionsAssignment_3_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////xtext里面显示的应该都是静态的东西，比如图像，长宽什么的，都是固定的
		//GreedySnake:
		//	// 需要增加help/about/background/music/SnakeSpeed/map
		//	"game" name=ID "{" (snakes+=InitialSnakeSpecificatin | foods+=InitialFoodSpecificatin |
		//	obstacles+=InitialObstacleSpecificatin | speed+=InitialSpeedSpecification | fire+=InitialFireSpecification |
		//	time+=TimeLimited | Map+=GlobalMap | about+=AboutSpecification | Help+=HelpSpecification | Music+=MusicSpecification
		//	| Backgrounds+=BackSpecification | fields+=GlobalFieldInitialisation | options+=OptionSpecification)+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//// 需要增加help/about/background/music/SnakeSpeed/map
		//"game" name=ID "{" (snakes+=InitialSnakeSpecificatin | foods+=InitialFoodSpecificatin |
		//obstacles+=InitialObstacleSpecificatin | speed+=InitialSpeedSpecification | fire+=InitialFireSpecification |
		//time+=TimeLimited | Map+=GlobalMap | about+=AboutSpecification | Help+=HelpSpecification | Music+=MusicSpecification |
		//Backgrounds+=BackSpecification | fields+=GlobalFieldInitialisation | options+=OptionSpecification)+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//// 需要增加help/about/background/music/SnakeSpeed/map
		//"game"
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(snakes+=InitialSnakeSpecificatin | foods+=InitialFoodSpecificatin | obstacles+=InitialObstacleSpecificatin |
		//speed+=InitialSpeedSpecification | fire+=InitialFireSpecification | time+=TimeLimited | Map+=GlobalMap |
		//about+=AboutSpecification | Help+=HelpSpecification | Music+=MusicSpecification | Backgrounds+=BackSpecification |
		//fields+=GlobalFieldInitialisation | options+=OptionSpecification)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//snakes+=InitialSnakeSpecificatin
		public Assignment getSnakesAssignment_3_0() { return cSnakesAssignment_3_0; }
		
		//InitialSnakeSpecificatin
		public RuleCall getSnakesInitialSnakeSpecificatinParserRuleCall_3_0_0() { return cSnakesInitialSnakeSpecificatinParserRuleCall_3_0_0; }
		
		//foods+=InitialFoodSpecificatin
		public Assignment getFoodsAssignment_3_1() { return cFoodsAssignment_3_1; }
		
		//InitialFoodSpecificatin
		public RuleCall getFoodsInitialFoodSpecificatinParserRuleCall_3_1_0() { return cFoodsInitialFoodSpecificatinParserRuleCall_3_1_0; }
		
		//obstacles+=InitialObstacleSpecificatin
		public Assignment getObstaclesAssignment_3_2() { return cObstaclesAssignment_3_2; }
		
		//InitialObstacleSpecificatin
		public RuleCall getObstaclesInitialObstacleSpecificatinParserRuleCall_3_2_0() { return cObstaclesInitialObstacleSpecificatinParserRuleCall_3_2_0; }
		
		//speed+=InitialSpeedSpecification
		public Assignment getSpeedAssignment_3_3() { return cSpeedAssignment_3_3; }
		
		//InitialSpeedSpecification
		public RuleCall getSpeedInitialSpeedSpecificationParserRuleCall_3_3_0() { return cSpeedInitialSpeedSpecificationParserRuleCall_3_3_0; }
		
		//fire+=InitialFireSpecification
		public Assignment getFireAssignment_3_4() { return cFireAssignment_3_4; }
		
		//InitialFireSpecification
		public RuleCall getFireInitialFireSpecificationParserRuleCall_3_4_0() { return cFireInitialFireSpecificationParserRuleCall_3_4_0; }
		
		//time+=TimeLimited
		public Assignment getTimeAssignment_3_5() { return cTimeAssignment_3_5; }
		
		//TimeLimited
		public RuleCall getTimeTimeLimitedParserRuleCall_3_5_0() { return cTimeTimeLimitedParserRuleCall_3_5_0; }
		
		//Map+=GlobalMap
		public Assignment getMapAssignment_3_6() { return cMapAssignment_3_6; }
		
		//GlobalMap
		public RuleCall getMapGlobalMapParserRuleCall_3_6_0() { return cMapGlobalMapParserRuleCall_3_6_0; }
		
		//about+=AboutSpecification
		public Assignment getAboutAssignment_3_7() { return cAboutAssignment_3_7; }
		
		//AboutSpecification
		public RuleCall getAboutAboutSpecificationParserRuleCall_3_7_0() { return cAboutAboutSpecificationParserRuleCall_3_7_0; }
		
		//Help+=HelpSpecification
		public Assignment getHelpAssignment_3_8() { return cHelpAssignment_3_8; }
		
		//HelpSpecification
		public RuleCall getHelpHelpSpecificationParserRuleCall_3_8_0() { return cHelpHelpSpecificationParserRuleCall_3_8_0; }
		
		//Music+=MusicSpecification
		public Assignment getMusicAssignment_3_9() { return cMusicAssignment_3_9; }
		
		//MusicSpecification
		public RuleCall getMusicMusicSpecificationParserRuleCall_3_9_0() { return cMusicMusicSpecificationParserRuleCall_3_9_0; }
		
		//Backgrounds+=BackSpecification
		public Assignment getBackgroundsAssignment_3_10() { return cBackgroundsAssignment_3_10; }
		
		//BackSpecification
		public RuleCall getBackgroundsBackSpecificationParserRuleCall_3_10_0() { return cBackgroundsBackSpecificationParserRuleCall_3_10_0; }
		
		//fields+=GlobalFieldInitialisation
		public Assignment getFieldsAssignment_3_11() { return cFieldsAssignment_3_11; }
		
		//GlobalFieldInitialisation
		public RuleCall getFieldsGlobalFieldInitialisationParserRuleCall_3_11_0() { return cFieldsGlobalFieldInitialisationParserRuleCall_3_11_0; }
		
		//options+=OptionSpecification
		public Assignment getOptionsAssignment_3_12() { return cOptionsAssignment_3_12; }
		
		//OptionSpecification
		public RuleCall getOptionsOptionSpecificationParserRuleCall_3_12_0() { return cOptionsOptionSpecificationParserRuleCall_3_12_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GlobalMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.GlobalMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilepathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapSTRINGTerminalRuleCall_2_0 = (RuleCall)cMapAssignment_2.eContents().get(0);
		
		////map的filePath
		//GlobalMap:
		//	"Filepath" "=" map=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Filepath" "=" map=STRING
		public Group getGroup() { return cGroup; }
		
		//"Filepath"
		public Keyword getFilepathKeyword_0() { return cFilepathKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//map=STRING
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }
		
		//STRING
		public RuleCall getMapSTRINGTerminalRuleCall_2_0() { return cMapSTRINGTerminalRuleCall_2_0; }
	}
	public class GlobalFieldInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.GlobalFieldInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPanel_widthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPanelWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPanelWidthINTTerminalRuleCall_5_0 = (RuleCall)cPanelWidthAssignment_5.eContents().get(0);
		private final Keyword cPanel_HeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPanelHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPanelHeightINTTerminalRuleCall_8_0 = (RuleCall)cPanelHeightAssignment_8.eContents().get(0);
		private final Keyword cColumnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWidthAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWidthINTTerminalRuleCall_11_0 = (RuleCall)cWidthAssignment_11.eContents().get(0);
		private final Keyword cRowKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cHeightAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cHeightINTTerminalRuleCall_14_0 = (RuleCall)cHeightAssignment_14.eContents().get(0);
		private final Keyword cLabel_widthKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cEqualsSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cLabelWidthAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cLabelWidthINTTerminalRuleCall_17_0 = (RuleCall)cLabelWidthAssignment_17.eContents().get(0);
		private final Keyword cLabel_HeightKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cLabelHeightAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cLabelHeightINTTerminalRuleCall_20_0 = (RuleCall)cLabelHeightAssignment_20.eContents().get(0);
		private final Assignment cField_initialisationAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cField_initialisationInitialFieldParserRuleCall_21_0 = (RuleCall)cField_initialisationAssignment_21.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		////初始界面---随机障碍，食物
		////因为没有设计简单/困难模式 所以就只有一个field
		//GlobalFieldInitialisation:
		//	"field" name=ID "{"
		//	// 画布的宽
		//	"Panel_width" "=" panelWidth=INT // 900
		//	// 画布的长
		//	"Panel_Height" "=" panelHeight=INT // 480
		//	"column" "=" width=INT // 40
		//	"row" "=" height=INT // 21
		//	"label_width" "=" labelWidth=INT // 1000
		//	"label_Height" "=" labelHeight=INT // 540
		//	field_initialisation=InitialField
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"field" name=ID "{"
		//// 画布的宽
		//"Panel_width" "=" panelWidth=INT // 900
		//// 画布的长
		//"Panel_Height" "=" panelHeight=INT // 480
		//"column" "=" width=INT // 40
		//"row" "=" height=INT // 21
		//"label_width" "=" labelWidth=INT // 1000
		//"label_Height" "=" labelHeight=INT // 540
		//field_initialisation=InitialField
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//// 画布的宽
		//"Panel_width"
		public Keyword getPanel_widthKeyword_3() { return cPanel_widthKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//panelWidth=INT
		public Assignment getPanelWidthAssignment_5() { return cPanelWidthAssignment_5; }
		
		//INT
		public RuleCall getPanelWidthINTTerminalRuleCall_5_0() { return cPanelWidthINTTerminalRuleCall_5_0; }
		
		//// 900
		//// 画布的长
		//"Panel_Height"
		public Keyword getPanel_HeightKeyword_6() { return cPanel_HeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//panelHeight=INT
		public Assignment getPanelHeightAssignment_8() { return cPanelHeightAssignment_8; }
		
		//INT
		public RuleCall getPanelHeightINTTerminalRuleCall_8_0() { return cPanelHeightINTTerminalRuleCall_8_0; }
		
		//// 480
		//"column"
		public Keyword getColumnKeyword_9() { return cColumnKeyword_9; }
		
		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//width=INT
		public Assignment getWidthAssignment_11() { return cWidthAssignment_11; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_11_0() { return cWidthINTTerminalRuleCall_11_0; }
		
		//// 40
		//"row"
		public Keyword getRowKeyword_12() { return cRowKeyword_12; }
		
		//"="
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//height=INT
		public Assignment getHeightAssignment_14() { return cHeightAssignment_14; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_14_0() { return cHeightINTTerminalRuleCall_14_0; }
		
		//// 21
		//"label_width"
		public Keyword getLabel_widthKeyword_15() { return cLabel_widthKeyword_15; }
		
		//"="
		public Keyword getEqualsSignKeyword_16() { return cEqualsSignKeyword_16; }
		
		//labelWidth=INT
		public Assignment getLabelWidthAssignment_17() { return cLabelWidthAssignment_17; }
		
		//INT
		public RuleCall getLabelWidthINTTerminalRuleCall_17_0() { return cLabelWidthINTTerminalRuleCall_17_0; }
		
		//// 1000
		//"label_Height"
		public Keyword getLabel_HeightKeyword_18() { return cLabel_HeightKeyword_18; }
		
		//"="
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }
		
		//labelHeight=INT
		public Assignment getLabelHeightAssignment_20() { return cLabelHeightAssignment_20; }
		
		//INT
		public RuleCall getLabelHeightINTTerminalRuleCall_20_0() { return cLabelHeightINTTerminalRuleCall_20_0; }
		
		//// 540
		//field_initialisation=InitialField
		public Assignment getField_initialisationAssignment_21() { return cField_initialisationAssignment_21; }
		
		//InitialField
		public RuleCall getField_initialisationInitialFieldParserRuleCall_21_0() { return cField_initialisationInitialFieldParserRuleCall_21_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}
	public class InitialFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDefaultKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefaultAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefaultDefaultParserRuleCall_7_0 = (RuleCall)cDefaultAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////FieldInitailisation:
		////	ref = initFieldReference | init = InitialField
		////;
		////
		////initFieldReference:
		////	"init" fieldRef=[InitialField] "(" ")"
		////;
		////关键字default
		//InitialField:
		//	"init" name=ID "(" ")" "{"
		//	"Default" ":" Default=Default
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"init" name=ID "(" ")" "{"
		//"Default" ":" Default=Default
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//"Default"
		public Keyword getDefaultKeyword_5() { return cDefaultKeyword_5; }
		
		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//Default=Default
		public Assignment getDefaultAssignment_7() { return cDefaultAssignment_7; }
		
		//Default
		public RuleCall getDefaultDefaultParserRuleCall_7_0() { return cDefaultDefaultParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSnakeLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthSTRINGTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cScoreKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScoreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScoreSTRINGTerminalRuleCall_5_0 = (RuleCall)cScoreAssignment_5.eContents().get(0);
		private final Keyword cTimeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTimeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTimeSTRINGTerminalRuleCall_8_0 = (RuleCall)cTimeAssignment_8.eContents().get(0);
		private final Keyword cAmountKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAmountAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAmountSTRINGTerminalRuleCall_11_0 = (RuleCall)cAmountAssignment_11.eContents().get(0);
		private final Keyword cWeaponKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cWeaponAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cWeaponSTRINGTerminalRuleCall_14_0 = (RuleCall)cWeaponAssignment_14.eContents().get(0);
		
		//Default:
		//	"snakeLength" "=" length=STRING // "1" 
		//	"Score" "=" score=STRING // ""
		//	"Time" "=" time=STRING // ""
		//	"Amount" "=" amount=STRING // "0"
		//	"Weapon" "=" weapon=STRING // "20"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"snakeLength" "=" length=STRING // "1" 
		//"Score" "=" score=STRING // ""
		//"Time" "=" time=STRING // ""
		//"Amount" "=" amount=STRING // "0"
		//"Weapon" "=" weapon=STRING
		public Group getGroup() { return cGroup; }
		
		//"snakeLength"
		public Keyword getSnakeLengthKeyword_0() { return cSnakeLengthKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//length=STRING
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//STRING
		public RuleCall getLengthSTRINGTerminalRuleCall_2_0() { return cLengthSTRINGTerminalRuleCall_2_0; }
		
		//// "1" 
		//"Score"
		public Keyword getScoreKeyword_3() { return cScoreKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//score=STRING
		public Assignment getScoreAssignment_5() { return cScoreAssignment_5; }
		
		//STRING
		public RuleCall getScoreSTRINGTerminalRuleCall_5_0() { return cScoreSTRINGTerminalRuleCall_5_0; }
		
		//// ""
		//"Time"
		public Keyword getTimeKeyword_6() { return cTimeKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//time=STRING
		public Assignment getTimeAssignment_8() { return cTimeAssignment_8; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_8_0() { return cTimeSTRINGTerminalRuleCall_8_0; }
		
		//// ""
		//"Amount"
		public Keyword getAmountKeyword_9() { return cAmountKeyword_9; }
		
		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//amount=STRING
		public Assignment getAmountAssignment_11() { return cAmountAssignment_11; }
		
		//STRING
		public RuleCall getAmountSTRINGTerminalRuleCall_11_0() { return cAmountSTRINGTerminalRuleCall_11_0; }
		
		//// "0"
		//"Weapon"
		public Keyword getWeaponKeyword_12() { return cWeaponKeyword_12; }
		
		//"="
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//weapon=STRING
		public Assignment getWeaponAssignment_14() { return cWeaponAssignment_14; }
		
		//STRING
		public RuleCall getWeaponSTRINGTerminalRuleCall_14_0() { return cWeaponSTRINGTerminalRuleCall_14_0; }
	}
	public class InitialSnakeSpecificatinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialSnakeSpecificatin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSnakeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersSnakeMembersParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultiplesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMultiplesInitialSnakeSpecificatinCrossReference_5_0 = (CrossReference)cMultiplesAssignment_5.eContents().get(0);
		private final RuleCall cMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1 = (RuleCall)cMultiplesInitialSnakeSpecificatinCrossReference_5_0.eContents().get(1);
		
		//InitialSnakeSpecificatin:
		//	// headIcon 4个， bodyIcon 4个， 身体节点为1， Icon大小为20(height/width)， default speed 为300
		//	"snake" name=ID "{"
		//	members=SnakeMembers
		//	"}" Multiples+=[InitialSnakeSpecificatin]?;
		@Override public ParserRule getRule() { return rule; }
		
		//// headIcon 4个， bodyIcon 4个， 身体节点为1， Icon大小为20(height/width)， default speed 为300
		//"snake" name=ID "{"
		//members=SnakeMembers
		//"}" Multiples+=[InitialSnakeSpecificatin]?
		public Group getGroup() { return cGroup; }
		
		//// headIcon 4个， bodyIcon 4个， 身体节点为1， Icon大小为20(height/width)， default speed 为300
		//"snake"
		public Keyword getSnakeKeyword_0() { return cSnakeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members=SnakeMembers
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//SnakeMembers
		public RuleCall getMembersSnakeMembersParserRuleCall_3_0() { return cMembersSnakeMembersParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//Multiples+=[InitialSnakeSpecificatin]?
		public Assignment getMultiplesAssignment_5() { return cMultiplesAssignment_5; }
		
		//[InitialSnakeSpecificatin]
		public CrossReference getMultiplesInitialSnakeSpecificatinCrossReference_5_0() { return cMultiplesInitialSnakeSpecificatinCrossReference_5_0; }
		
		//ID
		public RuleCall getMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1() { return cMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1; }
	}
	public class InitialFoodSpecificatinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialFoodSpecificatin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFoodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersFoodMembersParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultiplesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMultiplesInitialFoodSpecificatinCrossReference_5_0 = (CrossReference)cMultiplesAssignment_5.eContents().get(0);
		private final RuleCall cMultiplesInitialFoodSpecificatinIDTerminalRuleCall_5_0_1 = (RuleCall)cMultiplesInitialFoodSpecificatinCrossReference_5_0.eContents().get(1);
		
		//InitialFoodSpecificatin:
		//	"food" name=ID "{"
		//	members=FoodMembers
		//	"}" Multiples+=[InitialFoodSpecificatin]?;
		@Override public ParserRule getRule() { return rule; }
		
		//"food" name=ID "{"
		//members=FoodMembers
		//"}" Multiples+=[InitialFoodSpecificatin]?
		public Group getGroup() { return cGroup; }
		
		//"food"
		public Keyword getFoodKeyword_0() { return cFoodKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members=FoodMembers
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//FoodMembers
		public RuleCall getMembersFoodMembersParserRuleCall_3_0() { return cMembersFoodMembersParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//Multiples+=[InitialFoodSpecificatin]?
		public Assignment getMultiplesAssignment_5() { return cMultiplesAssignment_5; }
		
		//[InitialFoodSpecificatin]
		public CrossReference getMultiplesInitialFoodSpecificatinCrossReference_5_0() { return cMultiplesInitialFoodSpecificatinCrossReference_5_0; }
		
		//ID
		public RuleCall getMultiplesInitialFoodSpecificatinIDTerminalRuleCall_5_0_1() { return cMultiplesInitialFoodSpecificatinIDTerminalRuleCall_5_0_1; }
	}
	public class InitialObstacleSpecificatinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialObstacleSpecificatin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObstacleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersObstacleMembersParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultiplesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMultiplesInitialObstacleSpecificatinCrossReference_5_0 = (CrossReference)cMultiplesAssignment_5.eContents().get(0);
		private final RuleCall cMultiplesInitialObstacleSpecificatinIDTerminalRuleCall_5_0_1 = (RuleCall)cMultiplesInitialObstacleSpecificatinCrossReference_5_0.eContents().get(1);
		
		//InitialObstacleSpecificatin:
		//	"obstacle" name=ID "{"
		//	members=ObstacleMembers
		//	"}" Multiples+=[InitialObstacleSpecificatin]?;
		@Override public ParserRule getRule() { return rule; }
		
		//"obstacle" name=ID "{"
		//members=ObstacleMembers
		//"}" Multiples+=[InitialObstacleSpecificatin]?
		public Group getGroup() { return cGroup; }
		
		//"obstacle"
		public Keyword getObstacleKeyword_0() { return cObstacleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members=ObstacleMembers
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//ObstacleMembers
		public RuleCall getMembersObstacleMembersParserRuleCall_3_0() { return cMembersObstacleMembersParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//Multiples+=[InitialObstacleSpecificatin]?
		public Assignment getMultiplesAssignment_5() { return cMultiplesAssignment_5; }
		
		//[InitialObstacleSpecificatin]
		public CrossReference getMultiplesInitialObstacleSpecificatinCrossReference_5_0() { return cMultiplesInitialObstacleSpecificatinCrossReference_5_0; }
		
		//ID
		public RuleCall getMultiplesInitialObstacleSpecificatinIDTerminalRuleCall_5_0_1() { return cMultiplesInitialObstacleSpecificatinIDTerminalRuleCall_5_0_1; }
	}
	public class InitialFireSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialFireSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersFireMembersParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultiplesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMultiplesInitialSnakeSpecificatinCrossReference_5_0 = (CrossReference)cMultiplesAssignment_5.eContents().get(0);
		private final RuleCall cMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1 = (RuleCall)cMultiplesInitialSnakeSpecificatinCrossReference_5_0.eContents().get(1);
		
		//InitialFireSpecification:
		//	"fire" name=ID "{"
		//	members=FireMembers
		//	"}" Multiples+=[InitialSnakeSpecificatin]?;
		@Override public ParserRule getRule() { return rule; }
		
		//"fire" name=ID "{"
		//members=FireMembers
		//"}" Multiples+=[InitialSnakeSpecificatin]?
		public Group getGroup() { return cGroup; }
		
		//"fire"
		public Keyword getFireKeyword_0() { return cFireKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members=FireMembers
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//FireMembers
		public RuleCall getMembersFireMembersParserRuleCall_3_0() { return cMembersFireMembersParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//Multiples+=[InitialSnakeSpecificatin]?
		public Assignment getMultiplesAssignment_5() { return cMultiplesAssignment_5; }
		
		//[InitialSnakeSpecificatin]
		public CrossReference getMultiplesInitialSnakeSpecificatinCrossReference_5_0() { return cMultiplesInitialSnakeSpecificatinCrossReference_5_0; }
		
		//ID
		public RuleCall getMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1() { return cMultiplesInitialSnakeSpecificatinIDTerminalRuleCall_5_0_1; }
	}
	public class InitialSpeedSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.InitialSpeedSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialSpeedSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedGroupAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedGroupSpeedGroupParserRuleCall_3_0 = (RuleCall)cSpeedGroupAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InitialSpeedSpecification:
		//	{InitialSpeedSpecification} "Speed" "{"
		//	speedGroup+=SpeedGroup*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialSpeedSpecification} "Speed" "{"
		//speedGroup+=SpeedGroup*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//{InitialSpeedSpecification}
		public Action getInitialSpeedSpecificationAction_0() { return cInitialSpeedSpecificationAction_0; }
		
		//"Speed"
		public Keyword getSpeedKeyword_1() { return cSpeedKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//speedGroup+=SpeedGroup*
		public Assignment getSpeedGroupAssignment_3() { return cSpeedGroupAssignment_3; }
		
		//SpeedGroup
		public RuleCall getSpeedGroupSpeedGroupParserRuleCall_3_0() { return cSpeedGroupSpeedGroupParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SpeedGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.SpeedGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////example: run = 200
		//SpeedGroup:
		//	name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class FireMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FireMembers");
		private final Assignment cFireAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFireFireInitDisplayParserRuleCall_0 = (RuleCall)cFireAssignment.eContents().get(0);
		
		//FireMembers:
		//	fire=FireInitDisplay;
		@Override public ParserRule getRule() { return rule; }
		
		//fire=FireInitDisplay
		public Assignment getFireAssignment() { return cFireAssignment; }
		
		//FireInitDisplay
		public RuleCall getFireFireInitDisplayParserRuleCall_0() { return cFireFireInitDisplayParserRuleCall_0; }
	}
	public class SnakeMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.SnakeMembers");
		private final Assignment cSnaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSnaSnakeInitDisplayParserRuleCall_0 = (RuleCall)cSnaAssignment.eContents().get(0);
		
		//SnakeMembers:
		//	sna=SnakeInitDisplay;
		@Override public ParserRule getRule() { return rule; }
		
		//sna=SnakeInitDisplay
		public Assignment getSnaAssignment() { return cSnaAssignment; }
		
		//SnakeInitDisplay
		public RuleCall getSnaSnakeInitDisplayParserRuleCall_0() { return cSnaSnakeInitDisplayParserRuleCall_0; }
	}
	public class FoodMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FoodMembers");
		private final Assignment cFoodAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFoodFoodInitDisplayParserRuleCall_0 = (RuleCall)cFoodAssignment.eContents().get(0);
		
		//FoodMembers:
		//	food=FoodInitDisplay;
		@Override public ParserRule getRule() { return rule; }
		
		//food=FoodInitDisplay
		public Assignment getFoodAssignment() { return cFoodAssignment; }
		
		//FoodInitDisplay
		public RuleCall getFoodFoodInitDisplayParserRuleCall_0() { return cFoodFoodInitDisplayParserRuleCall_0; }
	}
	public class ObstacleMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.ObstacleMembers");
		private final Assignment cObstacleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObstacleObstacleInitDisplayParserRuleCall_0 = (RuleCall)cObstacleAssignment.eContents().get(0);
		
		//ObstacleMembers:
		//	obstacle=ObstacleInitDisplay;
		@Override public ParserRule getRule() { return rule; }
		
		//obstacle=ObstacleInitDisplay
		public Assignment getObstacleAssignment() { return cObstacleAssignment; }
		
		//ObstacleInitDisplay
		public RuleCall getObstacleObstacleInitDisplayParserRuleCall_0() { return cObstacleObstacleInitDisplayParserRuleCall_0; }
	}
	public class FireInitDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FireInitDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireIconKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFireIconAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFireIconIconTagParserRuleCall_2_0 = (RuleCall)cFireIconAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIcon_sizeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIconsizeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIconsizeIconSizeParserRuleCall_6_0 = (RuleCall)cIconsizeAssignment_6.eContents().get(0);
		
		////Members:
		////	sna += SnakeInitDisplay |
		////	FoodInitDisplay |
		////	ObstacleInitDisplay |
		////	AllItemDisplaySpec |
		////	AllItemVarSpec|
		////	AllItemStateSpec
		////;
		//FireInitDisplay:
		//	"FireIcon" "{" FireIcon+=IconTag* "}"
		//	"Icon_size" "=" Iconsize=IconSize // 20
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"FireIcon" "{" FireIcon+=IconTag* "}"
		//"Icon_size" "=" Iconsize=IconSize
		public Group getGroup() { return cGroup; }
		
		//"FireIcon"
		public Keyword getFireIconKeyword_0() { return cFireIconKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//FireIcon+=IconTag*
		public Assignment getFireIconAssignment_2() { return cFireIconAssignment_2; }
		
		//IconTag
		public RuleCall getFireIconIconTagParserRuleCall_2_0() { return cFireIconIconTagParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"Icon_size"
		public Keyword getIcon_sizeKeyword_4() { return cIcon_sizeKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Iconsize=IconSize
		public Assignment getIconsizeAssignment_6() { return cIconsizeAssignment_6; }
		
		//IconSize
		public RuleCall getIconsizeIconSizeParserRuleCall_6_0() { return cIconsizeIconSizeParserRuleCall_6_0; }
	}
	public class SnakeInitDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.SnakeInitDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHeadAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cHeadLeftParenthesisKeyword_2_0 = (Keyword)cHeadAssignment_2.eContents().get(0);
		private final Assignment cInitial_xAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitial_xINTTerminalRuleCall_3_0 = (RuleCall)cInitial_xAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitial_yAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitial_yINTTerminalRuleCall_5_0 = (RuleCall)cInitial_yAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHeadIconKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cHeadIconAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHeadIconIconTagParserRuleCall_9_0 = (RuleCall)cHeadIconAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cIcon_sizeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cIconsizeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cIconsizeIconSizeParserRuleCall_13_0 = (RuleCall)cIconsizeAssignment_13.eContents().get(0);
		private final Keyword cBodyIconKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cBodyIconAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cBodyIconIconTagParserRuleCall_16_0 = (RuleCall)cBodyIconAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cDefaultSpeedKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cDefaultSpeedAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cDefaultSpeedINTTerminalRuleCall_20_0 = (RuleCall)cDefaultSpeedAssignment_20.eContents().get(0);
		private final Keyword cSnakeTagKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cEqualsSignKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Assignment cSnakeTagAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cSnakeTagINTTerminalRuleCall_23_0 = (RuleCall)cSnakeTagAssignment_23.eContents().get(0);
		
		////头部位置,头部设计的Icon和身体的位置与Icon
		//SnakeInitDisplay:
		//	"head" "=" head="(" initial_x=INT "," initial_y=INT ")" // (0,0)
		//	"headIcon" "{" headIcon+=IconTag* "}"
		//	"Icon_size" "=" Iconsize=IconSize // 20
		//	"BodyIcon" "{" BodyIcon+=IconTag* "}"
		////	"headIcon" headIcon = AllItemVarSpec "=" locate=STRING
		//	"defaultSpeed" "=" defaultSpeed=INT // 需要改
		//	"snakeTag" "=" snakeTag=INT // 1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"head" "=" head="(" initial_x=INT "," initial_y=INT ")" // (0,0)
		//"headIcon" "{" headIcon+=IconTag* "}"
		//"Icon_size" "=" Iconsize=IconSize // 20
		//"BodyIcon" "{" BodyIcon+=IconTag* "}"
		////	"headIcon" headIcon = AllItemVarSpec "=" locate=STRING
		//"defaultSpeed" "=" defaultSpeed=INT // 需要改
		//"snakeTag" "=" snakeTag=INT
		public Group getGroup() { return cGroup; }
		
		//"head"
		public Keyword getHeadKeyword_0() { return cHeadKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//head="("
		public Assignment getHeadAssignment_2() { return cHeadAssignment_2; }
		
		//"("
		public Keyword getHeadLeftParenthesisKeyword_2_0() { return cHeadLeftParenthesisKeyword_2_0; }
		
		//initial_x=INT
		public Assignment getInitial_xAssignment_3() { return cInitial_xAssignment_3; }
		
		//INT
		public RuleCall getInitial_xINTTerminalRuleCall_3_0() { return cInitial_xINTTerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//initial_y=INT
		public Assignment getInitial_yAssignment_5() { return cInitial_yAssignment_5; }
		
		//INT
		public RuleCall getInitial_yINTTerminalRuleCall_5_0() { return cInitial_yINTTerminalRuleCall_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//// (0,0)
		//"headIcon"
		public Keyword getHeadIconKeyword_7() { return cHeadIconKeyword_7; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//headIcon+=IconTag*
		public Assignment getHeadIconAssignment_9() { return cHeadIconAssignment_9; }
		
		//IconTag
		public RuleCall getHeadIconIconTagParserRuleCall_9_0() { return cHeadIconIconTagParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//"Icon_size"
		public Keyword getIcon_sizeKeyword_11() { return cIcon_sizeKeyword_11; }
		
		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//Iconsize=IconSize
		public Assignment getIconsizeAssignment_13() { return cIconsizeAssignment_13; }
		
		//IconSize
		public RuleCall getIconsizeIconSizeParserRuleCall_13_0() { return cIconsizeIconSizeParserRuleCall_13_0; }
		
		//// 20
		//"BodyIcon"
		public Keyword getBodyIconKeyword_14() { return cBodyIconKeyword_14; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }
		
		//BodyIcon+=IconTag*
		public Assignment getBodyIconAssignment_16() { return cBodyIconAssignment_16; }
		
		//IconTag
		public RuleCall getBodyIconIconTagParserRuleCall_16_0() { return cBodyIconIconTagParserRuleCall_16_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		////	"headIcon" headIcon = AllItemVarSpec "=" locate=STRING
		//"defaultSpeed"
		public Keyword getDefaultSpeedKeyword_18() { return cDefaultSpeedKeyword_18; }
		
		//"="
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }
		
		//defaultSpeed=INT
		public Assignment getDefaultSpeedAssignment_20() { return cDefaultSpeedAssignment_20; }
		
		//INT
		public RuleCall getDefaultSpeedINTTerminalRuleCall_20_0() { return cDefaultSpeedINTTerminalRuleCall_20_0; }
		
		//// 需要改
		//"snakeTag"
		public Keyword getSnakeTagKeyword_21() { return cSnakeTagKeyword_21; }
		
		//"="
		public Keyword getEqualsSignKeyword_22() { return cEqualsSignKeyword_22; }
		
		//snakeTag=INT
		public Assignment getSnakeTagAssignment_23() { return cSnakeTagAssignment_23; }
		
		//INT
		public RuleCall getSnakeTagINTTerminalRuleCall_23_0() { return cSnakeTagINTTerminalRuleCall_23_0; }
	}
	public class IconElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Icon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIconAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIconTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIconTagIconTagParserRuleCall_1_0 = (RuleCall)cIconTagAssignment_1.eContents().get(0);
		
		////定义头部image的一些东西--4个tag,分别0,1,2,3
		//Icon:
		//	{Icon} IconTag+=IconTag*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Icon} IconTag+=IconTag*
		public Group getGroup() { return cGroup; }
		
		//{Icon}
		public Action getIconAction_0() { return cIconAction_0; }
		
		//IconTag+=IconTag*
		public Assignment getIconTagAssignment_1() { return cIconTagAssignment_1; }
		
		//IconTag
		public RuleCall getIconTagIconTagParserRuleCall_1_0() { return cIconTagIconTagParserRuleCall_1_0; }
	}
	public class IconSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.IconSize");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IconSize:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class IconTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.IconTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTagINTTerminalRuleCall_3_0 = (RuleCall)cTagAssignment_3.eContents().get(0);
		private final Keyword cLocateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLocateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocateSTRINGTerminalRuleCall_6_0 = (RuleCall)cLocateAssignment_6.eContents().get(0);
		
		////example: tag1 "xixi" = 1
		//IconTag:
		//	name=ID value=STRING "=" tag=INT
		//	"Locate" ":" Locate=STRING // 图像地址
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=STRING "=" tag=INT
		//"Locate" ":" Locate=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//tag=INT
		public Assignment getTagAssignment_3() { return cTagAssignment_3; }
		
		//INT
		public RuleCall getTagINTTerminalRuleCall_3_0() { return cTagINTTerminalRuleCall_3_0; }
		
		//"Locate"
		public Keyword getLocateKeyword_4() { return cLocateKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//Locate=STRING
		public Assignment getLocateAssignment_6() { return cLocateAssignment_6; }
		
		//STRING
		public RuleCall getLocateSTRINGTerminalRuleCall_6_0() { return cLocateSTRINGTerminalRuleCall_6_0; }
	}
	public class FoodInitDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FoodInitDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFoodIconKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFoodIconAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFoodIconIconTagParserRuleCall_2_0 = (RuleCall)cFoodIconAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIcon_sizeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIconsizeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIconsizeIconSizeParserRuleCall_6_0 = (RuleCall)cIconsizeAssignment_6.eContents().get(0);
		private final Keyword cFoodKindKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFoodKindAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFoodKindFoodKindParserRuleCall_9_0 = (RuleCall)cFoodKindAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRandomFoodSizeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cProduceAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProduceRandomFoodSizeParserRuleCall_12_0 = (RuleCall)cProduceAssignment_12.eContents().get(0);
		private final Keyword cFoodTagKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cFoodTagAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cFoodTagINTTerminalRuleCall_15_0 = (RuleCall)cFoodTagAssignment_15.eContents().get(0);
		
		////locate locateTag1 = "..//.."
		////IconLocate:
		////	"Locate" "=" Locate=STRING
		////;
		////食物设计Icon与locate的设计 ---与上面一样,foodTag有6个
		//FoodInitDisplay:
		//	"foodIcon" "{" foodIcon+=IconTag* "}" // 设置foodImage和filePath----可能定义有问题
		//	"Icon_size" "=" Iconsize=IconSize // 20
		//	"foodKind" "{" foodKind+=FoodKind* "}" // 食物种类并且对应分数
		//	"randomFoodSize" produce=RandomFoodSize // 产生food的最大值，最小值
		//	"foodTag" "=" foodTag=INT // 2
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"foodIcon" "{" foodIcon+=IconTag* "}" // 设置foodImage和filePath----可能定义有问题
		//"Icon_size" "=" Iconsize=IconSize // 20
		//"foodKind" "{" foodKind+=FoodKind* "}" // 食物种类并且对应分数
		//"randomFoodSize" produce=RandomFoodSize // 产生food的最大值，最小值
		//"foodTag" "=" foodTag=INT
		public Group getGroup() { return cGroup; }
		
		//"foodIcon"
		public Keyword getFoodIconKeyword_0() { return cFoodIconKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//foodIcon+=IconTag*
		public Assignment getFoodIconAssignment_2() { return cFoodIconAssignment_2; }
		
		//IconTag
		public RuleCall getFoodIconIconTagParserRuleCall_2_0() { return cFoodIconIconTagParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//// 设置foodImage和filePath----可能定义有问题
		//"Icon_size"
		public Keyword getIcon_sizeKeyword_4() { return cIcon_sizeKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Iconsize=IconSize
		public Assignment getIconsizeAssignment_6() { return cIconsizeAssignment_6; }
		
		//IconSize
		public RuleCall getIconsizeIconSizeParserRuleCall_6_0() { return cIconsizeIconSizeParserRuleCall_6_0; }
		
		//// 20
		//"foodKind"
		public Keyword getFoodKindKeyword_7() { return cFoodKindKeyword_7; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//foodKind+=FoodKind*
		public Assignment getFoodKindAssignment_9() { return cFoodKindAssignment_9; }
		
		//FoodKind
		public RuleCall getFoodKindFoodKindParserRuleCall_9_0() { return cFoodKindFoodKindParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//// 食物种类并且对应分数
		//"randomFoodSize"
		public Keyword getRandomFoodSizeKeyword_11() { return cRandomFoodSizeKeyword_11; }
		
		//produce=RandomFoodSize
		public Assignment getProduceAssignment_12() { return cProduceAssignment_12; }
		
		//RandomFoodSize
		public RuleCall getProduceRandomFoodSizeParserRuleCall_12_0() { return cProduceRandomFoodSizeParserRuleCall_12_0; }
		
		//// 产生food的最大值，最小值
		//"foodTag"
		public Keyword getFoodTagKeyword_13() { return cFoodTagKeyword_13; }
		
		//"="
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }
		
		//foodTag=INT
		public Assignment getFoodTagAssignment_15() { return cFoodTagAssignment_15; }
		
		//INT
		public RuleCall getFoodTagINTTerminalRuleCall_15_0() { return cFoodTagINTTerminalRuleCall_15_0; }
	}
	public class FoodKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FoodKind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cKindIconTagCrossReference_0_0 = (CrossReference)cKindAssignment_0.eContents().get(0);
		private final RuleCall cKindIconTagIDTerminalRuleCall_0_0_1 = (RuleCall)cKindIconTagCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPointKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPointAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPointAdditionParserRuleCall_4_0 = (RuleCall)cPointAssignment_4.eContents().get(0);
		
		////kind1 = 0 : point = 50
		//FoodKind:
		//	kind=[IconTag] ":" "point" "=" point=Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=[IconTag] ":" "point" "=" point=Addition
		public Group getGroup() { return cGroup; }
		
		//kind=[IconTag]
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//[IconTag]
		public CrossReference getKindIconTagCrossReference_0_0() { return cKindIconTagCrossReference_0_0; }
		
		//ID
		public RuleCall getKindIconTagIDTerminalRuleCall_0_0_1() { return cKindIconTagIDTerminalRuleCall_0_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"point"
		public Keyword getPointKeyword_2() { return cPointKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//point=Addition
		public Assignment getPointAssignment_4() { return cPointAssignment_4; }
		
		//Addition
		public RuleCall getPointAdditionParserRuleCall_4_0() { return cPointAdditionParserRuleCall_4_0; }
	}
	public class ObstacleInitDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.ObstacleInitDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObstacleIconKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObstacleIconAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObstacleIconIconTagParserRuleCall_2_0 = (RuleCall)cObstacleIconAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIcon_sizeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIconsizeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIconsizeIconSizeParserRuleCall_6_0 = (RuleCall)cIconsizeAssignment_6.eContents().get(0);
		private final Keyword cObstacleTagKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cObstacleTagAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cObstacleTagINTTerminalRuleCall_9_0 = (RuleCall)cObstacleTagAssignment_9.eContents().get(0);
		
		////障碍设计
		////locate
		////需要改----Icon filepath 的设计
		//ObstacleInitDisplay:
		//	"ObstacleIcon" "{" ObstacleIcon+=IconTag* "}"
		//	"Icon_size" "=" Iconsize=IconSize
		//	"ObstacleTag" "=" ObstacleTag=INT // 3
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"ObstacleIcon" "{" ObstacleIcon+=IconTag* "}"
		//"Icon_size" "=" Iconsize=IconSize
		//"ObstacleTag" "=" ObstacleTag=INT
		public Group getGroup() { return cGroup; }
		
		//"ObstacleIcon"
		public Keyword getObstacleIconKeyword_0() { return cObstacleIconKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//ObstacleIcon+=IconTag*
		public Assignment getObstacleIconAssignment_2() { return cObstacleIconAssignment_2; }
		
		//IconTag
		public RuleCall getObstacleIconIconTagParserRuleCall_2_0() { return cObstacleIconIconTagParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"Icon_size"
		public Keyword getIcon_sizeKeyword_4() { return cIcon_sizeKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Iconsize=IconSize
		public Assignment getIconsizeAssignment_6() { return cIconsizeAssignment_6; }
		
		//IconSize
		public RuleCall getIconsizeIconSizeParserRuleCall_6_0() { return cIconsizeIconSizeParserRuleCall_6_0; }
		
		//"ObstacleTag"
		public Keyword getObstacleTagKeyword_7() { return cObstacleTagKeyword_7; }
		
		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//ObstacleTag=INT
		public Assignment getObstacleTagAssignment_9() { return cObstacleTagAssignment_9; }
		
		//INT
		public RuleCall getObstacleTagINTTerminalRuleCall_9_0() { return cObstacleTagINTTerminalRuleCall_9_0; }
	}
	public class RandomFoodSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.RandomFoodSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxsizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxsizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxsizeINTTerminalRuleCall_1_0 = (RuleCall)cMaxsizeAssignment_1.eContents().get(0);
		private final Keyword cMinsizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinsizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinsizeINTTerminalRuleCall_3_0 = (RuleCall)cMinsizeAssignment_3.eContents().get(0);
		
		//RandomFoodSize:
		//	"Maxsize" maxsize=INT
		//	"Minsize" minsize=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Maxsize" maxsize=INT
		//"Minsize" minsize=INT
		public Group getGroup() { return cGroup; }
		
		//"Maxsize"
		public Keyword getMaxsizeKeyword_0() { return cMaxsizeKeyword_0; }
		
		//maxsize=INT
		public Assignment getMaxsizeAssignment_1() { return cMaxsizeAssignment_1; }
		
		//INT
		public RuleCall getMaxsizeINTTerminalRuleCall_1_0() { return cMaxsizeINTTerminalRuleCall_1_0; }
		
		//"Minsize"
		public Keyword getMinsizeKeyword_2() { return cMinsizeKeyword_2; }
		
		//minsize=INT
		public Assignment getMinsizeAssignment_3() { return cMinsizeAssignment_3; }
		
		//INT
		public RuleCall getMinsizeINTTerminalRuleCall_3_0() { return cMinsizeINTTerminalRuleCall_3_0; }
	}
	public class MinsizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Minsize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxsizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxsizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxsizeINTTerminalRuleCall_1_0 = (RuleCall)cMaxsizeAssignment_1.eContents().get(0);
		
		//Minsize:
		//	"Maxsize" maxsize=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Maxsize" maxsize=INT
		public Group getGroup() { return cGroup; }
		
		//"Maxsize"
		public Keyword getMaxsizeKeyword_0() { return cMaxsizeKeyword_0; }
		
		//maxsize=INT
		public Assignment getMaxsizeAssignment_1() { return cMaxsizeAssignment_1; }
		
		//INT
		public RuleCall getMaxsizeINTTerminalRuleCall_1_0() { return cMaxsizeINTTerminalRuleCall_1_0; }
	}
	public class MaxsizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Maxsize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinsizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinsizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinsizeINTTerminalRuleCall_1_0 = (RuleCall)cMinsizeAssignment_1.eContents().get(0);
		
		//Maxsize:
		//	"Minsize" minsize=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Minsize" minsize=INT
		public Group getGroup() { return cGroup; }
		
		//"Minsize"
		public Keyword getMinsizeKeyword_0() { return cMinsizeKeyword_0; }
		
		//minsize=INT
		public Assignment getMinsizeAssignment_1() { return cMinsizeAssignment_1; }
		
		//INT
		public RuleCall getMinsizeINTTerminalRuleCall_1_0() { return cMinsizeINTTerminalRuleCall_1_0; }
	}
	public class TimeLimitedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.TimeLimited");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTimeLimitedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cFoodTimeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cObstacleTimeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		////时间限制
		//TimeLimited:
		//	"timeLimited" "{"
		//	FoodTime | ObstacleTime
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"timeLimited" "{"
		//FoodTime | ObstacleTime
		//"}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"timeLimited" "{"
		//FoodTime
		public Group getGroup_0() { return cGroup_0; }
		
		//"timeLimited"
		public Keyword getTimeLimitedKeyword_0_0() { return cTimeLimitedKeyword_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//FoodTime
		public RuleCall getFoodTimeParserRuleCall_0_2() { return cFoodTimeParserRuleCall_0_2; }
		
		//ObstacleTime
		//"}"
		public Group getGroup_1() { return cGroup_1; }
		
		//ObstacleTime
		public RuleCall getObstacleTimeParserRuleCall_1_0() { return cObstacleTimeParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}
	public class ObstacleTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.ObstacleTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObstacleTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObstacleTimeINTTerminalRuleCall_2_0 = (RuleCall)cObstacleTimeAssignment_2.eContents().get(0);
		
		//ObstacleTime:
		//	name=ID "=" ObstacleTime=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" ObstacleTime=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//ObstacleTime=INT
		public Assignment getObstacleTimeAssignment_2() { return cObstacleTimeAssignment_2; }
		
		//INT
		public RuleCall getObstacleTimeINTTerminalRuleCall_2_0() { return cObstacleTimeINTTerminalRuleCall_2_0; }
	}
	public class FoodTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.FoodTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFoodTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFoodTimeINTTerminalRuleCall_2_0 = (RuleCall)cFoodTimeAssignment_2.eContents().get(0);
		
		//FoodTime:
		//	name=ID "=" FoodTime=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" FoodTime=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//FoodTime=INT
		public Assignment getFoodTimeAssignment_2() { return cFoodTimeAssignment_2; }
		
		//INT
		public RuleCall getFoodTimeINTTerminalRuleCall_2_0() { return cFoodTimeINTTerminalRuleCall_2_0; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.VarSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllItemVarSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//////所有东西的状态---可以传label参数
		////GlobalAllItemStateSpec:
		////	"states" name=ID ("(" params += ParamSpec ( "," params += ParamSpec)*")") "{"
		////			states += AllItemState+
		////			"start" "=" start = [AllItemState]
		////	"}"
		////;
		//////所有东西的状态
		////AllItemState:
		////	name=ID "{"
		////		display = AllItemDisplaySpec
		////		("Restart" "{"
		////			restart += RestartMenu
		////		 "}")?
		////		 ("Obstacle_Refresh" "{"
		////			//每隔2000s刷新
		////			refresh += ObstacleRefresh
		////		 "}")?
		////		 ("food_Refresh" "{"
		////			//每隔2000s产生新的food
		////			refresh += FoodRefresh
		////		 "}")?
		////	"}"
		////;
		//////到时间就重新刷新obstacle
		////ObstacleRefresh:
		////	"time" "limited" "=" time=[ObstacleTime]
		////	"random" "refresh" random=[InitialObstacleSpecificatin]
		////;
		////
		//////到时间就增加food并且random出现
		////FoodRefresh: 
		////	"time" "limited" "=" time=[FoodTime]
		////	"add" "random"":" random=[InitialFoodSpecificatin] size = RandomFoodSize
		////;
		////
		//////显示label---也就是在画板上的图片
		////AllItemDisplaySpec:
		////	"display" "{"
		////		"as" display_type="label"
		////		"var" var = [VarSpec]
		////	"}"
		////;
		//VarSpec:
		//	AllItemVarSpec | ParamSpec;
		@Override public ParserRule getRule() { return rule; }
		
		//AllItemVarSpec | ParamSpec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllItemVarSpec
		public RuleCall getAllItemVarSpecParserRuleCall_0() { return cAllItemVarSpecParserRuleCall_0; }
		
		//ParamSpec
		public RuleCall getParamSpecParserRuleCall_1() { return cParamSpecParserRuleCall_1; }
	}
	public class AllItemVarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.AllItemVarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////变量---显示label(参考discovered)--在不同内部定义的变量
		//AllItemVarSpec:
		//	type=("int" | "String") name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=("int" | "String") name=ID
		public Group getGroup() { return cGroup; }
		
		//type=("int" | "String")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//("int" | "String")
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//"int"
		public Keyword getTypeIntKeyword_0_0_0() { return cTypeIntKeyword_0_0_0; }
		
		//"String"
		public Keyword getTypeStringKeyword_0_0_1() { return cTypeStringKeyword_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParamSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.ParamSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeBehaviourKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////普通参数--形式参数
		//ParamSpec:
		//	type=("int" | "String" | "Behaviour") name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=("int" | "String" | "Behaviour") name=ID
		public Group getGroup() { return cGroup; }
		
		//type=("int" | "String" | "Behaviour")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//("int" | "String" | "Behaviour")
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//"int"
		public Keyword getTypeIntKeyword_0_0_0() { return cTypeIntKeyword_0_0_0; }
		
		//"String"
		public Keyword getTypeStringKeyword_0_0_1() { return cTypeStringKeyword_0_0_1; }
		
		//"Behaviour"
		public Keyword getTypeBehaviourKeyword_0_0_2() { return cTypeBehaviourKeyword_0_0_2; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////AllItemStateSpec:
		////	AllItemStateSpecReference |LocalAllItemStateSpec 
		////;
		//////单独所有的状态
		////LocalAllItemStateSpec:
		////	"states" "{"
		////		states+=AllItemState+
		////		
		////		"start" "=" start=[AllItemState]
		////	"}"
		////;
		////
		//////调用states方法
		////AllItemStateSpecReference:
		////	"states" stateSpec=[GlobalAllItemStateSpec] ("(" params += Value ("," params += Value )*")")?
		////;
		//Addition Expression:
		//	Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+" | "-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+" | "-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication Expression:
		//	Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*" | "/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*" | "/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary Expression:
		//	IntLiteral | RealLiteral |
		//	"(" Addition ")";
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | RealLiteral |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
		
		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//	val=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//val=REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class OptionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.OptionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartFieldDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestartMenuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////VarRef:
		////	ref = [AllItemVarSpec]
		////;
		////
		////DirectBehaviour:
		////	EndGameBehaviour |
		////	NoOpBehaviour {NoOpBehaviour}
		////;
		////
		//////没有任何behaviour
		////NoOpBehaviour :
		////	"nop" 
		////;
		////
		////IntValue:
		////	value = INT
		////;
		////
		////StringValue:
		////	value = STRING
		////;
		////选择---开始和重新开始菜单
		//OptionSpecification:
		//	StartFieldDeclaration | RestartMenu;
		@Override public ParserRule getRule() { return rule; }
		
		//StartFieldDeclaration | RestartMenu
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartFieldDeclaration
		public RuleCall getStartFieldDeclarationParserRuleCall_0() { return cStartFieldDeclarationParserRuleCall_0; }
		
		//RestartMenu
		public RuleCall getRestartMenuParserRuleCall_1() { return cRestartMenuParserRuleCall_1; }
	}
	public class RestartMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.RestartMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestartGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRestartMenuAction_1 = (Action)cGroup.eContents().get(1);
		
		////AllItemsStateBehavior:
		////	DirectBehaviour |
		////	BehaviourReference
		////;
		////
		////BehaviourReference:
		////	ref = [VarSpec]
		////;
		////
		////
		////EndGameBehaviour:
		////	"failed" "(" message=STRING ")"
		////;
		//RestartMenu:
		//	"restartGame" {RestartMenu};
		@Override public ParserRule getRule() { return rule; }
		
		//"restartGame" {RestartMenu}
		public Group getGroup() { return cGroup; }
		
		//"restartGame"
		public Keyword getRestartGameKeyword_0() { return cRestartGameKeyword_0; }
		
		//{RestartMenu}
		public Action getRestartMenuAction_1() { return cRestartMenuAction_1; }
	}
	public class StartFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.StartFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldGlobalFieldInitialisationCrossReference_2_0 = (CrossReference)cFieldAssignment_2.eContents().get(0);
		private final RuleCall cFieldGlobalFieldInitialisationIDTerminalRuleCall_2_0_1 = (RuleCall)cFieldGlobalFieldInitialisationCrossReference_2_0.eContents().get(1);
		
		//StartFieldDeclaration:
		//	"start" "=" field=[GlobalFieldInitialisation];
		@Override public ParserRule getRule() { return rule; }
		
		//"start" "=" field=[GlobalFieldInitialisation]
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//field=[GlobalFieldInitialisation]
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//[GlobalFieldInitialisation]
		public CrossReference getFieldGlobalFieldInitialisationCrossReference_2_0() { return cFieldGlobalFieldInitialisationCrossReference_2_0; }
		
		//ID
		public RuleCall getFieldGlobalFieldInitialisationIDTerminalRuleCall_2_0_1() { return cFieldGlobalFieldInitialisationIDTerminalRuleCall_2_0_1; }
	}
	public class AboutSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.AboutSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAboutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAboutTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAboutTitleSTRINGTerminalRuleCall_5_0 = (RuleCall)cAboutTitleAssignment_5.eContents().get(0);
		private final Keyword cInformationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAboutInforAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAboutInforSTRINGTerminalRuleCall_8_0 = (RuleCall)cAboutInforAssignment_8.eContents().get(0);
		private final Keyword cLabel_sizeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cXAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cXINTTerminalRuleCall_12_0 = (RuleCall)cXAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cYAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cYINTTerminalRuleCall_14_0 = (RuleCall)cYAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//AboutSpecification:
		//	"about" name=ID "{"
		//	"Title" ":" AboutTitle=STRING // TitlePath
		//	"Information" ":" AboutInfor=STRING // information
		//	"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"about" name=ID "{"
		//"Title" ":" AboutTitle=STRING // TitlePath
		//"Information" ":" AboutInfor=STRING // information
		//"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"about"
		public Keyword getAboutKeyword_0() { return cAboutKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"Title"
		public Keyword getTitleKeyword_3() { return cTitleKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//AboutTitle=STRING
		public Assignment getAboutTitleAssignment_5() { return cAboutTitleAssignment_5; }
		
		//STRING
		public RuleCall getAboutTitleSTRINGTerminalRuleCall_5_0() { return cAboutTitleSTRINGTerminalRuleCall_5_0; }
		
		//// TitlePath
		//"Information"
		public Keyword getInformationKeyword_6() { return cInformationKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//AboutInfor=STRING
		public Assignment getAboutInforAssignment_8() { return cAboutInforAssignment_8; }
		
		//STRING
		public RuleCall getAboutInforSTRINGTerminalRuleCall_8_0() { return cAboutInforSTRINGTerminalRuleCall_8_0; }
		
		//// information
		//"Label_size"
		public Keyword getLabel_sizeKeyword_9() { return cLabel_sizeKeyword_9; }
		
		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//x=INT
		public Assignment getXAssignment_12() { return cXAssignment_12; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_12_0() { return cXINTTerminalRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//y=INT
		public Assignment getYAssignment_14() { return cYAssignment_14; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_14_0() { return cYINTTerminalRuleCall_14_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//// x = 410, y = 380
		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class StringValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.StringVal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////不能重复很多次
		//StringVal:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class HelpSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.HelpSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cHelpTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHelpTitleSTRINGTerminalRuleCall_5_0 = (RuleCall)cHelpTitleAssignment_5.eContents().get(0);
		private final Keyword cInformationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHelpInforAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHelpInforSTRINGTerminalRuleCall_8_0 = (RuleCall)cHelpInforAssignment_8.eContents().get(0);
		private final Keyword cLabel_sizeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cXAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cXINTTerminalRuleCall_12_0 = (RuleCall)cXAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cYAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cYINTTerminalRuleCall_14_0 = (RuleCall)cYAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//HelpSpecification:
		//	"help" name=ID "{"
		//	"Title" ":" HelpTitle=STRING // TitlePath
		//	"Information" ":" HelpInfor=STRING // information
		//	"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"help" name=ID "{"
		//"Title" ":" HelpTitle=STRING // TitlePath
		//"Information" ":" HelpInfor=STRING // information
		//"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"help"
		public Keyword getHelpKeyword_0() { return cHelpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"Title"
		public Keyword getTitleKeyword_3() { return cTitleKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//HelpTitle=STRING
		public Assignment getHelpTitleAssignment_5() { return cHelpTitleAssignment_5; }
		
		//STRING
		public RuleCall getHelpTitleSTRINGTerminalRuleCall_5_0() { return cHelpTitleSTRINGTerminalRuleCall_5_0; }
		
		//// TitlePath
		//"Information"
		public Keyword getInformationKeyword_6() { return cInformationKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//HelpInfor=STRING
		public Assignment getHelpInforAssignment_8() { return cHelpInforAssignment_8; }
		
		//STRING
		public RuleCall getHelpInforSTRINGTerminalRuleCall_8_0() { return cHelpInforSTRINGTerminalRuleCall_8_0; }
		
		//// information
		//"Label_size"
		public Keyword getLabel_sizeKeyword_9() { return cLabel_sizeKeyword_9; }
		
		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//x=INT
		public Assignment getXAssignment_12() { return cXAssignment_12; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_12_0() { return cXINTTerminalRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//y=INT
		public Assignment getYAssignment_14() { return cYAssignment_14; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_14_0() { return cYINTTerminalRuleCall_14_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//// x = 410, y = 380
		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class BackSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.BackSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackGroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIconKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBackgroundIconAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBackgroundIconBackgroundIconParserRuleCall_4_0 = (RuleCall)cBackgroundIconAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBackGroundHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBackGroundHeightBackGroundSizeParserRuleCall_8_0 = (RuleCall)cBackGroundHeightAssignment_8.eContents().get(0);
		private final Keyword cWidthKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cBackGroundWidthAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBackGroundWidthBackGroundSizeParserRuleCall_11_0 = (RuleCall)cBackGroundWidthAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//BackSpecification:
		//	"backGround" "{"
		//	"Icon" "{" BackgroundIcon=BackgroundIcon "}" // 背景图片的一些detail
		//	"Height" "=" BackGroundHeight=BackGroundSize // 高
		//	"Width" "=" BackGroundWidth=BackGroundSize // 宽
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"backGround" "{"
		//"Icon" "{" BackgroundIcon=BackgroundIcon "}" // 背景图片的一些detail
		//"Height" "=" BackGroundHeight=BackGroundSize // 高
		//"Width" "=" BackGroundWidth=BackGroundSize // 宽
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"backGround"
		public Keyword getBackGroundKeyword_0() { return cBackGroundKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//"Icon"
		public Keyword getIconKeyword_2() { return cIconKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//BackgroundIcon=BackgroundIcon
		public Assignment getBackgroundIconAssignment_4() { return cBackgroundIconAssignment_4; }
		
		//BackgroundIcon
		public RuleCall getBackgroundIconBackgroundIconParserRuleCall_4_0() { return cBackgroundIconBackgroundIconParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//// 背景图片的一些detail
		//"Height"
		public Keyword getHeightKeyword_6() { return cHeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//BackGroundHeight=BackGroundSize
		public Assignment getBackGroundHeightAssignment_8() { return cBackGroundHeightAssignment_8; }
		
		//BackGroundSize
		public RuleCall getBackGroundHeightBackGroundSizeParserRuleCall_8_0() { return cBackGroundHeightBackGroundSizeParserRuleCall_8_0; }
		
		//// 高
		//"Width"
		public Keyword getWidthKeyword_9() { return cWidthKeyword_9; }
		
		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//BackGroundWidth=BackGroundSize
		public Assignment getBackGroundWidthAssignment_11() { return cBackGroundWidthAssignment_11; }
		
		//BackGroundSize
		public RuleCall getBackGroundWidthBackGroundSizeParserRuleCall_11_0() { return cBackGroundWidthBackGroundSizeParserRuleCall_11_0; }
		
		//// 宽
		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class BackgroundIconElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.BackgroundIcon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackgroundIconAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBackgroundTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBackgroundTagBackgroundTagParserRuleCall_1_0 = (RuleCall)cBackgroundTagAssignment_1.eContents().get(0);
		
		////定义头部image的一些东西--4个tag,分别0,1,2,3
		//BackgroundIcon:
		//	{BackgroundIcon} BackgroundTag+=BackgroundTag*;
		@Override public ParserRule getRule() { return rule; }
		
		//{BackgroundIcon} BackgroundTag+=BackgroundTag*
		public Group getGroup() { return cGroup; }
		
		//{BackgroundIcon}
		public Action getBackgroundIconAction_0() { return cBackgroundIconAction_0; }
		
		//BackgroundTag+=BackgroundTag*
		public Assignment getBackgroundTagAssignment_1() { return cBackgroundTagAssignment_1; }
		
		//BackgroundTag
		public RuleCall getBackgroundTagBackgroundTagParserRuleCall_1_0() { return cBackgroundTagBackgroundTagParserRuleCall_1_0; }
	}
	public class BackGroundSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.BackGroundSize");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BackGroundSize:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class BackgroundTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.BackgroundTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBKtagAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBKtagINTTerminalRuleCall_3_0 = (RuleCall)cBKtagAssignment_3.eContents().get(0);
		private final Keyword cLocateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLocateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocateSTRINGTerminalRuleCall_6_0 = (RuleCall)cLocateAssignment_6.eContents().get(0);
		
		////example: tag1 "xixi" = 1
		//BackgroundTag:
		//	name=ID value=STRING "=" BKtag=INT
		//	"Locate" ":" locate=STRING // 图像地址
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=STRING "=" BKtag=INT
		//"Locate" ":" locate=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//BKtag=INT
		public Assignment getBKtagAssignment_3() { return cBKtagAssignment_3; }
		
		//INT
		public RuleCall getBKtagINTTerminalRuleCall_3_0() { return cBKtagINTTerminalRuleCall_3_0; }
		
		//"Locate"
		public Keyword getLocateKeyword_4() { return cLocateKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//locate=STRING
		public Assignment getLocateAssignment_6() { return cLocateAssignment_6; }
		
		//STRING
		public RuleCall getLocateSTRINGTerminalRuleCall_6_0() { return cLocateSTRINGTerminalRuleCall_6_0; }
	}
	public class BackgroundTagLocateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.BackgroundTagLocate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////locate locateTag1 = "..//.."
		//BackgroundTagLocate:
		//	"Locate" name=ID "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Locate" name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }
		
		//"Locate"
		public Keyword getLocateKeyword_0() { return cLocateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class MusicSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.MusicSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMusicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBufferSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBuffersizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBuffersizeINTTerminalRuleCall_4_0 = (RuleCall)cBuffersizeAssignment_4.eContents().get(0);
		private final Assignment cMusicPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMusicPathMusicPathParserRuleCall_5_0 = (RuleCall)cMusicPathAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MusicSpecification:
		//	"Music" "{"
		//	"BufferSize" "=" buffersize=INT
		//	MusicPath+=MusicPath*
		//	"}" // 音乐的路径
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Music" "{"
		//"BufferSize" "=" buffersize=INT
		//MusicPath+=MusicPath*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"Music"
		public Keyword getMusicKeyword_0() { return cMusicKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//"BufferSize"
		public Keyword getBufferSizeKeyword_2() { return cBufferSizeKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//buffersize=INT
		public Assignment getBuffersizeAssignment_4() { return cBuffersizeAssignment_4; }
		
		//INT
		public RuleCall getBuffersizeINTTerminalRuleCall_4_0() { return cBuffersizeINTTerminalRuleCall_4_0; }
		
		//MusicPath+=MusicPath*
		public Assignment getMusicPathAssignment_5() { return cMusicPathAssignment_5; }
		
		//MusicPath
		public RuleCall getMusicPathMusicPathParserRuleCall_5_0() { return cMusicPathMusicPathParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MusicPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.group16.GreedySnake.MusicPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		
		//MusicPath:
		//	name=ID "path" "=" path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "path" "=" path=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"path"
		public Keyword getPathKeyword_1() { return cPathKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final GreedySnakeElements pGreedySnake;
	private final GlobalMapElements pGlobalMap;
	private final GlobalFieldInitialisationElements pGlobalFieldInitialisation;
	private final InitialFieldElements pInitialField;
	private final DefaultElements pDefault;
	private final InitialSnakeSpecificatinElements pInitialSnakeSpecificatin;
	private final InitialFoodSpecificatinElements pInitialFoodSpecificatin;
	private final InitialObstacleSpecificatinElements pInitialObstacleSpecificatin;
	private final InitialFireSpecificationElements pInitialFireSpecification;
	private final InitialSpeedSpecificationElements pInitialSpeedSpecification;
	private final SpeedGroupElements pSpeedGroup;
	private final FireMembersElements pFireMembers;
	private final SnakeMembersElements pSnakeMembers;
	private final FoodMembersElements pFoodMembers;
	private final ObstacleMembersElements pObstacleMembers;
	private final FireInitDisplayElements pFireInitDisplay;
	private final SnakeInitDisplayElements pSnakeInitDisplay;
	private final IconElements pIcon;
	private final IconSizeElements pIconSize;
	private final IconTagElements pIconTag;
	private final FoodInitDisplayElements pFoodInitDisplay;
	private final FoodKindElements pFoodKind;
	private final ObstacleInitDisplayElements pObstacleInitDisplay;
	private final RandomFoodSizeElements pRandomFoodSize;
	private final MinsizeElements pMinsize;
	private final MaxsizeElements pMaxsize;
	private final TimeLimitedElements pTimeLimited;
	private final ObstacleTimeElements pObstacleTime;
	private final FoodTimeElements pFoodTime;
	private final VarSpecElements pVarSpec;
	private final AllItemVarSpecElements pAllItemVarSpec;
	private final ParamSpecElements pParamSpec;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final REALElements pREAL;
	private final OptionSpecificationElements pOptionSpecification;
	private final RestartMenuElements pRestartMenu;
	private final StartFieldDeclarationElements pStartFieldDeclaration;
	private final AboutSpecificationElements pAboutSpecification;
	private final StringValElements pStringVal;
	private final HelpSpecificationElements pHelpSpecification;
	private final BackSpecificationElements pBackSpecification;
	private final BackgroundIconElements pBackgroundIcon;
	private final BackGroundSizeElements pBackGroundSize;
	private final BackgroundTagElements pBackgroundTag;
	private final BackgroundTagLocateElements pBackgroundTagLocate;
	private final MusicSpecificationElements pMusicSpecification;
	private final MusicPathElements pMusicPath;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreedySnakeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGreedySnake = new GreedySnakeElements();
		this.pGlobalMap = new GlobalMapElements();
		this.pGlobalFieldInitialisation = new GlobalFieldInitialisationElements();
		this.pInitialField = new InitialFieldElements();
		this.pDefault = new DefaultElements();
		this.pInitialSnakeSpecificatin = new InitialSnakeSpecificatinElements();
		this.pInitialFoodSpecificatin = new InitialFoodSpecificatinElements();
		this.pInitialObstacleSpecificatin = new InitialObstacleSpecificatinElements();
		this.pInitialFireSpecification = new InitialFireSpecificationElements();
		this.pInitialSpeedSpecification = new InitialSpeedSpecificationElements();
		this.pSpeedGroup = new SpeedGroupElements();
		this.pFireMembers = new FireMembersElements();
		this.pSnakeMembers = new SnakeMembersElements();
		this.pFoodMembers = new FoodMembersElements();
		this.pObstacleMembers = new ObstacleMembersElements();
		this.pFireInitDisplay = new FireInitDisplayElements();
		this.pSnakeInitDisplay = new SnakeInitDisplayElements();
		this.pIcon = new IconElements();
		this.pIconSize = new IconSizeElements();
		this.pIconTag = new IconTagElements();
		this.pFoodInitDisplay = new FoodInitDisplayElements();
		this.pFoodKind = new FoodKindElements();
		this.pObstacleInitDisplay = new ObstacleInitDisplayElements();
		this.pRandomFoodSize = new RandomFoodSizeElements();
		this.pMinsize = new MinsizeElements();
		this.pMaxsize = new MaxsizeElements();
		this.pTimeLimited = new TimeLimitedElements();
		this.pObstacleTime = new ObstacleTimeElements();
		this.pFoodTime = new FoodTimeElements();
		this.pVarSpec = new VarSpecElements();
		this.pAllItemVarSpec = new AllItemVarSpecElements();
		this.pParamSpec = new ParamSpecElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pREAL = new REALElements();
		this.pOptionSpecification = new OptionSpecificationElements();
		this.pRestartMenu = new RestartMenuElements();
		this.pStartFieldDeclaration = new StartFieldDeclarationElements();
		this.pAboutSpecification = new AboutSpecificationElements();
		this.pStringVal = new StringValElements();
		this.pHelpSpecification = new HelpSpecificationElements();
		this.pBackSpecification = new BackSpecificationElements();
		this.pBackgroundIcon = new BackgroundIconElements();
		this.pBackGroundSize = new BackGroundSizeElements();
		this.pBackgroundTag = new BackgroundTagElements();
		this.pBackgroundTagLocate = new BackgroundTagLocateElements();
		this.pMusicSpecification = new MusicSpecificationElements();
		this.pMusicPath = new MusicPathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.group16.GreedySnake".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////xtext里面显示的应该都是静态的东西，比如图像，长宽什么的，都是固定的
	//GreedySnake:
	//	// 需要增加help/about/background/music/SnakeSpeed/map
	//	"game" name=ID "{" (snakes+=InitialSnakeSpecificatin | foods+=InitialFoodSpecificatin |
	//	obstacles+=InitialObstacleSpecificatin | speed+=InitialSpeedSpecification | fire+=InitialFireSpecification |
	//	time+=TimeLimited | Map+=GlobalMap | about+=AboutSpecification | Help+=HelpSpecification | Music+=MusicSpecification
	//	| Backgrounds+=BackSpecification | fields+=GlobalFieldInitialisation | options+=OptionSpecification)+
	//	"}";
	public GreedySnakeElements getGreedySnakeAccess() {
		return pGreedySnake;
	}
	
	public ParserRule getGreedySnakeRule() {
		return getGreedySnakeAccess().getRule();
	}
	
	////map的filePath
	//GlobalMap:
	//	"Filepath" "=" map=STRING;
	public GlobalMapElements getGlobalMapAccess() {
		return pGlobalMap;
	}
	
	public ParserRule getGlobalMapRule() {
		return getGlobalMapAccess().getRule();
	}
	
	////初始界面---随机障碍，食物
	////因为没有设计简单/困难模式 所以就只有一个field
	//GlobalFieldInitialisation:
	//	"field" name=ID "{"
	//	// 画布的宽
	//	"Panel_width" "=" panelWidth=INT // 900
	//	// 画布的长
	//	"Panel_Height" "=" panelHeight=INT // 480
	//	"column" "=" width=INT // 40
	//	"row" "=" height=INT // 21
	//	"label_width" "=" labelWidth=INT // 1000
	//	"label_Height" "=" labelHeight=INT // 540
	//	field_initialisation=InitialField
	//	"}";
	public GlobalFieldInitialisationElements getGlobalFieldInitialisationAccess() {
		return pGlobalFieldInitialisation;
	}
	
	public ParserRule getGlobalFieldInitialisationRule() {
		return getGlobalFieldInitialisationAccess().getRule();
	}
	
	////FieldInitailisation:
	////	ref = initFieldReference | init = InitialField
	////;
	////
	////initFieldReference:
	////	"init" fieldRef=[InitialField] "(" ")"
	////;
	////关键字default
	//InitialField:
	//	"init" name=ID "(" ")" "{"
	//	"Default" ":" Default=Default
	//	"}";
	public InitialFieldElements getInitialFieldAccess() {
		return pInitialField;
	}
	
	public ParserRule getInitialFieldRule() {
		return getInitialFieldAccess().getRule();
	}
	
	//Default:
	//	"snakeLength" "=" length=STRING // "1" 
	//	"Score" "=" score=STRING // ""
	//	"Time" "=" time=STRING // ""
	//	"Amount" "=" amount=STRING // "0"
	//	"Weapon" "=" weapon=STRING // "20"
	//;
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//InitialSnakeSpecificatin:
	//	// headIcon 4个， bodyIcon 4个， 身体节点为1， Icon大小为20(height/width)， default speed 为300
	//	"snake" name=ID "{"
	//	members=SnakeMembers
	//	"}" Multiples+=[InitialSnakeSpecificatin]?;
	public InitialSnakeSpecificatinElements getInitialSnakeSpecificatinAccess() {
		return pInitialSnakeSpecificatin;
	}
	
	public ParserRule getInitialSnakeSpecificatinRule() {
		return getInitialSnakeSpecificatinAccess().getRule();
	}
	
	//InitialFoodSpecificatin:
	//	"food" name=ID "{"
	//	members=FoodMembers
	//	"}" Multiples+=[InitialFoodSpecificatin]?;
	public InitialFoodSpecificatinElements getInitialFoodSpecificatinAccess() {
		return pInitialFoodSpecificatin;
	}
	
	public ParserRule getInitialFoodSpecificatinRule() {
		return getInitialFoodSpecificatinAccess().getRule();
	}
	
	//InitialObstacleSpecificatin:
	//	"obstacle" name=ID "{"
	//	members=ObstacleMembers
	//	"}" Multiples+=[InitialObstacleSpecificatin]?;
	public InitialObstacleSpecificatinElements getInitialObstacleSpecificatinAccess() {
		return pInitialObstacleSpecificatin;
	}
	
	public ParserRule getInitialObstacleSpecificatinRule() {
		return getInitialObstacleSpecificatinAccess().getRule();
	}
	
	//InitialFireSpecification:
	//	"fire" name=ID "{"
	//	members=FireMembers
	//	"}" Multiples+=[InitialSnakeSpecificatin]?;
	public InitialFireSpecificationElements getInitialFireSpecificationAccess() {
		return pInitialFireSpecification;
	}
	
	public ParserRule getInitialFireSpecificationRule() {
		return getInitialFireSpecificationAccess().getRule();
	}
	
	//InitialSpeedSpecification:
	//	{InitialSpeedSpecification} "Speed" "{"
	//	speedGroup+=SpeedGroup*
	//	"}";
	public InitialSpeedSpecificationElements getInitialSpeedSpecificationAccess() {
		return pInitialSpeedSpecification;
	}
	
	public ParserRule getInitialSpeedSpecificationRule() {
		return getInitialSpeedSpecificationAccess().getRule();
	}
	
	////example: run = 200
	//SpeedGroup:
	//	name=ID "=" value=INT;
	public SpeedGroupElements getSpeedGroupAccess() {
		return pSpeedGroup;
	}
	
	public ParserRule getSpeedGroupRule() {
		return getSpeedGroupAccess().getRule();
	}
	
	//FireMembers:
	//	fire=FireInitDisplay;
	public FireMembersElements getFireMembersAccess() {
		return pFireMembers;
	}
	
	public ParserRule getFireMembersRule() {
		return getFireMembersAccess().getRule();
	}
	
	//SnakeMembers:
	//	sna=SnakeInitDisplay;
	public SnakeMembersElements getSnakeMembersAccess() {
		return pSnakeMembers;
	}
	
	public ParserRule getSnakeMembersRule() {
		return getSnakeMembersAccess().getRule();
	}
	
	//FoodMembers:
	//	food=FoodInitDisplay;
	public FoodMembersElements getFoodMembersAccess() {
		return pFoodMembers;
	}
	
	public ParserRule getFoodMembersRule() {
		return getFoodMembersAccess().getRule();
	}
	
	//ObstacleMembers:
	//	obstacle=ObstacleInitDisplay;
	public ObstacleMembersElements getObstacleMembersAccess() {
		return pObstacleMembers;
	}
	
	public ParserRule getObstacleMembersRule() {
		return getObstacleMembersAccess().getRule();
	}
	
	////Members:
	////	sna += SnakeInitDisplay |
	////	FoodInitDisplay |
	////	ObstacleInitDisplay |
	////	AllItemDisplaySpec |
	////	AllItemVarSpec|
	////	AllItemStateSpec
	////;
	//FireInitDisplay:
	//	"FireIcon" "{" FireIcon+=IconTag* "}"
	//	"Icon_size" "=" Iconsize=IconSize // 20
	//;
	public FireInitDisplayElements getFireInitDisplayAccess() {
		return pFireInitDisplay;
	}
	
	public ParserRule getFireInitDisplayRule() {
		return getFireInitDisplayAccess().getRule();
	}
	
	////头部位置,头部设计的Icon和身体的位置与Icon
	//SnakeInitDisplay:
	//	"head" "=" head="(" initial_x=INT "," initial_y=INT ")" // (0,0)
	//	"headIcon" "{" headIcon+=IconTag* "}"
	//	"Icon_size" "=" Iconsize=IconSize // 20
	//	"BodyIcon" "{" BodyIcon+=IconTag* "}"
	////	"headIcon" headIcon = AllItemVarSpec "=" locate=STRING
	//	"defaultSpeed" "=" defaultSpeed=INT // 需要改
	//	"snakeTag" "=" snakeTag=INT // 1
	//;
	public SnakeInitDisplayElements getSnakeInitDisplayAccess() {
		return pSnakeInitDisplay;
	}
	
	public ParserRule getSnakeInitDisplayRule() {
		return getSnakeInitDisplayAccess().getRule();
	}
	
	////定义头部image的一些东西--4个tag,分别0,1,2,3
	//Icon:
	//	{Icon} IconTag+=IconTag*;
	public IconElements getIconAccess() {
		return pIcon;
	}
	
	public ParserRule getIconRule() {
		return getIconAccess().getRule();
	}
	
	//IconSize:
	//	INT;
	public IconSizeElements getIconSizeAccess() {
		return pIconSize;
	}
	
	public ParserRule getIconSizeRule() {
		return getIconSizeAccess().getRule();
	}
	
	////example: tag1 "xixi" = 1
	//IconTag:
	//	name=ID value=STRING "=" tag=INT
	//	"Locate" ":" Locate=STRING // 图像地址
	//;
	public IconTagElements getIconTagAccess() {
		return pIconTag;
	}
	
	public ParserRule getIconTagRule() {
		return getIconTagAccess().getRule();
	}
	
	////locate locateTag1 = "..//.."
	////IconLocate:
	////	"Locate" "=" Locate=STRING
	////;
	////食物设计Icon与locate的设计 ---与上面一样,foodTag有6个
	//FoodInitDisplay:
	//	"foodIcon" "{" foodIcon+=IconTag* "}" // 设置foodImage和filePath----可能定义有问题
	//	"Icon_size" "=" Iconsize=IconSize // 20
	//	"foodKind" "{" foodKind+=FoodKind* "}" // 食物种类并且对应分数
	//	"randomFoodSize" produce=RandomFoodSize // 产生food的最大值，最小值
	//	"foodTag" "=" foodTag=INT // 2
	//;
	public FoodInitDisplayElements getFoodInitDisplayAccess() {
		return pFoodInitDisplay;
	}
	
	public ParserRule getFoodInitDisplayRule() {
		return getFoodInitDisplayAccess().getRule();
	}
	
	////kind1 = 0 : point = 50
	//FoodKind:
	//	kind=[IconTag] ":" "point" "=" point=Addition;
	public FoodKindElements getFoodKindAccess() {
		return pFoodKind;
	}
	
	public ParserRule getFoodKindRule() {
		return getFoodKindAccess().getRule();
	}
	
	////障碍设计
	////locate
	////需要改----Icon filepath 的设计
	//ObstacleInitDisplay:
	//	"ObstacleIcon" "{" ObstacleIcon+=IconTag* "}"
	//	"Icon_size" "=" Iconsize=IconSize
	//	"ObstacleTag" "=" ObstacleTag=INT // 3
	//;
	public ObstacleInitDisplayElements getObstacleInitDisplayAccess() {
		return pObstacleInitDisplay;
	}
	
	public ParserRule getObstacleInitDisplayRule() {
		return getObstacleInitDisplayAccess().getRule();
	}
	
	//RandomFoodSize:
	//	"Maxsize" maxsize=INT
	//	"Minsize" minsize=INT;
	public RandomFoodSizeElements getRandomFoodSizeAccess() {
		return pRandomFoodSize;
	}
	
	public ParserRule getRandomFoodSizeRule() {
		return getRandomFoodSizeAccess().getRule();
	}
	
	//Minsize:
	//	"Maxsize" maxsize=INT;
	public MinsizeElements getMinsizeAccess() {
		return pMinsize;
	}
	
	public ParserRule getMinsizeRule() {
		return getMinsizeAccess().getRule();
	}
	
	//Maxsize:
	//	"Minsize" minsize=INT;
	public MaxsizeElements getMaxsizeAccess() {
		return pMaxsize;
	}
	
	public ParserRule getMaxsizeRule() {
		return getMaxsizeAccess().getRule();
	}
	
	////时间限制
	//TimeLimited:
	//	"timeLimited" "{"
	//	FoodTime | ObstacleTime
	//	"}";
	public TimeLimitedElements getTimeLimitedAccess() {
		return pTimeLimited;
	}
	
	public ParserRule getTimeLimitedRule() {
		return getTimeLimitedAccess().getRule();
	}
	
	//ObstacleTime:
	//	name=ID "=" ObstacleTime=INT;
	public ObstacleTimeElements getObstacleTimeAccess() {
		return pObstacleTime;
	}
	
	public ParserRule getObstacleTimeRule() {
		return getObstacleTimeAccess().getRule();
	}
	
	//FoodTime:
	//	name=ID "=" FoodTime=INT;
	public FoodTimeElements getFoodTimeAccess() {
		return pFoodTime;
	}
	
	public ParserRule getFoodTimeRule() {
		return getFoodTimeAccess().getRule();
	}
	
	//////所有东西的状态---可以传label参数
	////GlobalAllItemStateSpec:
	////	"states" name=ID ("(" params += ParamSpec ( "," params += ParamSpec)*")") "{"
	////			states += AllItemState+
	////			"start" "=" start = [AllItemState]
	////	"}"
	////;
	//////所有东西的状态
	////AllItemState:
	////	name=ID "{"
	////		display = AllItemDisplaySpec
	////		("Restart" "{"
	////			restart += RestartMenu
	////		 "}")?
	////		 ("Obstacle_Refresh" "{"
	////			//每隔2000s刷新
	////			refresh += ObstacleRefresh
	////		 "}")?
	////		 ("food_Refresh" "{"
	////			//每隔2000s产生新的food
	////			refresh += FoodRefresh
	////		 "}")?
	////	"}"
	////;
	//////到时间就重新刷新obstacle
	////ObstacleRefresh:
	////	"time" "limited" "=" time=[ObstacleTime]
	////	"random" "refresh" random=[InitialObstacleSpecificatin]
	////;
	////
	//////到时间就增加food并且random出现
	////FoodRefresh: 
	////	"time" "limited" "=" time=[FoodTime]
	////	"add" "random"":" random=[InitialFoodSpecificatin] size = RandomFoodSize
	////;
	////
	//////显示label---也就是在画板上的图片
	////AllItemDisplaySpec:
	////	"display" "{"
	////		"as" display_type="label"
	////		"var" var = [VarSpec]
	////	"}"
	////;
	//VarSpec:
	//	AllItemVarSpec | ParamSpec;
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	////变量---显示label(参考discovered)--在不同内部定义的变量
	//AllItemVarSpec:
	//	type=("int" | "String") name=ID;
	public AllItemVarSpecElements getAllItemVarSpecAccess() {
		return pAllItemVarSpec;
	}
	
	public ParserRule getAllItemVarSpecRule() {
		return getAllItemVarSpecAccess().getRule();
	}
	
	////普通参数--形式参数
	//ParamSpec:
	//	type=("int" | "String" | "Behaviour") name=ID;
	public ParamSpecElements getParamSpecAccess() {
		return pParamSpec;
	}
	
	public ParserRule getParamSpecRule() {
		return getParamSpecAccess().getRule();
	}
	
	////AllItemStateSpec:
	////	AllItemStateSpecReference |LocalAllItemStateSpec 
	////;
	//////单独所有的状态
	////LocalAllItemStateSpec:
	////	"states" "{"
	////		states+=AllItemState+
	////		
	////		"start" "=" start=[AllItemState]
	////	"}"
	////;
	////
	//////调用states方法
	////AllItemStateSpecReference:
	////	"states" stateSpec=[GlobalAllItemStateSpec] ("(" params += Value ("," params += Value )*")")?
	////;
	//Addition Expression:
	//	Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary Expression:
	//	IntLiteral | RealLiteral |
	//	"(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntLiteral:
	//	val=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	val=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	////VarRef:
	////	ref = [AllItemVarSpec]
	////;
	////
	////DirectBehaviour:
	////	EndGameBehaviour |
	////	NoOpBehaviour {NoOpBehaviour}
	////;
	////
	//////没有任何behaviour
	////NoOpBehaviour :
	////	"nop" 
	////;
	////
	////IntValue:
	////	value = INT
	////;
	////
	////StringValue:
	////	value = STRING
	////;
	////选择---开始和重新开始菜单
	//OptionSpecification:
	//	StartFieldDeclaration | RestartMenu;
	public OptionSpecificationElements getOptionSpecificationAccess() {
		return pOptionSpecification;
	}
	
	public ParserRule getOptionSpecificationRule() {
		return getOptionSpecificationAccess().getRule();
	}
	
	////AllItemsStateBehavior:
	////	DirectBehaviour |
	////	BehaviourReference
	////;
	////
	////BehaviourReference:
	////	ref = [VarSpec]
	////;
	////
	////
	////EndGameBehaviour:
	////	"failed" "(" message=STRING ")"
	////;
	//RestartMenu:
	//	"restartGame" {RestartMenu};
	public RestartMenuElements getRestartMenuAccess() {
		return pRestartMenu;
	}
	
	public ParserRule getRestartMenuRule() {
		return getRestartMenuAccess().getRule();
	}
	
	//StartFieldDeclaration:
	//	"start" "=" field=[GlobalFieldInitialisation];
	public StartFieldDeclarationElements getStartFieldDeclarationAccess() {
		return pStartFieldDeclaration;
	}
	
	public ParserRule getStartFieldDeclarationRule() {
		return getStartFieldDeclarationAccess().getRule();
	}
	
	//AboutSpecification:
	//	"about" name=ID "{"
	//	"Title" ":" AboutTitle=STRING // TitlePath
	//	"Information" ":" AboutInfor=STRING // information
	//	"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
	//	"}";
	public AboutSpecificationElements getAboutSpecificationAccess() {
		return pAboutSpecification;
	}
	
	public ParserRule getAboutSpecificationRule() {
		return getAboutSpecificationAccess().getRule();
	}
	
	////不能重复很多次
	//StringVal:
	//	value=STRING;
	public StringValElements getStringValAccess() {
		return pStringVal;
	}
	
	public ParserRule getStringValRule() {
		return getStringValAccess().getRule();
	}
	
	//HelpSpecification:
	//	"help" name=ID "{"
	//	"Title" ":" HelpTitle=STRING // TitlePath
	//	"Information" ":" HelpInfor=STRING // information
	//	"Label_size" ":" "(" x=INT "," y=INT ")" // x = 410, y = 380
	//	"}";
	public HelpSpecificationElements getHelpSpecificationAccess() {
		return pHelpSpecification;
	}
	
	public ParserRule getHelpSpecificationRule() {
		return getHelpSpecificationAccess().getRule();
	}
	
	//BackSpecification:
	//	"backGround" "{"
	//	"Icon" "{" BackgroundIcon=BackgroundIcon "}" // 背景图片的一些detail
	//	"Height" "=" BackGroundHeight=BackGroundSize // 高
	//	"Width" "=" BackGroundWidth=BackGroundSize // 宽
	//	"}";
	public BackSpecificationElements getBackSpecificationAccess() {
		return pBackSpecification;
	}
	
	public ParserRule getBackSpecificationRule() {
		return getBackSpecificationAccess().getRule();
	}
	
	////定义头部image的一些东西--4个tag,分别0,1,2,3
	//BackgroundIcon:
	//	{BackgroundIcon} BackgroundTag+=BackgroundTag*;
	public BackgroundIconElements getBackgroundIconAccess() {
		return pBackgroundIcon;
	}
	
	public ParserRule getBackgroundIconRule() {
		return getBackgroundIconAccess().getRule();
	}
	
	//BackGroundSize:
	//	INT;
	public BackGroundSizeElements getBackGroundSizeAccess() {
		return pBackGroundSize;
	}
	
	public ParserRule getBackGroundSizeRule() {
		return getBackGroundSizeAccess().getRule();
	}
	
	////example: tag1 "xixi" = 1
	//BackgroundTag:
	//	name=ID value=STRING "=" BKtag=INT
	//	"Locate" ":" locate=STRING // 图像地址
	//;
	public BackgroundTagElements getBackgroundTagAccess() {
		return pBackgroundTag;
	}
	
	public ParserRule getBackgroundTagRule() {
		return getBackgroundTagAccess().getRule();
	}
	
	////locate locateTag1 = "..//.."
	//BackgroundTagLocate:
	//	"Locate" name=ID "=" value=STRING;
	public BackgroundTagLocateElements getBackgroundTagLocateAccess() {
		return pBackgroundTagLocate;
	}
	
	public ParserRule getBackgroundTagLocateRule() {
		return getBackgroundTagLocateAccess().getRule();
	}
	
	//MusicSpecification:
	//	"Music" "{"
	//	"BufferSize" "=" buffersize=INT
	//	MusicPath+=MusicPath*
	//	"}" // 音乐的路径
	//;
	public MusicSpecificationElements getMusicSpecificationAccess() {
		return pMusicSpecification;
	}
	
	public ParserRule getMusicSpecificationRule() {
		return getMusicSpecificationAccess().getRule();
	}
	
	//MusicPath:
	//	name=ID "path" "=" path=STRING;
	public MusicPathElements getMusicPathAccess() {
		return pMusicPath;
	}
	
	public ParserRule getMusicPathRule() {
		return getMusicPathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
