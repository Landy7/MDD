/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.greedySnake.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage;
import org.xtext.example.mydsl2.group16.greedySnake.Move;
import org.xtext.example.mydsl2.group16.greedySnake.dis;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.MoveImpl#getDir <em>Dir</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.MoveImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.MoveImpl#getCoor <em>Coor</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.MoveImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.MoveImpl#getMoveVal <em>Move Val</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoveImpl extends MinimalEObjectImpl.Container implements Move
{
  /**
   * The cached value of the '{@link #getDir() <em>Dir</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDir()
   * @generated
   * @ordered
   */
  protected dis dir;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getCoor() <em>Coor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoor()
   * @generated
   * @ordered
   */
  protected static final String COOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCoor() <em>Coor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoor()
   * @generated
   * @ordered
   */
  protected String coor = COOR_EDEFAULT;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getMoveVal() <em>Move Val</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveVal()
   * @generated
   * @ordered
   */
  protected static final int MOVE_VAL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMoveVal() <em>Move Val</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveVal()
   * @generated
   * @ordered
   */
  protected int moveVal = MOVE_VAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreedySnakePackage.Literals.MOVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public dis getDir()
  {
    if (dir != null && dir.eIsProxy())
    {
      InternalEObject oldDir = (InternalEObject)dir;
      dir = (dis)eResolveProxy(oldDir);
      if (dir != oldDir)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GreedySnakePackage.MOVE__DIR, oldDir, dir));
      }
    }
    return dir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dis basicGetDir()
  {
    return dir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDir(dis newDir)
  {
    dis oldDir = dir;
    dir = newDir;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.MOVE__DIR, oldDir, dir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.MOVE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCoor()
  {
    return coor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCoor(String newCoor)
  {
    String oldCoor = coor;
    coor = newCoor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.MOVE__COOR, oldCoor, coor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.MOVE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMoveVal()
  {
    return moveVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveVal(int newMoveVal)
  {
    int oldMoveVal = moveVal;
    moveVal = newMoveVal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.MOVE__MOVE_VAL, oldMoveVal, moveVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreedySnakePackage.MOVE__DIR:
        if (resolve) return getDir();
        return basicGetDir();
      case GreedySnakePackage.MOVE__NAME:
        return getName();
      case GreedySnakePackage.MOVE__COOR:
        return getCoor();
      case GreedySnakePackage.MOVE__OPERATOR:
        return getOperator();
      case GreedySnakePackage.MOVE__MOVE_VAL:
        return getMoveVal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreedySnakePackage.MOVE__DIR:
        setDir((dis)newValue);
        return;
      case GreedySnakePackage.MOVE__NAME:
        setName((String)newValue);
        return;
      case GreedySnakePackage.MOVE__COOR:
        setCoor((String)newValue);
        return;
      case GreedySnakePackage.MOVE__OPERATOR:
        setOperator((String)newValue);
        return;
      case GreedySnakePackage.MOVE__MOVE_VAL:
        setMoveVal((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.MOVE__DIR:
        setDir((dis)null);
        return;
      case GreedySnakePackage.MOVE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GreedySnakePackage.MOVE__COOR:
        setCoor(COOR_EDEFAULT);
        return;
      case GreedySnakePackage.MOVE__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case GreedySnakePackage.MOVE__MOVE_VAL:
        setMoveVal(MOVE_VAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.MOVE__DIR:
        return dir != null;
      case GreedySnakePackage.MOVE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GreedySnakePackage.MOVE__COOR:
        return COOR_EDEFAULT == null ? coor != null : !COOR_EDEFAULT.equals(coor);
      case GreedySnakePackage.MOVE__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case GreedySnakePackage.MOVE__MOVE_VAL:
        return moveVal != MOVE_VAL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", coor: ");
    result.append(coor);
    result.append(", operator: ");
    result.append(operator);
    result.append(", moveVal: ");
    result.append(moveVal);
    result.append(')');
    return result.toString();
  }

} //MoveImpl
