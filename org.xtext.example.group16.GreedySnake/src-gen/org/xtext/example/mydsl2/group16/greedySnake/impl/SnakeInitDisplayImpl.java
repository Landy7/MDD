/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.greedySnake.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage;
import org.xtext.example.mydsl2.group16.greedySnake.IconTag;
import org.xtext.example.mydsl2.group16.greedySnake.SnakeInitDisplay;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Snake Init Display</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getHead <em>Head</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getInitial_x <em>Initial x</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getInitial_y <em>Initial y</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getHeadIcon <em>Head Icon</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getIconsize <em>Iconsize</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getBodyIcon <em>Body Icon</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getDefaultSpeed <em>Default Speed</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.SnakeInitDisplayImpl#getSnakeTag <em>Snake Tag</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SnakeInitDisplayImpl extends MinimalEObjectImpl.Container implements SnakeInitDisplay
{
  /**
   * The default value of the '{@link #getHead() <em>Head</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHead()
   * @generated
   * @ordered
   */
  protected static final String HEAD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHead() <em>Head</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHead()
   * @generated
   * @ordered
   */
  protected String head = HEAD_EDEFAULT;

  /**
   * The default value of the '{@link #getInitial_x() <em>Initial x</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_x()
   * @generated
   * @ordered
   */
  protected static final int INITIAL_X_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInitial_x() <em>Initial x</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_x()
   * @generated
   * @ordered
   */
  protected int initial_x = INITIAL_X_EDEFAULT;

  /**
   * The default value of the '{@link #getInitial_y() <em>Initial y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_y()
   * @generated
   * @ordered
   */
  protected static final int INITIAL_Y_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInitial_y() <em>Initial y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial_y()
   * @generated
   * @ordered
   */
  protected int initial_y = INITIAL_Y_EDEFAULT;

  /**
   * The cached value of the '{@link #getHeadIcon() <em>Head Icon</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeadIcon()
   * @generated
   * @ordered
   */
  protected EList<IconTag> headIcon;

  /**
   * The default value of the '{@link #getIconsize() <em>Iconsize</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIconsize()
   * @generated
   * @ordered
   */
  protected static final String ICONSIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIconsize() <em>Iconsize</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIconsize()
   * @generated
   * @ordered
   */
  protected String iconsize = ICONSIZE_EDEFAULT;

  /**
   * The cached value of the '{@link #getBodyIcon() <em>Body Icon</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodyIcon()
   * @generated
   * @ordered
   */
  protected EList<IconTag> bodyIcon;

  /**
   * The default value of the '{@link #getDefaultSpeed() <em>Default Speed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultSpeed()
   * @generated
   * @ordered
   */
  protected static final int DEFAULT_SPEED_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDefaultSpeed() <em>Default Speed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultSpeed()
   * @generated
   * @ordered
   */
  protected int defaultSpeed = DEFAULT_SPEED_EDEFAULT;

  /**
   * The default value of the '{@link #getSnakeTag() <em>Snake Tag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSnakeTag()
   * @generated
   * @ordered
   */
  protected static final int SNAKE_TAG_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSnakeTag() <em>Snake Tag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSnakeTag()
   * @generated
   * @ordered
   */
  protected int snakeTag = SNAKE_TAG_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SnakeInitDisplayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreedySnakePackage.Literals.SNAKE_INIT_DISPLAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHead()
  {
    return head;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHead(String newHead)
  {
    String oldHead = head;
    head = newHead;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD, oldHead, head));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInitial_x()
  {
    return initial_x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial_x(int newInitial_x)
  {
    int oldInitial_x = initial_x;
    initial_x = newInitial_x;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_X, oldInitial_x, initial_x));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInitial_y()
  {
    return initial_y;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial_y(int newInitial_y)
  {
    int oldInitial_y = initial_y;
    initial_y = newInitial_y;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_Y, oldInitial_y, initial_y));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IconTag> getHeadIcon()
  {
    if (headIcon == null)
    {
      headIcon = new EObjectContainmentEList<IconTag>(IconTag.class, this, GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON);
    }
    return headIcon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIconsize()
  {
    return iconsize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIconsize(String newIconsize)
  {
    String oldIconsize = iconsize;
    iconsize = newIconsize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__ICONSIZE, oldIconsize, iconsize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IconTag> getBodyIcon()
  {
    if (bodyIcon == null)
    {
      bodyIcon = new EObjectContainmentEList<IconTag>(IconTag.class, this, GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON);
    }
    return bodyIcon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDefaultSpeed()
  {
    return defaultSpeed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultSpeed(int newDefaultSpeed)
  {
    int oldDefaultSpeed = defaultSpeed;
    defaultSpeed = newDefaultSpeed;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__DEFAULT_SPEED, oldDefaultSpeed, defaultSpeed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getSnakeTag()
  {
    return snakeTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSnakeTag(int newSnakeTag)
  {
    int oldSnakeTag = snakeTag;
    snakeTag = newSnakeTag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.SNAKE_INIT_DISPLAY__SNAKE_TAG, oldSnakeTag, snakeTag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON:
        return ((InternalEList<?>)getHeadIcon()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON:
        return ((InternalEList<?>)getBodyIcon()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD:
        return getHead();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_X:
        return getInitial_x();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_Y:
        return getInitial_y();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON:
        return getHeadIcon();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__ICONSIZE:
        return getIconsize();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON:
        return getBodyIcon();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__DEFAULT_SPEED:
        return getDefaultSpeed();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__SNAKE_TAG:
        return getSnakeTag();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD:
        setHead((String)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_X:
        setInitial_x((Integer)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_Y:
        setInitial_y((Integer)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON:
        getHeadIcon().clear();
        getHeadIcon().addAll((Collection<? extends IconTag>)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__ICONSIZE:
        setIconsize((String)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON:
        getBodyIcon().clear();
        getBodyIcon().addAll((Collection<? extends IconTag>)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__DEFAULT_SPEED:
        setDefaultSpeed((Integer)newValue);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__SNAKE_TAG:
        setSnakeTag((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD:
        setHead(HEAD_EDEFAULT);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_X:
        setInitial_x(INITIAL_X_EDEFAULT);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_Y:
        setInitial_y(INITIAL_Y_EDEFAULT);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON:
        getHeadIcon().clear();
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__ICONSIZE:
        setIconsize(ICONSIZE_EDEFAULT);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON:
        getBodyIcon().clear();
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__DEFAULT_SPEED:
        setDefaultSpeed(DEFAULT_SPEED_EDEFAULT);
        return;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__SNAKE_TAG:
        setSnakeTag(SNAKE_TAG_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD:
        return HEAD_EDEFAULT == null ? head != null : !HEAD_EDEFAULT.equals(head);
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_X:
        return initial_x != INITIAL_X_EDEFAULT;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__INITIAL_Y:
        return initial_y != INITIAL_Y_EDEFAULT;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__HEAD_ICON:
        return headIcon != null && !headIcon.isEmpty();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__ICONSIZE:
        return ICONSIZE_EDEFAULT == null ? iconsize != null : !ICONSIZE_EDEFAULT.equals(iconsize);
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__BODY_ICON:
        return bodyIcon != null && !bodyIcon.isEmpty();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__DEFAULT_SPEED:
        return defaultSpeed != DEFAULT_SPEED_EDEFAULT;
      case GreedySnakePackage.SNAKE_INIT_DISPLAY__SNAKE_TAG:
        return snakeTag != SNAKE_TAG_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (head: ");
    result.append(head);
    result.append(", initial_x: ");
    result.append(initial_x);
    result.append(", initial_y: ");
    result.append(initial_y);
    result.append(", Iconsize: ");
    result.append(iconsize);
    result.append(", defaultSpeed: ");
    result.append(defaultSpeed);
    result.append(", snakeTag: ");
    result.append(snakeTag);
    result.append(')');
    return result.toString();
  }

} //SnakeInitDisplayImpl
