/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.greedySnake.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl2.group16.greedySnake.AboutSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.BackSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalFieldInitialisation;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalMap;
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnake;
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage;
import org.xtext.example.mydsl2.group16.greedySnake.HelpSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFireSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFoodSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialObstacleSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSpeedSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.MusicSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.OptionSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.TimeLimited;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Greedy Snake</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getSnakes <em>Snakes</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getFoods <em>Foods</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getObstacles <em>Obstacles</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getSpeed <em>Speed</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getFire <em>Fire</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getMap <em>Map</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getAbout <em>About</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getHelp <em>Help</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getMusic <em>Music</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getBackgrounds <em>Backgrounds</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getFields <em>Fields</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.group16.greedySnake.impl.GreedySnakeImpl#getOptions <em>Options</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GreedySnakeImpl extends MinimalEObjectImpl.Container implements GreedySnake
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSnakes() <em>Snakes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSnakes()
   * @generated
   * @ordered
   */
  protected EList<InitialSnakeSpecificatin> snakes;

  /**
   * The cached value of the '{@link #getFoods() <em>Foods</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFoods()
   * @generated
   * @ordered
   */
  protected EList<InitialFoodSpecificatin> foods;

  /**
   * The cached value of the '{@link #getObstacles() <em>Obstacles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObstacles()
   * @generated
   * @ordered
   */
  protected EList<InitialObstacleSpecificatin> obstacles;

  /**
   * The cached value of the '{@link #getSpeed() <em>Speed</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpeed()
   * @generated
   * @ordered
   */
  protected EList<InitialSpeedSpecification> speed;

  /**
   * The cached value of the '{@link #getFire() <em>Fire</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFire()
   * @generated
   * @ordered
   */
  protected EList<InitialFireSpecification> fire;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected EList<TimeLimited> time;

  /**
   * The cached value of the '{@link #getMap() <em>Map</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap()
   * @generated
   * @ordered
   */
  protected EList<GlobalMap> map;

  /**
   * The cached value of the '{@link #getAbout() <em>About</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbout()
   * @generated
   * @ordered
   */
  protected EList<AboutSpecification> about;

  /**
   * The cached value of the '{@link #getHelp() <em>Help</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHelp()
   * @generated
   * @ordered
   */
  protected EList<HelpSpecification> help;

  /**
   * The cached value of the '{@link #getMusic() <em>Music</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMusic()
   * @generated
   * @ordered
   */
  protected EList<MusicSpecification> music;

  /**
   * The cached value of the '{@link #getBackgrounds() <em>Backgrounds</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBackgrounds()
   * @generated
   * @ordered
   */
  protected EList<BackSpecification> backgrounds;

  /**
   * The cached value of the '{@link #getFields() <em>Fields</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFields()
   * @generated
   * @ordered
   */
  protected EList<GlobalFieldInitialisation> fields;

  /**
   * The cached value of the '{@link #getOptions() <em>Options</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptions()
   * @generated
   * @ordered
   */
  protected EList<OptionSpecification> options;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GreedySnakeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GreedySnakePackage.Literals.GREEDY_SNAKE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GreedySnakePackage.GREEDY_SNAKE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialSnakeSpecificatin> getSnakes()
  {
    if (snakes == null)
    {
      snakes = new EObjectContainmentEList<InitialSnakeSpecificatin>(InitialSnakeSpecificatin.class, this, GreedySnakePackage.GREEDY_SNAKE__SNAKES);
    }
    return snakes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialFoodSpecificatin> getFoods()
  {
    if (foods == null)
    {
      foods = new EObjectContainmentEList<InitialFoodSpecificatin>(InitialFoodSpecificatin.class, this, GreedySnakePackage.GREEDY_SNAKE__FOODS);
    }
    return foods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialObstacleSpecificatin> getObstacles()
  {
    if (obstacles == null)
    {
      obstacles = new EObjectContainmentEList<InitialObstacleSpecificatin>(InitialObstacleSpecificatin.class, this, GreedySnakePackage.GREEDY_SNAKE__OBSTACLES);
    }
    return obstacles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialSpeedSpecification> getSpeed()
  {
    if (speed == null)
    {
      speed = new EObjectContainmentEList<InitialSpeedSpecification>(InitialSpeedSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__SPEED);
    }
    return speed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialFireSpecification> getFire()
  {
    if (fire == null)
    {
      fire = new EObjectContainmentEList<InitialFireSpecification>(InitialFireSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__FIRE);
    }
    return fire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TimeLimited> getTime()
  {
    if (time == null)
    {
      time = new EObjectContainmentEList<TimeLimited>(TimeLimited.class, this, GreedySnakePackage.GREEDY_SNAKE__TIME);
    }
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GlobalMap> getMap()
  {
    if (map == null)
    {
      map = new EObjectContainmentEList<GlobalMap>(GlobalMap.class, this, GreedySnakePackage.GREEDY_SNAKE__MAP);
    }
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AboutSpecification> getAbout()
  {
    if (about == null)
    {
      about = new EObjectContainmentEList<AboutSpecification>(AboutSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__ABOUT);
    }
    return about;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<HelpSpecification> getHelp()
  {
    if (help == null)
    {
      help = new EObjectContainmentEList<HelpSpecification>(HelpSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__HELP);
    }
    return help;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MusicSpecification> getMusic()
  {
    if (music == null)
    {
      music = new EObjectContainmentEList<MusicSpecification>(MusicSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__MUSIC);
    }
    return music;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BackSpecification> getBackgrounds()
  {
    if (backgrounds == null)
    {
      backgrounds = new EObjectContainmentEList<BackSpecification>(BackSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS);
    }
    return backgrounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GlobalFieldInitialisation> getFields()
  {
    if (fields == null)
    {
      fields = new EObjectContainmentEList<GlobalFieldInitialisation>(GlobalFieldInitialisation.class, this, GreedySnakePackage.GREEDY_SNAKE__FIELDS);
    }
    return fields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OptionSpecification> getOptions()
  {
    if (options == null)
    {
      options = new EObjectContainmentEList<OptionSpecification>(OptionSpecification.class, this, GreedySnakePackage.GREEDY_SNAKE__OPTIONS);
    }
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GreedySnakePackage.GREEDY_SNAKE__SNAKES:
        return ((InternalEList<?>)getSnakes()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__FOODS:
        return ((InternalEList<?>)getFoods()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__OBSTACLES:
        return ((InternalEList<?>)getObstacles()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__SPEED:
        return ((InternalEList<?>)getSpeed()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__FIRE:
        return ((InternalEList<?>)getFire()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__TIME:
        return ((InternalEList<?>)getTime()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__MAP:
        return ((InternalEList<?>)getMap()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__ABOUT:
        return ((InternalEList<?>)getAbout()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__HELP:
        return ((InternalEList<?>)getHelp()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__MUSIC:
        return ((InternalEList<?>)getMusic()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS:
        return ((InternalEList<?>)getBackgrounds()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__FIELDS:
        return ((InternalEList<?>)getFields()).basicRemove(otherEnd, msgs);
      case GreedySnakePackage.GREEDY_SNAKE__OPTIONS:
        return ((InternalEList<?>)getOptions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GreedySnakePackage.GREEDY_SNAKE__NAME:
        return getName();
      case GreedySnakePackage.GREEDY_SNAKE__SNAKES:
        return getSnakes();
      case GreedySnakePackage.GREEDY_SNAKE__FOODS:
        return getFoods();
      case GreedySnakePackage.GREEDY_SNAKE__OBSTACLES:
        return getObstacles();
      case GreedySnakePackage.GREEDY_SNAKE__SPEED:
        return getSpeed();
      case GreedySnakePackage.GREEDY_SNAKE__FIRE:
        return getFire();
      case GreedySnakePackage.GREEDY_SNAKE__TIME:
        return getTime();
      case GreedySnakePackage.GREEDY_SNAKE__MAP:
        return getMap();
      case GreedySnakePackage.GREEDY_SNAKE__ABOUT:
        return getAbout();
      case GreedySnakePackage.GREEDY_SNAKE__HELP:
        return getHelp();
      case GreedySnakePackage.GREEDY_SNAKE__MUSIC:
        return getMusic();
      case GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS:
        return getBackgrounds();
      case GreedySnakePackage.GREEDY_SNAKE__FIELDS:
        return getFields();
      case GreedySnakePackage.GREEDY_SNAKE__OPTIONS:
        return getOptions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GreedySnakePackage.GREEDY_SNAKE__NAME:
        setName((String)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__SNAKES:
        getSnakes().clear();
        getSnakes().addAll((Collection<? extends InitialSnakeSpecificatin>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FOODS:
        getFoods().clear();
        getFoods().addAll((Collection<? extends InitialFoodSpecificatin>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__OBSTACLES:
        getObstacles().clear();
        getObstacles().addAll((Collection<? extends InitialObstacleSpecificatin>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__SPEED:
        getSpeed().clear();
        getSpeed().addAll((Collection<? extends InitialSpeedSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FIRE:
        getFire().clear();
        getFire().addAll((Collection<? extends InitialFireSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__TIME:
        getTime().clear();
        getTime().addAll((Collection<? extends TimeLimited>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__MAP:
        getMap().clear();
        getMap().addAll((Collection<? extends GlobalMap>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__ABOUT:
        getAbout().clear();
        getAbout().addAll((Collection<? extends AboutSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__HELP:
        getHelp().clear();
        getHelp().addAll((Collection<? extends HelpSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__MUSIC:
        getMusic().clear();
        getMusic().addAll((Collection<? extends MusicSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS:
        getBackgrounds().clear();
        getBackgrounds().addAll((Collection<? extends BackSpecification>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FIELDS:
        getFields().clear();
        getFields().addAll((Collection<? extends GlobalFieldInitialisation>)newValue);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__OPTIONS:
        getOptions().clear();
        getOptions().addAll((Collection<? extends OptionSpecification>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.GREEDY_SNAKE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GreedySnakePackage.GREEDY_SNAKE__SNAKES:
        getSnakes().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FOODS:
        getFoods().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__OBSTACLES:
        getObstacles().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__SPEED:
        getSpeed().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FIRE:
        getFire().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__TIME:
        getTime().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__MAP:
        getMap().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__ABOUT:
        getAbout().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__HELP:
        getHelp().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__MUSIC:
        getMusic().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS:
        getBackgrounds().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__FIELDS:
        getFields().clear();
        return;
      case GreedySnakePackage.GREEDY_SNAKE__OPTIONS:
        getOptions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GreedySnakePackage.GREEDY_SNAKE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GreedySnakePackage.GREEDY_SNAKE__SNAKES:
        return snakes != null && !snakes.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__FOODS:
        return foods != null && !foods.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__OBSTACLES:
        return obstacles != null && !obstacles.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__SPEED:
        return speed != null && !speed.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__FIRE:
        return fire != null && !fire.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__TIME:
        return time != null && !time.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__MAP:
        return map != null && !map.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__ABOUT:
        return about != null && !about.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__HELP:
        return help != null && !help.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__MUSIC:
        return music != null && !music.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__BACKGROUNDS:
        return backgrounds != null && !backgrounds.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__FIELDS:
        return fields != null && !fields.isEmpty();
      case GreedySnakePackage.GREEDY_SNAKE__OPTIONS:
        return options != null && !options.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //GreedySnakeImpl
