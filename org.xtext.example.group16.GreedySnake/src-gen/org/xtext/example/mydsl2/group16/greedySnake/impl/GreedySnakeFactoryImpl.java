/**
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.greedySnake.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl2.group16.greedySnake.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GreedySnakeFactoryImpl extends EFactoryImpl implements GreedySnakeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GreedySnakeFactory init()
  {
    try
    {
      GreedySnakeFactory theGreedySnakeFactory = (GreedySnakeFactory)EPackage.Registry.INSTANCE.getEFactory(GreedySnakePackage.eNS_URI);
      if (theGreedySnakeFactory != null)
      {
        return theGreedySnakeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GreedySnakeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GreedySnakeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GreedySnakePackage.GREEDY_SNAKE: return createGreedySnake();
      case GreedySnakePackage.GLOBAL_MAP: return createGlobalMap();
      case GreedySnakePackage.GLOBAL_FIELD_INITIALISATION: return createGlobalFieldInitialisation();
      case GreedySnakePackage.INITIAL_FIELD: return createInitialField();
      case GreedySnakePackage.DEFAULT: return createDefault();
      case GreedySnakePackage.INITIAL_SNAKE_SPECIFICATIN: return createInitialSnakeSpecificatin();
      case GreedySnakePackage.INITIAL_FOOD_SPECIFICATIN: return createInitialFoodSpecificatin();
      case GreedySnakePackage.INITIAL_OBSTACLE_SPECIFICATIN: return createInitialObstacleSpecificatin();
      case GreedySnakePackage.INITIAL_FIRE_SPECIFICATION: return createInitialFireSpecification();
      case GreedySnakePackage.INITIAL_SPEED_SPECIFICATION: return createInitialSpeedSpecification();
      case GreedySnakePackage.SPEED_GROUP: return createSpeedGroup();
      case GreedySnakePackage.FIRE_MEMBERS: return createFireMembers();
      case GreedySnakePackage.SNAKE_MEMBERS: return createSnakeMembers();
      case GreedySnakePackage.FOOD_MEMBERS: return createFoodMembers();
      case GreedySnakePackage.OBSTACLE_MEMBERS: return createObstacleMembers();
      case GreedySnakePackage.SNAKE_MOVE_SPECIFICATION: return createSnakeMoveSpecification();
      case GreedySnakePackage.MOVE: return createMove();
      case GreedySnakePackage.FIRE_INIT_DISPLAY: return createFireInitDisplay();
      case GreedySnakePackage.SNAKE_INIT_DISPLAY: return createSnakeInitDisplay();
      case GreedySnakePackage.ICON: return createIcon();
      case GreedySnakePackage.ICON_TAG: return createIconTag();
      case GreedySnakePackage.FOOD_INIT_DISPLAY: return createFoodInitDisplay();
      case GreedySnakePackage.FOOD_KIND: return createFoodKind();
      case GreedySnakePackage.OBSTACLE_INIT_DISPLAY: return createObstacleInitDisplay();
      case GreedySnakePackage.RANDOM_FOOD_SIZE: return createRandomFoodSize();
      case GreedySnakePackage.TIME_LIMITED: return createTimeLimited();
      case GreedySnakePackage.OBSTACLE_TIME: return createObstacleTime();
      case GreedySnakePackage.FOOD_TIME: return createFoodTime();
      case GreedySnakePackage.DIRECTION_SPECIFICATION: return createDirectionSpecification();
      case GreedySnakePackage.DIS: return createdis();
      case GreedySnakePackage.EXPRESSION: return createExpression();
      case GreedySnakePackage.INT_LITERAL: return createIntLiteral();
      case GreedySnakePackage.REAL_LITERAL: return createRealLiteral();
      case GreedySnakePackage.OPTION_SPECIFICATION: return createOptionSpecification();
      case GreedySnakePackage.RESTART_MENU: return createRestartMenu();
      case GreedySnakePackage.START_FIELD_DECLARATION: return createStartFieldDeclaration();
      case GreedySnakePackage.ABOUT_SPECIFICATION: return createAboutSpecification();
      case GreedySnakePackage.HELP_SPECIFICATION: return createHelpSpecification();
      case GreedySnakePackage.BACK_SPECIFICATION: return createBackSpecification();
      case GreedySnakePackage.BACKGROUND_ICON: return createBackgroundIcon();
      case GreedySnakePackage.BACK_GROUND_SIZE: return createBackGroundSize();
      case GreedySnakePackage.BACKGROUND_TAG: return createBackgroundTag();
      case GreedySnakePackage.BACKGROUND_TAG_LOCATE: return createBackgroundTagLocate();
      case GreedySnakePackage.MUSIC_SPECIFICATION: return createMusicSpecification();
      case GreedySnakePackage.MUSIC_PATH: return createMusicPath();
      case GreedySnakePackage.STRING_VAL: return createStringVal();
      case GreedySnakePackage.ADDITION: return createAddition();
      case GreedySnakePackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GreedySnakePackage.DIRECTION:
        return createDirectionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GreedySnakePackage.DIRECTION:
        return convertDirectionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreedySnake createGreedySnake()
  {
    GreedySnakeImpl greedySnake = new GreedySnakeImpl();
    return greedySnake;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalMap createGlobalMap()
  {
    GlobalMapImpl globalMap = new GlobalMapImpl();
    return globalMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalFieldInitialisation createGlobalFieldInitialisation()
  {
    GlobalFieldInitialisationImpl globalFieldInitialisation = new GlobalFieldInitialisationImpl();
    return globalFieldInitialisation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialField createInitialField()
  {
    InitialFieldImpl initialField = new InitialFieldImpl();
    return initialField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Default createDefault()
  {
    DefaultImpl default_ = new DefaultImpl();
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialSnakeSpecificatin createInitialSnakeSpecificatin()
  {
    InitialSnakeSpecificatinImpl initialSnakeSpecificatin = new InitialSnakeSpecificatinImpl();
    return initialSnakeSpecificatin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialFoodSpecificatin createInitialFoodSpecificatin()
  {
    InitialFoodSpecificatinImpl initialFoodSpecificatin = new InitialFoodSpecificatinImpl();
    return initialFoodSpecificatin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialObstacleSpecificatin createInitialObstacleSpecificatin()
  {
    InitialObstacleSpecificatinImpl initialObstacleSpecificatin = new InitialObstacleSpecificatinImpl();
    return initialObstacleSpecificatin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialFireSpecification createInitialFireSpecification()
  {
    InitialFireSpecificationImpl initialFireSpecification = new InitialFireSpecificationImpl();
    return initialFireSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialSpeedSpecification createInitialSpeedSpecification()
  {
    InitialSpeedSpecificationImpl initialSpeedSpecification = new InitialSpeedSpecificationImpl();
    return initialSpeedSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpeedGroup createSpeedGroup()
  {
    SpeedGroupImpl speedGroup = new SpeedGroupImpl();
    return speedGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FireMembers createFireMembers()
  {
    FireMembersImpl fireMembers = new FireMembersImpl();
    return fireMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SnakeMembers createSnakeMembers()
  {
    SnakeMembersImpl snakeMembers = new SnakeMembersImpl();
    return snakeMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FoodMembers createFoodMembers()
  {
    FoodMembersImpl foodMembers = new FoodMembersImpl();
    return foodMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObstacleMembers createObstacleMembers()
  {
    ObstacleMembersImpl obstacleMembers = new ObstacleMembersImpl();
    return obstacleMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SnakeMoveSpecification createSnakeMoveSpecification()
  {
    SnakeMoveSpecificationImpl snakeMoveSpecification = new SnakeMoveSpecificationImpl();
    return snakeMoveSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FireInitDisplay createFireInitDisplay()
  {
    FireInitDisplayImpl fireInitDisplay = new FireInitDisplayImpl();
    return fireInitDisplay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SnakeInitDisplay createSnakeInitDisplay()
  {
    SnakeInitDisplayImpl snakeInitDisplay = new SnakeInitDisplayImpl();
    return snakeInitDisplay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Icon createIcon()
  {
    IconImpl icon = new IconImpl();
    return icon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IconTag createIconTag()
  {
    IconTagImpl iconTag = new IconTagImpl();
    return iconTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FoodInitDisplay createFoodInitDisplay()
  {
    FoodInitDisplayImpl foodInitDisplay = new FoodInitDisplayImpl();
    return foodInitDisplay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FoodKind createFoodKind()
  {
    FoodKindImpl foodKind = new FoodKindImpl();
    return foodKind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObstacleInitDisplay createObstacleInitDisplay()
  {
    ObstacleInitDisplayImpl obstacleInitDisplay = new ObstacleInitDisplayImpl();
    return obstacleInitDisplay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RandomFoodSize createRandomFoodSize()
  {
    RandomFoodSizeImpl randomFoodSize = new RandomFoodSizeImpl();
    return randomFoodSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeLimited createTimeLimited()
  {
    TimeLimitedImpl timeLimited = new TimeLimitedImpl();
    return timeLimited;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObstacleTime createObstacleTime()
  {
    ObstacleTimeImpl obstacleTime = new ObstacleTimeImpl();
    return obstacleTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FoodTime createFoodTime()
  {
    FoodTimeImpl foodTime = new FoodTimeImpl();
    return foodTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectionSpecification createDirectionSpecification()
  {
    DirectionSpecificationImpl directionSpecification = new DirectionSpecificationImpl();
    return directionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public dis createdis()
  {
    disImpl dis = new disImpl();
    return dis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OptionSpecification createOptionSpecification()
  {
    OptionSpecificationImpl optionSpecification = new OptionSpecificationImpl();
    return optionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestartMenu createRestartMenu()
  {
    RestartMenuImpl restartMenu = new RestartMenuImpl();
    return restartMenu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartFieldDeclaration createStartFieldDeclaration()
  {
    StartFieldDeclarationImpl startFieldDeclaration = new StartFieldDeclarationImpl();
    return startFieldDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AboutSpecification createAboutSpecification()
  {
    AboutSpecificationImpl aboutSpecification = new AboutSpecificationImpl();
    return aboutSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HelpSpecification createHelpSpecification()
  {
    HelpSpecificationImpl helpSpecification = new HelpSpecificationImpl();
    return helpSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BackSpecification createBackSpecification()
  {
    BackSpecificationImpl backSpecification = new BackSpecificationImpl();
    return backSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BackgroundIcon createBackgroundIcon()
  {
    BackgroundIconImpl backgroundIcon = new BackgroundIconImpl();
    return backgroundIcon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BackGroundSize createBackGroundSize()
  {
    BackGroundSizeImpl backGroundSize = new BackGroundSizeImpl();
    return backGroundSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BackgroundTag createBackgroundTag()
  {
    BackgroundTagImpl backgroundTag = new BackgroundTagImpl();
    return backgroundTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BackgroundTagLocate createBackgroundTagLocate()
  {
    BackgroundTagLocateImpl backgroundTagLocate = new BackgroundTagLocateImpl();
    return backgroundTagLocate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MusicSpecification createMusicSpecification()
  {
    MusicSpecificationImpl musicSpecification = new MusicSpecificationImpl();
    return musicSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MusicPath createMusicPath()
  {
    MusicPathImpl musicPath = new MusicPathImpl();
    return musicPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringVal createStringVal()
  {
    StringValImpl stringVal = new StringValImpl();
    return stringVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Direction createDirectionFromString(EDataType eDataType, String initialValue)
  {
    Direction result = Direction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDirectionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreedySnakePackage getGreedySnakePackage()
  {
    return (GreedySnakePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GreedySnakePackage getPackage()
  {
    return GreedySnakePackage.eINSTANCE;
  }

} //GreedySnakeFactoryImpl
