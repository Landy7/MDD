/*
 * generated by Xtext 2.25.0.M1
 */
package org.xtext.example.mydsl2.group16.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl2.group16.greedySnake.AboutSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.Addition;
import org.xtext.example.mydsl2.group16.greedySnake.AllItemVarSpec;
import org.xtext.example.mydsl2.group16.greedySnake.BackSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.BackgroundIcon;
import org.xtext.example.mydsl2.group16.greedySnake.BackgroundTag;
import org.xtext.example.mydsl2.group16.greedySnake.BackgroundTagLocate;
import org.xtext.example.mydsl2.group16.greedySnake.Default;
import org.xtext.example.mydsl2.group16.greedySnake.FireInitDisplay;
import org.xtext.example.mydsl2.group16.greedySnake.FireMembers;
import org.xtext.example.mydsl2.group16.greedySnake.FoodInitDisplay;
import org.xtext.example.mydsl2.group16.greedySnake.FoodKind;
import org.xtext.example.mydsl2.group16.greedySnake.FoodMembers;
import org.xtext.example.mydsl2.group16.greedySnake.FoodTime;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalFieldInitialisation;
import org.xtext.example.mydsl2.group16.greedySnake.GlobalMap;
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnake;
import org.xtext.example.mydsl2.group16.greedySnake.GreedySnakePackage;
import org.xtext.example.mydsl2.group16.greedySnake.HelpSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.Icon;
import org.xtext.example.mydsl2.group16.greedySnake.IconTag;
import org.xtext.example.mydsl2.group16.greedySnake.InitialField;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFireSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.InitialFoodSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialObstacleSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSnakeSpecificatin;
import org.xtext.example.mydsl2.group16.greedySnake.InitialSpeedSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.IntLiteral;
import org.xtext.example.mydsl2.group16.greedySnake.Maxsize;
import org.xtext.example.mydsl2.group16.greedySnake.Minsize;
import org.xtext.example.mydsl2.group16.greedySnake.Multiplication;
import org.xtext.example.mydsl2.group16.greedySnake.MusicPath;
import org.xtext.example.mydsl2.group16.greedySnake.MusicSpecification;
import org.xtext.example.mydsl2.group16.greedySnake.ObstacleInitDisplay;
import org.xtext.example.mydsl2.group16.greedySnake.ObstacleMembers;
import org.xtext.example.mydsl2.group16.greedySnake.ObstacleTime;
import org.xtext.example.mydsl2.group16.greedySnake.ParamSpec;
import org.xtext.example.mydsl2.group16.greedySnake.RandomFoodSize;
import org.xtext.example.mydsl2.group16.greedySnake.RealLiteral;
import org.xtext.example.mydsl2.group16.greedySnake.RestartMenu;
import org.xtext.example.mydsl2.group16.greedySnake.SnakeInitDisplay;
import org.xtext.example.mydsl2.group16.greedySnake.SnakeMembers;
import org.xtext.example.mydsl2.group16.greedySnake.SpeedGroup;
import org.xtext.example.mydsl2.group16.greedySnake.StartFieldDeclaration;
import org.xtext.example.mydsl2.group16.greedySnake.StringVal;
import org.xtext.example.mydsl2.group16.services.GreedySnakeGrammarAccess;

@SuppressWarnings("all")
public class GreedySnakeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GreedySnakeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GreedySnakePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GreedySnakePackage.ABOUT_SPECIFICATION:
				sequence_AboutSpecification(context, (AboutSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case GreedySnakePackage.ALL_ITEM_VAR_SPEC:
				sequence_AllItemVarSpec(context, (AllItemVarSpec) semanticObject); 
				return; 
			case GreedySnakePackage.BACK_SPECIFICATION:
				sequence_BackSpecification(context, (BackSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.BACKGROUND_ICON:
				sequence_BackgroundIcon(context, (BackgroundIcon) semanticObject); 
				return; 
			case GreedySnakePackage.BACKGROUND_TAG:
				sequence_BackgroundTag(context, (BackgroundTag) semanticObject); 
				return; 
			case GreedySnakePackage.BACKGROUND_TAG_LOCATE:
				sequence_BackgroundTagLocate(context, (BackgroundTagLocate) semanticObject); 
				return; 
			case GreedySnakePackage.DEFAULT:
				sequence_Default(context, (Default) semanticObject); 
				return; 
			case GreedySnakePackage.FIRE_INIT_DISPLAY:
				sequence_FireInitDisplay(context, (FireInitDisplay) semanticObject); 
				return; 
			case GreedySnakePackage.FIRE_MEMBERS:
				sequence_FireMembers(context, (FireMembers) semanticObject); 
				return; 
			case GreedySnakePackage.FOOD_INIT_DISPLAY:
				sequence_FoodInitDisplay(context, (FoodInitDisplay) semanticObject); 
				return; 
			case GreedySnakePackage.FOOD_KIND:
				sequence_FoodKind(context, (FoodKind) semanticObject); 
				return; 
			case GreedySnakePackage.FOOD_MEMBERS:
				sequence_FoodMembers(context, (FoodMembers) semanticObject); 
				return; 
			case GreedySnakePackage.FOOD_TIME:
				sequence_FoodTime(context, (FoodTime) semanticObject); 
				return; 
			case GreedySnakePackage.GLOBAL_FIELD_INITIALISATION:
				sequence_GlobalFieldInitialisation(context, (GlobalFieldInitialisation) semanticObject); 
				return; 
			case GreedySnakePackage.GLOBAL_MAP:
				sequence_GlobalMap(context, (GlobalMap) semanticObject); 
				return; 
			case GreedySnakePackage.GREEDY_SNAKE:
				sequence_GreedySnake(context, (GreedySnake) semanticObject); 
				return; 
			case GreedySnakePackage.HELP_SPECIFICATION:
				sequence_HelpSpecification(context, (HelpSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.ICON:
				sequence_Icon(context, (Icon) semanticObject); 
				return; 
			case GreedySnakePackage.ICON_TAG:
				sequence_IconTag(context, (IconTag) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_FIELD:
				sequence_InitialField(context, (InitialField) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_FIRE_SPECIFICATION:
				sequence_InitialFireSpecification(context, (InitialFireSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_FOOD_SPECIFICATIN:
				sequence_InitialFoodSpecificatin(context, (InitialFoodSpecificatin) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_OBSTACLE_SPECIFICATIN:
				sequence_InitialObstacleSpecificatin(context, (InitialObstacleSpecificatin) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_SNAKE_SPECIFICATIN:
				sequence_InitialSnakeSpecificatin(context, (InitialSnakeSpecificatin) semanticObject); 
				return; 
			case GreedySnakePackage.INITIAL_SPEED_SPECIFICATION:
				sequence_InitialSpeedSpecification(context, (InitialSpeedSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case GreedySnakePackage.MAXSIZE:
				sequence_Maxsize(context, (Maxsize) semanticObject); 
				return; 
			case GreedySnakePackage.MINSIZE:
				sequence_Minsize(context, (Minsize) semanticObject); 
				return; 
			case GreedySnakePackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case GreedySnakePackage.MUSIC_PATH:
				sequence_MusicPath(context, (MusicPath) semanticObject); 
				return; 
			case GreedySnakePackage.MUSIC_SPECIFICATION:
				sequence_MusicSpecification(context, (MusicSpecification) semanticObject); 
				return; 
			case GreedySnakePackage.OBSTACLE_INIT_DISPLAY:
				sequence_ObstacleInitDisplay(context, (ObstacleInitDisplay) semanticObject); 
				return; 
			case GreedySnakePackage.OBSTACLE_MEMBERS:
				sequence_ObstacleMembers(context, (ObstacleMembers) semanticObject); 
				return; 
			case GreedySnakePackage.OBSTACLE_TIME:
				sequence_ObstacleTime(context, (ObstacleTime) semanticObject); 
				return; 
			case GreedySnakePackage.PARAM_SPEC:
				sequence_ParamSpec(context, (ParamSpec) semanticObject); 
				return; 
			case GreedySnakePackage.RANDOM_FOOD_SIZE:
				sequence_RandomFoodSize(context, (RandomFoodSize) semanticObject); 
				return; 
			case GreedySnakePackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case GreedySnakePackage.RESTART_MENU:
				sequence_RestartMenu(context, (RestartMenu) semanticObject); 
				return; 
			case GreedySnakePackage.SNAKE_INIT_DISPLAY:
				sequence_SnakeInitDisplay(context, (SnakeInitDisplay) semanticObject); 
				return; 
			case GreedySnakePackage.SNAKE_MEMBERS:
				sequence_SnakeMembers(context, (SnakeMembers) semanticObject); 
				return; 
			case GreedySnakePackage.SPEED_GROUP:
				sequence_SpeedGroup(context, (SpeedGroup) semanticObject); 
				return; 
			case GreedySnakePackage.START_FIELD_DECLARATION:
				sequence_StartFieldDeclaration(context, (StartFieldDeclaration) semanticObject); 
				return; 
			case GreedySnakePackage.STRING_VAL:
				sequence_StringVal(context, (StringVal) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AboutSpecification returns AboutSpecification
	 *
	 * Constraint:
	 *     (name=ID AboutTitle=STRING AboutInfor=STRING x=INT y=INT)
	 */
	protected void sequence_AboutSpecification(ISerializationContext context, AboutSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__ABOUT_TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__ABOUT_TITLE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__ABOUT_INFOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__ABOUT_INFOR));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__X));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ABOUT_SPECIFICATION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAboutSpecificationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAboutSpecificationAccess().getAboutTitleSTRINGTerminalRuleCall_5_0(), semanticObject.getAboutTitle());
		feeder.accept(grammarAccess.getAboutSpecificationAccess().getAboutInforSTRINGTerminalRuleCall_8_0(), semanticObject.getAboutInfor());
		feeder.accept(grammarAccess.getAboutSpecificationAccess().getXINTTerminalRuleCall_12_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getAboutSpecificationAccess().getYINTTerminalRuleCall_14_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *     Multiplication returns Addition
	 *     Multiplication.Multiplication_1_0 returns Addition
	 *     Primary returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 (operator+='+' | operator+='-') right+=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarSpec returns AllItemVarSpec
	 *     AllItemVarSpec returns AllItemVarSpec
	 *
	 * Constraint:
	 *     ((type='int' | type='String') name=ID)
	 */
	protected void sequence_AllItemVarSpec(ISerializationContext context, AllItemVarSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BackSpecification returns BackSpecification
	 *
	 * Constraint:
	 *     (BackgroundIcon=BackgroundIcon BackGroundHeight=BackGroundSize BackGroundWidth=BackGroundSize)
	 */
	protected void sequence_BackSpecification(ISerializationContext context, BackSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACKGROUND_ICON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACKGROUND_ICON));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACK_GROUND_HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACK_GROUND_HEIGHT));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACK_GROUND_WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACK_SPECIFICATION__BACK_GROUND_WIDTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackSpecificationAccess().getBackgroundIconBackgroundIconParserRuleCall_4_0(), semanticObject.getBackgroundIcon());
		feeder.accept(grammarAccess.getBackSpecificationAccess().getBackGroundHeightBackGroundSizeParserRuleCall_8_0(), semanticObject.getBackGroundHeight());
		feeder.accept(grammarAccess.getBackSpecificationAccess().getBackGroundWidthBackGroundSizeParserRuleCall_11_0(), semanticObject.getBackGroundWidth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BackgroundIcon returns BackgroundIcon
	 *
	 * Constraint:
	 *     BackgroundTag+=BackgroundTag*
	 */
	protected void sequence_BackgroundIcon(ISerializationContext context, BackgroundIcon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BackgroundTagLocate returns BackgroundTagLocate
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_BackgroundTagLocate(ISerializationContext context, BackgroundTagLocate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG_LOCATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG_LOCATE__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG_LOCATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG_LOCATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackgroundTagLocateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBackgroundTagLocateAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BackgroundTag returns BackgroundTag
	 *
	 * Constraint:
	 *     (name=ID value=STRING BKtag=INT locate=STRING)
	 */
	protected void sequence_BackgroundTag(ISerializationContext context, BackgroundTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__VALUE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__BKTAG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__BKTAG));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__LOCATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.BACKGROUND_TAG__LOCATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackgroundTagAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBackgroundTagAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getBackgroundTagAccess().getBKtagINTTerminalRuleCall_3_0(), semanticObject.getBKtag());
		feeder.accept(grammarAccess.getBackgroundTagAccess().getLocateSTRINGTerminalRuleCall_6_0(), semanticObject.getLocate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Default returns Default
	 *
	 * Constraint:
	 *     (length=STRING score=STRING time=STRING amount=STRING weapon=STRING)
	 */
	protected void sequence_Default(ISerializationContext context, Default semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.DEFAULT__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.DEFAULT__LENGTH));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.DEFAULT__SCORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.DEFAULT__SCORE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.DEFAULT__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.DEFAULT__TIME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.DEFAULT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.DEFAULT__AMOUNT));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.DEFAULT__WEAPON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.DEFAULT__WEAPON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultAccess().getLengthSTRINGTerminalRuleCall_2_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getDefaultAccess().getScoreSTRINGTerminalRuleCall_5_0(), semanticObject.getScore());
		feeder.accept(grammarAccess.getDefaultAccess().getTimeSTRINGTerminalRuleCall_8_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getDefaultAccess().getAmountSTRINGTerminalRuleCall_11_0(), semanticObject.getAmount());
		feeder.accept(grammarAccess.getDefaultAccess().getWeaponSTRINGTerminalRuleCall_14_0(), semanticObject.getWeapon());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FireInitDisplay returns FireInitDisplay
	 *
	 * Constraint:
	 *     (FireIcon+=IconTag* Iconsize=IconSize)
	 */
	protected void sequence_FireInitDisplay(ISerializationContext context, FireInitDisplay semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FireMembers returns FireMembers
	 *
	 * Constraint:
	 *     fire=FireInitDisplay
	 */
	protected void sequence_FireMembers(ISerializationContext context, FireMembers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.FIRE_MEMBERS__FIRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.FIRE_MEMBERS__FIRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFireMembersAccess().getFireFireInitDisplayParserRuleCall_0(), semanticObject.getFire());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FoodInitDisplay returns FoodInitDisplay
	 *
	 * Constraint:
	 *     (foodIcon+=IconTag* Iconsize=IconSize foodKind+=FoodKind* produce=RandomFoodSize foodTag=INT)
	 */
	protected void sequence_FoodInitDisplay(ISerializationContext context, FoodInitDisplay semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FoodKind returns FoodKind
	 *
	 * Constraint:
	 *     (kind=[IconTag|ID] point=Addition)
	 */
	protected void sequence_FoodKind(ISerializationContext context, FoodKind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.FOOD_KIND__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.FOOD_KIND__KIND));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.FOOD_KIND__POINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.FOOD_KIND__POINT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoodKindAccess().getKindIconTagIDTerminalRuleCall_0_0_1(), semanticObject.eGet(GreedySnakePackage.Literals.FOOD_KIND__KIND, false));
		feeder.accept(grammarAccess.getFoodKindAccess().getPointAdditionParserRuleCall_4_0(), semanticObject.getPoint());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FoodMembers returns FoodMembers
	 *
	 * Constraint:
	 *     food=FoodInitDisplay
	 */
	protected void sequence_FoodMembers(ISerializationContext context, FoodMembers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.FOOD_MEMBERS__FOOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.FOOD_MEMBERS__FOOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoodMembersAccess().getFoodFoodInitDisplayParserRuleCall_0(), semanticObject.getFood());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeLimited returns FoodTime
	 *     FoodTime returns FoodTime
	 *
	 * Constraint:
	 *     (name=ID FoodTime=INT)
	 */
	protected void sequence_FoodTime(ISerializationContext context, FoodTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.TIME_LIMITED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.TIME_LIMITED__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.FOOD_TIME__FOOD_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.FOOD_TIME__FOOD_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoodTimeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFoodTimeAccess().getFoodTimeINTTerminalRuleCall_2_0(), semanticObject.getFoodTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GlobalFieldInitialisation returns GlobalFieldInitialisation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         panelWidth=INT 
	 *         panelHeight=INT 
	 *         width=INT 
	 *         height=INT 
	 *         labelWidth=INT 
	 *         labelHeight=INT 
	 *         field_initialisation=InitialField
	 *     )
	 */
	protected void sequence_GlobalFieldInitialisation(ISerializationContext context, GlobalFieldInitialisation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__PANEL_WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__PANEL_WIDTH));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__PANEL_HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__PANEL_HEIGHT));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__WIDTH));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__HEIGHT));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__LABEL_WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__LABEL_WIDTH));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__LABEL_HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__LABEL_HEIGHT));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__FIELD_INITIALISATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_FIELD_INITIALISATION__FIELD_INITIALISATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getPanelWidthINTTerminalRuleCall_5_0(), semanticObject.getPanelWidth());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getPanelHeightINTTerminalRuleCall_8_0(), semanticObject.getPanelHeight());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getWidthINTTerminalRuleCall_11_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getHeightINTTerminalRuleCall_14_0(), semanticObject.getHeight());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getLabelWidthINTTerminalRuleCall_17_0(), semanticObject.getLabelWidth());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getLabelHeightINTTerminalRuleCall_20_0(), semanticObject.getLabelHeight());
		feeder.accept(grammarAccess.getGlobalFieldInitialisationAccess().getField_initialisationInitialFieldParserRuleCall_21_0(), semanticObject.getField_initialisation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GlobalMap returns GlobalMap
	 *
	 * Constraint:
	 *     map=STRING
	 */
	protected void sequence_GlobalMap(ISerializationContext context, GlobalMap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.GLOBAL_MAP__MAP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.GLOBAL_MAP__MAP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalMapAccess().getMapSTRINGTerminalRuleCall_2_0(), semanticObject.getMap());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GreedySnake returns GreedySnake
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             snakes+=InitialSnakeSpecificatin | 
	 *             foods+=InitialFoodSpecificatin | 
	 *             obstacles+=InitialObstacleSpecificatin | 
	 *             speed+=InitialSpeedSpecification | 
	 *             fire+=InitialFireSpecification | 
	 *             time+=TimeLimited | 
	 *             Map+=GlobalMap | 
	 *             about+=AboutSpecification | 
	 *             Help+=HelpSpecification | 
	 *             Music+=MusicSpecification | 
	 *             Backgrounds+=BackSpecification | 
	 *             fields+=GlobalFieldInitialisation | 
	 *             options+=OptionSpecification
	 *         )+
	 *     )
	 */
	protected void sequence_GreedySnake(ISerializationContext context, GreedySnake semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HelpSpecification returns HelpSpecification
	 *
	 * Constraint:
	 *     (name=ID HelpTitle=STRING HelpInfor=STRING x=INT y=INT)
	 */
	protected void sequence_HelpSpecification(ISerializationContext context, HelpSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__HELP_TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__HELP_TITLE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__HELP_INFOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__HELP_INFOR));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__X));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.HELP_SPECIFICATION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHelpSpecificationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHelpSpecificationAccess().getHelpTitleSTRINGTerminalRuleCall_5_0(), semanticObject.getHelpTitle());
		feeder.accept(grammarAccess.getHelpSpecificationAccess().getHelpInforSTRINGTerminalRuleCall_8_0(), semanticObject.getHelpInfor());
		feeder.accept(grammarAccess.getHelpSpecificationAccess().getXINTTerminalRuleCall_12_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getHelpSpecificationAccess().getYINTTerminalRuleCall_14_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IconTag returns IconTag
	 *
	 * Constraint:
	 *     (name=ID value=STRING tag=INT Locate=STRING)
	 */
	protected void sequence_IconTag(ISerializationContext context, IconTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ICON_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ICON_TAG__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ICON_TAG__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ICON_TAG__VALUE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ICON_TAG__TAG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ICON_TAG__TAG));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.ICON_TAG__LOCATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.ICON_TAG__LOCATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIconTagAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIconTagAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getIconTagAccess().getTagINTTerminalRuleCall_3_0(), semanticObject.getTag());
		feeder.accept(grammarAccess.getIconTagAccess().getLocateSTRINGTerminalRuleCall_6_0(), semanticObject.getLocate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Icon returns Icon
	 *
	 * Constraint:
	 *     IconTag+=IconTag*
	 */
	protected void sequence_Icon(ISerializationContext context, Icon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialField returns InitialField
	 *
	 * Constraint:
	 *     (name=ID Default=Default)
	 */
	protected void sequence_InitialField(ISerializationContext context, InitialField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.INITIAL_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.INITIAL_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.INITIAL_FIELD__DEFAULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.INITIAL_FIELD__DEFAULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialFieldAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialFieldAccess().getDefaultDefaultParserRuleCall_7_0(), semanticObject.getDefault());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitialFireSpecification returns InitialFireSpecification
	 *
	 * Constraint:
	 *     (name=ID members=FireMembers Multiples+=[InitialSnakeSpecificatin|ID]?)
	 */
	protected void sequence_InitialFireSpecification(ISerializationContext context, InitialFireSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialFoodSpecificatin returns InitialFoodSpecificatin
	 *
	 * Constraint:
	 *     (name=ID members=FoodMembers Multiples+=[InitialFoodSpecificatin|ID]?)
	 */
	protected void sequence_InitialFoodSpecificatin(ISerializationContext context, InitialFoodSpecificatin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialObstacleSpecificatin returns InitialObstacleSpecificatin
	 *
	 * Constraint:
	 *     (name=ID members=ObstacleMembers Multiples+=[InitialObstacleSpecificatin|ID]?)
	 */
	protected void sequence_InitialObstacleSpecificatin(ISerializationContext context, InitialObstacleSpecificatin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialSnakeSpecificatin returns InitialSnakeSpecificatin
	 *
	 * Constraint:
	 *     (name=ID members=SnakeMembers Multiples+=[InitialSnakeSpecificatin|ID]?)
	 */
	protected void sequence_InitialSnakeSpecificatin(ISerializationContext context, InitialSnakeSpecificatin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialSpeedSpecification returns InitialSpeedSpecification
	 *
	 * Constraint:
	 *     speedGroup+=SpeedGroup*
	 */
	protected void sequence_InitialSpeedSpecification(ISerializationContext context, InitialSpeedSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns IntLiteral
	 *     Addition.Addition_1_0 returns IntLiteral
	 *     Multiplication returns IntLiteral
	 *     Multiplication.Multiplication_1_0 returns IntLiteral
	 *     Primary returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.INT_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.INT_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Maxsize returns Maxsize
	 *
	 * Constraint:
	 *     minsize=INT
	 */
	protected void sequence_Maxsize(ISerializationContext context, Maxsize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.MAXSIZE__MINSIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.MAXSIZE__MINSIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxsizeAccess().getMinsizeINTTerminalRuleCall_1_0(), semanticObject.getMinsize());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Minsize returns Minsize
	 *
	 * Constraint:
	 *     maxsize=INT
	 */
	protected void sequence_Minsize(ISerializationContext context, Minsize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.MINSIZE__MAXSIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.MINSIZE__MAXSIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinsizeAccess().getMaxsizeINTTerminalRuleCall_1_0(), semanticObject.getMaxsize());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *     Primary returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 (operator+='*' | operator+='/') right+=Primary)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MusicPath returns MusicPath
	 *
	 * Constraint:
	 *     (name=ID path=STRING)
	 */
	protected void sequence_MusicPath(ISerializationContext context, MusicPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.MUSIC_PATH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.MUSIC_PATH__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.MUSIC_PATH__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.MUSIC_PATH__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMusicPathAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMusicPathAccess().getPathSTRINGTerminalRuleCall_3_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MusicSpecification returns MusicSpecification
	 *
	 * Constraint:
	 *     (buffersize=INT MusicPath+=MusicPath*)
	 */
	protected void sequence_MusicSpecification(ISerializationContext context, MusicSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObstacleInitDisplay returns ObstacleInitDisplay
	 *
	 * Constraint:
	 *     (ObstacleIcon+=IconTag* Iconsize=IconSize ObstacleTag=INT)
	 */
	protected void sequence_ObstacleInitDisplay(ISerializationContext context, ObstacleInitDisplay semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObstacleMembers returns ObstacleMembers
	 *
	 * Constraint:
	 *     obstacle=ObstacleInitDisplay
	 */
	protected void sequence_ObstacleMembers(ISerializationContext context, ObstacleMembers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.OBSTACLE_MEMBERS__OBSTACLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.OBSTACLE_MEMBERS__OBSTACLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObstacleMembersAccess().getObstacleObstacleInitDisplayParserRuleCall_0(), semanticObject.getObstacle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeLimited returns ObstacleTime
	 *     ObstacleTime returns ObstacleTime
	 *
	 * Constraint:
	 *     (name=ID ObstacleTime=INT)
	 */
	protected void sequence_ObstacleTime(ISerializationContext context, ObstacleTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.TIME_LIMITED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.TIME_LIMITED__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.OBSTACLE_TIME__OBSTACLE_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.OBSTACLE_TIME__OBSTACLE_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObstacleTimeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObstacleTimeAccess().getObstacleTimeINTTerminalRuleCall_2_0(), semanticObject.getObstacleTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarSpec returns ParamSpec
	 *     ParamSpec returns ParamSpec
	 *
	 * Constraint:
	 *     ((type='int' | type='String' | type='Behaviour') name=ID)
	 */
	protected void sequence_ParamSpec(ISerializationContext context, ParamSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RandomFoodSize returns RandomFoodSize
	 *
	 * Constraint:
	 *     (maxsize=INT minsize=INT)
	 */
	protected void sequence_RandomFoodSize(ISerializationContext context, RandomFoodSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.RANDOM_FOOD_SIZE__MAXSIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.RANDOM_FOOD_SIZE__MAXSIZE));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.RANDOM_FOOD_SIZE__MINSIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.RANDOM_FOOD_SIZE__MINSIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRandomFoodSizeAccess().getMaxsizeINTTerminalRuleCall_1_0(), semanticObject.getMaxsize());
		feeder.accept(grammarAccess.getRandomFoodSizeAccess().getMinsizeINTTerminalRuleCall_3_0(), semanticObject.getMinsize());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns RealLiteral
	 *     Addition.Addition_1_0 returns RealLiteral
	 *     Multiplication returns RealLiteral
	 *     Multiplication.Multiplication_1_0 returns RealLiteral
	 *     Primary returns RealLiteral
	 *     RealLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     val=REAL
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.REAL_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.REAL_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OptionSpecification returns RestartMenu
	 *     RestartMenu returns RestartMenu
	 *
	 * Constraint:
	 *     {RestartMenu}
	 */
	protected void sequence_RestartMenu(ISerializationContext context, RestartMenu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SnakeInitDisplay returns SnakeInitDisplay
	 *
	 * Constraint:
	 *     (
	 *         head='(' 
	 *         initial_x=INT 
	 *         initial_y=INT 
	 *         headIcon+=IconTag* 
	 *         Iconsize=IconSize 
	 *         BodyIcon+=IconTag* 
	 *         defaultSpeed=INT 
	 *         snakeTag=INT
	 *     )
	 */
	protected void sequence_SnakeInitDisplay(ISerializationContext context, SnakeInitDisplay semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SnakeMembers returns SnakeMembers
	 *
	 * Constraint:
	 *     sna=SnakeInitDisplay
	 */
	protected void sequence_SnakeMembers(ISerializationContext context, SnakeMembers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.SNAKE_MEMBERS__SNA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.SNAKE_MEMBERS__SNA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSnakeMembersAccess().getSnaSnakeInitDisplayParserRuleCall_0(), semanticObject.getSna());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpeedGroup returns SpeedGroup
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_SpeedGroup(ISerializationContext context, SpeedGroup semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.SPEED_GROUP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.SPEED_GROUP__NAME));
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.SPEED_GROUP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.SPEED_GROUP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpeedGroupAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSpeedGroupAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OptionSpecification returns StartFieldDeclaration
	 *     StartFieldDeclaration returns StartFieldDeclaration
	 *
	 * Constraint:
	 *     field=[GlobalFieldInitialisation|ID]
	 */
	protected void sequence_StartFieldDeclaration(ISerializationContext context, StartFieldDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.START_FIELD_DECLARATION__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.START_FIELD_DECLARATION__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartFieldDeclarationAccess().getFieldGlobalFieldInitialisationIDTerminalRuleCall_2_0_1(), semanticObject.eGet(GreedySnakePackage.Literals.START_FIELD_DECLARATION__FIELD, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringVal returns StringVal
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringVal(ISerializationContext context, StringVal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreedySnakePackage.Literals.STRING_VAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreedySnakePackage.Literals.STRING_VAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
